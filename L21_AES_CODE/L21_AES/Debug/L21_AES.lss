
L21_AES.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003bb8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000468  20000000  00003bb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        00000000  30000000  30000000  00020468  2**0
                  CONTENTS
  3 .bss          00000068  20000468  00004020  00020468  2**2
                  ALLOC
  4 .stack        00002000  200004d0  00004088  00020468  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020468  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020490  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001bfc9  00000000  00000000  000204e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000029d7  00000000  00000000  0003c4b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00001711  00000000  00000000  0003ee89  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000004e0  00000000  00000000  0004059a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000003e0  00000000  00000000  00040a7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001d2f7  00000000  00000000  00040e5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000b45d  00000000  00000000  0005e151  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0009a677  00000000  00000000  000695ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001690  00000000  00000000  00103c28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	d0 24 00 20 65 22 00 00 f9 22 00 00 f9 22 00 00     .$. e"..."..."..
	...
      2c:	f9 22 00 00 00 00 00 00 00 00 00 00 f9 22 00 00     ."..........."..
      3c:	f9 22 00 00 f9 22 00 00 f9 22 00 00 f9 22 00 00     ."..."..."..."..
      4c:	f9 22 00 00 f9 22 00 00 f9 22 00 00 f9 22 00 00     ."..."..."..."..
      5c:	f9 22 00 00 f9 22 00 00 f9 22 00 00 f9 22 00 00     ."..."..."..."..
      6c:	f9 22 00 00 f9 22 00 00 f9 22 00 00 f9 22 00 00     ."..."..."..."..
      7c:	f9 22 00 00 f9 22 00 00 f9 22 00 00 f9 22 00 00     ."..."..."..."..
      8c:	f9 22 00 00 f9 22 00 00 f9 22 00 00 f9 22 00 00     ."..."..."..."..
      9c:	f9 22 00 00 f9 22 00 00 f9 22 00 00 f9 22 00 00     ."..."..."..."..
      ac:	f9 22 00 00 00 00 00 00                             ."......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000468 	.word	0x20000468
      d4:	00000000 	.word	0x00000000
      d8:	00003bb8 	.word	0x00003bb8

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000046c 	.word	0x2000046c
     108:	00003bb8 	.word	0x00003bb8
     10c:	00003bb8 	.word	0x00003bb8
     110:	00000000 	.word	0x00000000

00000114 <key_expansion_core>:
	0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d
};


void key_expansion_core(unsigned char* in, unsigned char i)
{
     114:	b580      	push	{r7, lr}
     116:	b084      	sub	sp, #16
     118:	af00      	add	r7, sp, #0
     11a:	6078      	str	r0, [r7, #4]
     11c:	000a      	movs	r2, r1
     11e:	1cfb      	adds	r3, r7, #3
     120:	701a      	strb	r2, [r3, #0]
	unsigned char t = in[0];
     122:	230f      	movs	r3, #15
     124:	18fb      	adds	r3, r7, r3
     126:	687a      	ldr	r2, [r7, #4]
     128:	7812      	ldrb	r2, [r2, #0]
     12a:	701a      	strb	r2, [r3, #0]
	in[0] = in[1];
     12c:	687b      	ldr	r3, [r7, #4]
     12e:	785a      	ldrb	r2, [r3, #1]
     130:	687b      	ldr	r3, [r7, #4]
     132:	701a      	strb	r2, [r3, #0]
	in[1] = in[2];
     134:	687b      	ldr	r3, [r7, #4]
     136:	3301      	adds	r3, #1
     138:	687a      	ldr	r2, [r7, #4]
     13a:	7892      	ldrb	r2, [r2, #2]
     13c:	701a      	strb	r2, [r3, #0]
	in[2] = in[3];
     13e:	687b      	ldr	r3, [r7, #4]
     140:	3302      	adds	r3, #2
     142:	687a      	ldr	r2, [r7, #4]
     144:	78d2      	ldrb	r2, [r2, #3]
     146:	701a      	strb	r2, [r3, #0]
	in[3] = t;
     148:	687b      	ldr	r3, [r7, #4]
     14a:	3303      	adds	r3, #3
     14c:	220f      	movs	r2, #15
     14e:	18ba      	adds	r2, r7, r2
     150:	7812      	ldrb	r2, [r2, #0]
     152:	701a      	strb	r2, [r3, #0]

	in[0] = s_box[in[0]];	in[1] = s_box[in[1]];	in[2] = s_box[in[2]];	in[3] = s_box[in[3]];
     154:	687b      	ldr	r3, [r7, #4]
     156:	781b      	ldrb	r3, [r3, #0]
     158:	001a      	movs	r2, r3
     15a:	4b16      	ldr	r3, [pc, #88]	; (1b4 <key_expansion_core+0xa0>)
     15c:	5c9a      	ldrb	r2, [r3, r2]
     15e:	687b      	ldr	r3, [r7, #4]
     160:	701a      	strb	r2, [r3, #0]
     162:	687b      	ldr	r3, [r7, #4]
     164:	3301      	adds	r3, #1
     166:	687a      	ldr	r2, [r7, #4]
     168:	3201      	adds	r2, #1
     16a:	7812      	ldrb	r2, [r2, #0]
     16c:	0011      	movs	r1, r2
     16e:	4a11      	ldr	r2, [pc, #68]	; (1b4 <key_expansion_core+0xa0>)
     170:	5c52      	ldrb	r2, [r2, r1]
     172:	701a      	strb	r2, [r3, #0]
     174:	687b      	ldr	r3, [r7, #4]
     176:	3302      	adds	r3, #2
     178:	687a      	ldr	r2, [r7, #4]
     17a:	3202      	adds	r2, #2
     17c:	7812      	ldrb	r2, [r2, #0]
     17e:	0011      	movs	r1, r2
     180:	4a0c      	ldr	r2, [pc, #48]	; (1b4 <key_expansion_core+0xa0>)
     182:	5c52      	ldrb	r2, [r2, r1]
     184:	701a      	strb	r2, [r3, #0]
     186:	687b      	ldr	r3, [r7, #4]
     188:	3303      	adds	r3, #3
     18a:	687a      	ldr	r2, [r7, #4]
     18c:	3203      	adds	r2, #3
     18e:	7812      	ldrb	r2, [r2, #0]
     190:	0011      	movs	r1, r2
     192:	4a08      	ldr	r2, [pc, #32]	; (1b4 <key_expansion_core+0xa0>)
     194:	5c52      	ldrb	r2, [r2, r1]
     196:	701a      	strb	r2, [r3, #0]
	
	in[0] ^= rcon[i];
     198:	687b      	ldr	r3, [r7, #4]
     19a:	781a      	ldrb	r2, [r3, #0]
     19c:	1cfb      	adds	r3, r7, #3
     19e:	781b      	ldrb	r3, [r3, #0]
     1a0:	4905      	ldr	r1, [pc, #20]	; (1b8 <key_expansion_core+0xa4>)
     1a2:	5ccb      	ldrb	r3, [r1, r3]
     1a4:	4053      	eors	r3, r2
     1a6:	b2da      	uxtb	r2, r3
     1a8:	687b      	ldr	r3, [r7, #4]
     1aa:	701a      	strb	r2, [r3, #0]
}
     1ac:	46c0      	nop			; (mov r8, r8)
     1ae:	46bd      	mov	sp, r7
     1b0:	b004      	add	sp, #16
     1b2:	bd80      	pop	{r7, pc}
     1b4:	20000000 	.word	0x20000000
     1b8:	20000300 	.word	0x20000300

000001bc <key_expansion>:

void key_expansion(unsigned char* input_key, unsigned char* expanded_keys)
{
     1bc:	b580      	push	{r7, lr}
     1be:	b088      	sub	sp, #32
     1c0:	af00      	add	r7, sp, #0
     1c2:	6078      	str	r0, [r7, #4]
     1c4:	6039      	str	r1, [r7, #0]
	for (int k = 0; k < 16; k++)
     1c6:	2300      	movs	r3, #0
     1c8:	61fb      	str	r3, [r7, #28]
     1ca:	e00a      	b.n	1e2 <key_expansion+0x26>
	{
		expanded_keys[k] = input_key[k];
     1cc:	69fb      	ldr	r3, [r7, #28]
     1ce:	683a      	ldr	r2, [r7, #0]
     1d0:	18d3      	adds	r3, r2, r3
     1d2:	69fa      	ldr	r2, [r7, #28]
     1d4:	6879      	ldr	r1, [r7, #4]
     1d6:	188a      	adds	r2, r1, r2
     1d8:	7812      	ldrb	r2, [r2, #0]
     1da:	701a      	strb	r2, [r3, #0]
	for (int k = 0; k < 16; k++)
     1dc:	69fb      	ldr	r3, [r7, #28]
     1de:	3301      	adds	r3, #1
     1e0:	61fb      	str	r3, [r7, #28]
     1e2:	69fb      	ldr	r3, [r7, #28]
     1e4:	2b0f      	cmp	r3, #15
     1e6:	ddf1      	ble.n	1cc <key_expansion+0x10>
	}
		
	int bytes_generated = 16;
     1e8:	2310      	movs	r3, #16
     1ea:	61bb      	str	r3, [r7, #24]
	int rcon_iteration = 1;
     1ec:	2301      	movs	r3, #1
     1ee:	617b      	str	r3, [r7, #20]
	unsigned char temp[4];
	
	while (bytes_generated < 176)
     1f0:	e040      	b.n	274 <key_expansion+0xb8>
	{
		for (int i = 0; i < 4; i++)
     1f2:	2300      	movs	r3, #0
     1f4:	613b      	str	r3, [r7, #16]
     1f6:	e00f      	b.n	218 <key_expansion+0x5c>
		{
			temp[i] = expanded_keys[i + bytes_generated - 4];
     1f8:	693a      	ldr	r2, [r7, #16]
     1fa:	69bb      	ldr	r3, [r7, #24]
     1fc:	18d3      	adds	r3, r2, r3
     1fe:	3b04      	subs	r3, #4
     200:	683a      	ldr	r2, [r7, #0]
     202:	18d3      	adds	r3, r2, r3
     204:	7819      	ldrb	r1, [r3, #0]
     206:	2308      	movs	r3, #8
     208:	18fa      	adds	r2, r7, r3
     20a:	693b      	ldr	r3, [r7, #16]
     20c:	18d3      	adds	r3, r2, r3
     20e:	1c0a      	adds	r2, r1, #0
     210:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 4; i++)
     212:	693b      	ldr	r3, [r7, #16]
     214:	3301      	adds	r3, #1
     216:	613b      	str	r3, [r7, #16]
     218:	693b      	ldr	r3, [r7, #16]
     21a:	2b03      	cmp	r3, #3
     21c:	ddec      	ble.n	1f8 <key_expansion+0x3c>
		}	
		
		if (bytes_generated % 16 == 0)
     21e:	69bb      	ldr	r3, [r7, #24]
     220:	220f      	movs	r2, #15
     222:	4013      	ands	r3, r2
     224:	d10a      	bne.n	23c <key_expansion+0x80>
		{
			key_expansion_core(temp, rcon_iteration);
     226:	697b      	ldr	r3, [r7, #20]
     228:	b2da      	uxtb	r2, r3
     22a:	2308      	movs	r3, #8
     22c:	18fb      	adds	r3, r7, r3
     22e:	0011      	movs	r1, r2
     230:	0018      	movs	r0, r3
     232:	4b14      	ldr	r3, [pc, #80]	; (284 <key_expansion+0xc8>)
     234:	4798      	blx	r3
			rcon_iteration++;
     236:	697b      	ldr	r3, [r7, #20]
     238:	3301      	adds	r3, #1
     23a:	617b      	str	r3, [r7, #20]
		}
		
		for (int i = 0; i < 4; i++)
     23c:	2300      	movs	r3, #0
     23e:	60fb      	str	r3, [r7, #12]
     240:	e015      	b.n	26e <key_expansion+0xb2>
		{
			expanded_keys[bytes_generated] = expanded_keys[bytes_generated - 16] ^ temp[i];
     242:	69bb      	ldr	r3, [r7, #24]
     244:	683a      	ldr	r2, [r7, #0]
     246:	18d3      	adds	r3, r2, r3
     248:	69ba      	ldr	r2, [r7, #24]
     24a:	3a10      	subs	r2, #16
     24c:	6839      	ldr	r1, [r7, #0]
     24e:	188a      	adds	r2, r1, r2
     250:	7811      	ldrb	r1, [r2, #0]
     252:	2208      	movs	r2, #8
     254:	18b8      	adds	r0, r7, r2
     256:	68fa      	ldr	r2, [r7, #12]
     258:	1882      	adds	r2, r0, r2
     25a:	7812      	ldrb	r2, [r2, #0]
     25c:	404a      	eors	r2, r1
     25e:	b2d2      	uxtb	r2, r2
     260:	701a      	strb	r2, [r3, #0]
			bytes_generated++;
     262:	69bb      	ldr	r3, [r7, #24]
     264:	3301      	adds	r3, #1
     266:	61bb      	str	r3, [r7, #24]
		for (int i = 0; i < 4; i++)
     268:	68fb      	ldr	r3, [r7, #12]
     26a:	3301      	adds	r3, #1
     26c:	60fb      	str	r3, [r7, #12]
     26e:	68fb      	ldr	r3, [r7, #12]
     270:	2b03      	cmp	r3, #3
     272:	dde6      	ble.n	242 <key_expansion+0x86>
	while (bytes_generated < 176)
     274:	69bb      	ldr	r3, [r7, #24]
     276:	2baf      	cmp	r3, #175	; 0xaf
     278:	ddbb      	ble.n	1f2 <key_expansion+0x36>
		}
	}
}
     27a:	46c0      	nop			; (mov r8, r8)
     27c:	46bd      	mov	sp, r7
     27e:	b008      	add	sp, #32
     280:	bd80      	pop	{r7, pc}
     282:	46c0      	nop			; (mov r8, r8)
     284:	00000115 	.word	0x00000115

00000288 <byte_substitution>:

void byte_substitution(unsigned char* state)
{
     288:	b580      	push	{r7, lr}
     28a:	b084      	sub	sp, #16
     28c:	af00      	add	r7, sp, #0
     28e:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < 16; i++)
     290:	230f      	movs	r3, #15
     292:	18fb      	adds	r3, r7, r3
     294:	2200      	movs	r2, #0
     296:	701a      	strb	r2, [r3, #0]
     298:	e015      	b.n	2c6 <byte_substitution+0x3e>
	{
		state[i] = s_box[state[i]];
     29a:	230f      	movs	r3, #15
     29c:	18fb      	adds	r3, r7, r3
     29e:	781b      	ldrb	r3, [r3, #0]
     2a0:	687a      	ldr	r2, [r7, #4]
     2a2:	18d3      	adds	r3, r2, r3
     2a4:	220f      	movs	r2, #15
     2a6:	18ba      	adds	r2, r7, r2
     2a8:	7812      	ldrb	r2, [r2, #0]
     2aa:	6879      	ldr	r1, [r7, #4]
     2ac:	188a      	adds	r2, r1, r2
     2ae:	7812      	ldrb	r2, [r2, #0]
     2b0:	0011      	movs	r1, r2
     2b2:	4a09      	ldr	r2, [pc, #36]	; (2d8 <byte_substitution+0x50>)
     2b4:	5c52      	ldrb	r2, [r2, r1]
     2b6:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 16; i++)
     2b8:	230f      	movs	r3, #15
     2ba:	18fb      	adds	r3, r7, r3
     2bc:	781a      	ldrb	r2, [r3, #0]
     2be:	230f      	movs	r3, #15
     2c0:	18fb      	adds	r3, r7, r3
     2c2:	3201      	adds	r2, #1
     2c4:	701a      	strb	r2, [r3, #0]
     2c6:	230f      	movs	r3, #15
     2c8:	18fb      	adds	r3, r7, r3
     2ca:	781b      	ldrb	r3, [r3, #0]
     2cc:	2b0f      	cmp	r3, #15
     2ce:	d9e4      	bls.n	29a <byte_substitution+0x12>
	}
}
     2d0:	46c0      	nop			; (mov r8, r8)
     2d2:	46bd      	mov	sp, r7
     2d4:	b004      	add	sp, #16
     2d6:	bd80      	pop	{r7, pc}
     2d8:	20000000 	.word	0x20000000

000002dc <shift_rows>:
 *		1	5	9	13		5	9	13	1
 *		2	6	10	14		10	14	2	6
 *		3	7	11	15		15	3	7	11
 */
void shift_rows(unsigned char* state)
{
     2dc:	b580      	push	{r7, lr}
     2de:	b088      	sub	sp, #32
     2e0:	af00      	add	r7, sp, #0
     2e2:	6078      	str	r0, [r7, #4]
	unsigned char temp[16];
	
	temp[0]	 = state[0];	temp[4]  = state[4];	temp[8]  = state[8];	temp[12] = state[12];
     2e4:	687b      	ldr	r3, [r7, #4]
     2e6:	781a      	ldrb	r2, [r3, #0]
     2e8:	230c      	movs	r3, #12
     2ea:	18fb      	adds	r3, r7, r3
     2ec:	701a      	strb	r2, [r3, #0]
     2ee:	687b      	ldr	r3, [r7, #4]
     2f0:	791a      	ldrb	r2, [r3, #4]
     2f2:	230c      	movs	r3, #12
     2f4:	18fb      	adds	r3, r7, r3
     2f6:	711a      	strb	r2, [r3, #4]
     2f8:	687b      	ldr	r3, [r7, #4]
     2fa:	7a1a      	ldrb	r2, [r3, #8]
     2fc:	230c      	movs	r3, #12
     2fe:	18fb      	adds	r3, r7, r3
     300:	721a      	strb	r2, [r3, #8]
     302:	687b      	ldr	r3, [r7, #4]
     304:	7b1a      	ldrb	r2, [r3, #12]
     306:	230c      	movs	r3, #12
     308:	18fb      	adds	r3, r7, r3
     30a:	731a      	strb	r2, [r3, #12]
	temp[1]  = state[5];	temp[5]  = state[9];	temp[9]  = state[13];	temp[13] = state[1];
     30c:	687b      	ldr	r3, [r7, #4]
     30e:	795a      	ldrb	r2, [r3, #5]
     310:	230c      	movs	r3, #12
     312:	18fb      	adds	r3, r7, r3
     314:	705a      	strb	r2, [r3, #1]
     316:	687b      	ldr	r3, [r7, #4]
     318:	7a5a      	ldrb	r2, [r3, #9]
     31a:	230c      	movs	r3, #12
     31c:	18fb      	adds	r3, r7, r3
     31e:	715a      	strb	r2, [r3, #5]
     320:	687b      	ldr	r3, [r7, #4]
     322:	7b5a      	ldrb	r2, [r3, #13]
     324:	230c      	movs	r3, #12
     326:	18fb      	adds	r3, r7, r3
     328:	725a      	strb	r2, [r3, #9]
     32a:	687b      	ldr	r3, [r7, #4]
     32c:	785a      	ldrb	r2, [r3, #1]
     32e:	230c      	movs	r3, #12
     330:	18fb      	adds	r3, r7, r3
     332:	735a      	strb	r2, [r3, #13]
	temp[2]  = state[10];	temp[6]  = state[14];	temp[10] = state[2];	temp[14] = state[6];
     334:	687b      	ldr	r3, [r7, #4]
     336:	7a9a      	ldrb	r2, [r3, #10]
     338:	230c      	movs	r3, #12
     33a:	18fb      	adds	r3, r7, r3
     33c:	709a      	strb	r2, [r3, #2]
     33e:	687b      	ldr	r3, [r7, #4]
     340:	7b9a      	ldrb	r2, [r3, #14]
     342:	230c      	movs	r3, #12
     344:	18fb      	adds	r3, r7, r3
     346:	719a      	strb	r2, [r3, #6]
     348:	687b      	ldr	r3, [r7, #4]
     34a:	789a      	ldrb	r2, [r3, #2]
     34c:	230c      	movs	r3, #12
     34e:	18fb      	adds	r3, r7, r3
     350:	729a      	strb	r2, [r3, #10]
     352:	687b      	ldr	r3, [r7, #4]
     354:	799a      	ldrb	r2, [r3, #6]
     356:	230c      	movs	r3, #12
     358:	18fb      	adds	r3, r7, r3
     35a:	739a      	strb	r2, [r3, #14]
	temp[3]  = state[15];	temp[7]  = state[3];	temp[11] = state[7];	temp[15] = state[11];
     35c:	687b      	ldr	r3, [r7, #4]
     35e:	7bda      	ldrb	r2, [r3, #15]
     360:	230c      	movs	r3, #12
     362:	18fb      	adds	r3, r7, r3
     364:	70da      	strb	r2, [r3, #3]
     366:	687b      	ldr	r3, [r7, #4]
     368:	78da      	ldrb	r2, [r3, #3]
     36a:	230c      	movs	r3, #12
     36c:	18fb      	adds	r3, r7, r3
     36e:	71da      	strb	r2, [r3, #7]
     370:	687b      	ldr	r3, [r7, #4]
     372:	79da      	ldrb	r2, [r3, #7]
     374:	230c      	movs	r3, #12
     376:	18fb      	adds	r3, r7, r3
     378:	72da      	strb	r2, [r3, #11]
     37a:	687b      	ldr	r3, [r7, #4]
     37c:	7ada      	ldrb	r2, [r3, #11]
     37e:	230c      	movs	r3, #12
     380:	18fb      	adds	r3, r7, r3
     382:	73da      	strb	r2, [r3, #15]

	for (uint8_t i = 0; i < 16; i++)
     384:	231f      	movs	r3, #31
     386:	18fb      	adds	r3, r7, r3
     388:	2200      	movs	r2, #0
     38a:	701a      	strb	r2, [r3, #0]
     38c:	e012      	b.n	3b4 <shift_rows+0xd8>
	{
		state[i] = temp[i];
     38e:	231f      	movs	r3, #31
     390:	18fb      	adds	r3, r7, r3
     392:	781b      	ldrb	r3, [r3, #0]
     394:	687a      	ldr	r2, [r7, #4]
     396:	18d3      	adds	r3, r2, r3
     398:	221f      	movs	r2, #31
     39a:	18ba      	adds	r2, r7, r2
     39c:	7812      	ldrb	r2, [r2, #0]
     39e:	210c      	movs	r1, #12
     3a0:	1879      	adds	r1, r7, r1
     3a2:	5c8a      	ldrb	r2, [r1, r2]
     3a4:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 16; i++)
     3a6:	231f      	movs	r3, #31
     3a8:	18fb      	adds	r3, r7, r3
     3aa:	781a      	ldrb	r2, [r3, #0]
     3ac:	231f      	movs	r3, #31
     3ae:	18fb      	adds	r3, r7, r3
     3b0:	3201      	adds	r2, #1
     3b2:	701a      	strb	r2, [r3, #0]
     3b4:	231f      	movs	r3, #31
     3b6:	18fb      	adds	r3, r7, r3
     3b8:	781b      	ldrb	r3, [r3, #0]
     3ba:	2b0f      	cmp	r3, #15
     3bc:	d9e7      	bls.n	38e <shift_rows+0xb2>
	}		
}
     3be:	46c0      	nop			; (mov r8, r8)
     3c0:	46bd      	mov	sp, r7
     3c2:	b008      	add	sp, #32
     3c4:	bd80      	pop	{r7, pc}
	...

000003c8 <mix_columns>:

void mix_columns(unsigned char* state)
{
     3c8:	b580      	push	{r7, lr}
     3ca:	b088      	sub	sp, #32
     3cc:	af00      	add	r7, sp, #0
     3ce:	6078      	str	r0, [r7, #4]
	unsigned char tmp[16];
	
	tmp[0] = (unsigned char)(mul2[state[0]] ^ mul3[state[1]] ^ state[2] ^ state[3]);
     3d0:	687b      	ldr	r3, [r7, #4]
     3d2:	781b      	ldrb	r3, [r3, #0]
     3d4:	001a      	movs	r2, r3
     3d6:	4be5      	ldr	r3, [pc, #916]	; (76c <mix_columns+0x3a4>)
     3d8:	5c9a      	ldrb	r2, [r3, r2]
     3da:	687b      	ldr	r3, [r7, #4]
     3dc:	3301      	adds	r3, #1
     3de:	781b      	ldrb	r3, [r3, #0]
     3e0:	0019      	movs	r1, r3
     3e2:	4be3      	ldr	r3, [pc, #908]	; (770 <mix_columns+0x3a8>)
     3e4:	5c5b      	ldrb	r3, [r3, r1]
     3e6:	4053      	eors	r3, r2
     3e8:	b2da      	uxtb	r2, r3
     3ea:	687b      	ldr	r3, [r7, #4]
     3ec:	3302      	adds	r3, #2
     3ee:	781b      	ldrb	r3, [r3, #0]
     3f0:	4053      	eors	r3, r2
     3f2:	b2da      	uxtb	r2, r3
     3f4:	687b      	ldr	r3, [r7, #4]
     3f6:	3303      	adds	r3, #3
     3f8:	781b      	ldrb	r3, [r3, #0]
     3fa:	4053      	eors	r3, r2
     3fc:	b2da      	uxtb	r2, r3
     3fe:	230c      	movs	r3, #12
     400:	18fb      	adds	r3, r7, r3
     402:	701a      	strb	r2, [r3, #0]
	tmp[1] = (unsigned char)(state[0] ^ mul2[state[1]] ^ mul3[state[2]] ^ state[3]);
     404:	687b      	ldr	r3, [r7, #4]
     406:	781a      	ldrb	r2, [r3, #0]
     408:	687b      	ldr	r3, [r7, #4]
     40a:	3301      	adds	r3, #1
     40c:	781b      	ldrb	r3, [r3, #0]
     40e:	0019      	movs	r1, r3
     410:	4bd6      	ldr	r3, [pc, #856]	; (76c <mix_columns+0x3a4>)
     412:	5c5b      	ldrb	r3, [r3, r1]
     414:	4053      	eors	r3, r2
     416:	b2da      	uxtb	r2, r3
     418:	687b      	ldr	r3, [r7, #4]
     41a:	3302      	adds	r3, #2
     41c:	781b      	ldrb	r3, [r3, #0]
     41e:	0019      	movs	r1, r3
     420:	4bd3      	ldr	r3, [pc, #844]	; (770 <mix_columns+0x3a8>)
     422:	5c5b      	ldrb	r3, [r3, r1]
     424:	4053      	eors	r3, r2
     426:	b2da      	uxtb	r2, r3
     428:	687b      	ldr	r3, [r7, #4]
     42a:	3303      	adds	r3, #3
     42c:	781b      	ldrb	r3, [r3, #0]
     42e:	4053      	eors	r3, r2
     430:	b2da      	uxtb	r2, r3
     432:	230c      	movs	r3, #12
     434:	18fb      	adds	r3, r7, r3
     436:	705a      	strb	r2, [r3, #1]
	tmp[2] = (unsigned char)(state[0] ^ state[1] ^ mul2[state[2]] ^ mul3[state[3]]);
     438:	687b      	ldr	r3, [r7, #4]
     43a:	781a      	ldrb	r2, [r3, #0]
     43c:	687b      	ldr	r3, [r7, #4]
     43e:	3301      	adds	r3, #1
     440:	781b      	ldrb	r3, [r3, #0]
     442:	4053      	eors	r3, r2
     444:	b2da      	uxtb	r2, r3
     446:	687b      	ldr	r3, [r7, #4]
     448:	3302      	adds	r3, #2
     44a:	781b      	ldrb	r3, [r3, #0]
     44c:	0019      	movs	r1, r3
     44e:	4bc7      	ldr	r3, [pc, #796]	; (76c <mix_columns+0x3a4>)
     450:	5c5b      	ldrb	r3, [r3, r1]
     452:	4053      	eors	r3, r2
     454:	b2da      	uxtb	r2, r3
     456:	687b      	ldr	r3, [r7, #4]
     458:	3303      	adds	r3, #3
     45a:	781b      	ldrb	r3, [r3, #0]
     45c:	0019      	movs	r1, r3
     45e:	4bc4      	ldr	r3, [pc, #784]	; (770 <mix_columns+0x3a8>)
     460:	5c5b      	ldrb	r3, [r3, r1]
     462:	4053      	eors	r3, r2
     464:	b2da      	uxtb	r2, r3
     466:	230c      	movs	r3, #12
     468:	18fb      	adds	r3, r7, r3
     46a:	709a      	strb	r2, [r3, #2]
	tmp[3] = (unsigned char)(mul3[state[0]] ^ state[1] ^ state[2] ^ mul2[state[3]]);
     46c:	687b      	ldr	r3, [r7, #4]
     46e:	781b      	ldrb	r3, [r3, #0]
     470:	001a      	movs	r2, r3
     472:	4bbf      	ldr	r3, [pc, #764]	; (770 <mix_columns+0x3a8>)
     474:	5c9a      	ldrb	r2, [r3, r2]
     476:	687b      	ldr	r3, [r7, #4]
     478:	3301      	adds	r3, #1
     47a:	781b      	ldrb	r3, [r3, #0]
     47c:	4053      	eors	r3, r2
     47e:	b2da      	uxtb	r2, r3
     480:	687b      	ldr	r3, [r7, #4]
     482:	3302      	adds	r3, #2
     484:	781b      	ldrb	r3, [r3, #0]
     486:	4053      	eors	r3, r2
     488:	b2da      	uxtb	r2, r3
     48a:	687b      	ldr	r3, [r7, #4]
     48c:	3303      	adds	r3, #3
     48e:	781b      	ldrb	r3, [r3, #0]
     490:	0019      	movs	r1, r3
     492:	4bb6      	ldr	r3, [pc, #728]	; (76c <mix_columns+0x3a4>)
     494:	5c5b      	ldrb	r3, [r3, r1]
     496:	4053      	eors	r3, r2
     498:	b2da      	uxtb	r2, r3
     49a:	230c      	movs	r3, #12
     49c:	18fb      	adds	r3, r7, r3
     49e:	70da      	strb	r2, [r3, #3]

	tmp[4] = (unsigned char)(mul2[state[4]] ^ mul3[state[5]] ^ state[6] ^ state[7]);
     4a0:	687b      	ldr	r3, [r7, #4]
     4a2:	3304      	adds	r3, #4
     4a4:	781b      	ldrb	r3, [r3, #0]
     4a6:	001a      	movs	r2, r3
     4a8:	4bb0      	ldr	r3, [pc, #704]	; (76c <mix_columns+0x3a4>)
     4aa:	5c9a      	ldrb	r2, [r3, r2]
     4ac:	687b      	ldr	r3, [r7, #4]
     4ae:	3305      	adds	r3, #5
     4b0:	781b      	ldrb	r3, [r3, #0]
     4b2:	0019      	movs	r1, r3
     4b4:	4bae      	ldr	r3, [pc, #696]	; (770 <mix_columns+0x3a8>)
     4b6:	5c5b      	ldrb	r3, [r3, r1]
     4b8:	4053      	eors	r3, r2
     4ba:	b2da      	uxtb	r2, r3
     4bc:	687b      	ldr	r3, [r7, #4]
     4be:	3306      	adds	r3, #6
     4c0:	781b      	ldrb	r3, [r3, #0]
     4c2:	4053      	eors	r3, r2
     4c4:	b2da      	uxtb	r2, r3
     4c6:	687b      	ldr	r3, [r7, #4]
     4c8:	3307      	adds	r3, #7
     4ca:	781b      	ldrb	r3, [r3, #0]
     4cc:	4053      	eors	r3, r2
     4ce:	b2da      	uxtb	r2, r3
     4d0:	230c      	movs	r3, #12
     4d2:	18fb      	adds	r3, r7, r3
     4d4:	711a      	strb	r2, [r3, #4]
	tmp[5] = (unsigned char)(state[4] ^ mul2[state[5]] ^ mul3[state[6]] ^ state[7]);
     4d6:	687b      	ldr	r3, [r7, #4]
     4d8:	3304      	adds	r3, #4
     4da:	781a      	ldrb	r2, [r3, #0]
     4dc:	687b      	ldr	r3, [r7, #4]
     4de:	3305      	adds	r3, #5
     4e0:	781b      	ldrb	r3, [r3, #0]
     4e2:	0019      	movs	r1, r3
     4e4:	4ba1      	ldr	r3, [pc, #644]	; (76c <mix_columns+0x3a4>)
     4e6:	5c5b      	ldrb	r3, [r3, r1]
     4e8:	4053      	eors	r3, r2
     4ea:	b2da      	uxtb	r2, r3
     4ec:	687b      	ldr	r3, [r7, #4]
     4ee:	3306      	adds	r3, #6
     4f0:	781b      	ldrb	r3, [r3, #0]
     4f2:	0019      	movs	r1, r3
     4f4:	4b9e      	ldr	r3, [pc, #632]	; (770 <mix_columns+0x3a8>)
     4f6:	5c5b      	ldrb	r3, [r3, r1]
     4f8:	4053      	eors	r3, r2
     4fa:	b2da      	uxtb	r2, r3
     4fc:	687b      	ldr	r3, [r7, #4]
     4fe:	3307      	adds	r3, #7
     500:	781b      	ldrb	r3, [r3, #0]
     502:	4053      	eors	r3, r2
     504:	b2da      	uxtb	r2, r3
     506:	230c      	movs	r3, #12
     508:	18fb      	adds	r3, r7, r3
     50a:	715a      	strb	r2, [r3, #5]
	tmp[6] = (unsigned char)(state[4] ^ state[5] ^ mul2[state[6]] ^ mul3[state[7]]);
     50c:	687b      	ldr	r3, [r7, #4]
     50e:	3304      	adds	r3, #4
     510:	781a      	ldrb	r2, [r3, #0]
     512:	687b      	ldr	r3, [r7, #4]
     514:	3305      	adds	r3, #5
     516:	781b      	ldrb	r3, [r3, #0]
     518:	4053      	eors	r3, r2
     51a:	b2da      	uxtb	r2, r3
     51c:	687b      	ldr	r3, [r7, #4]
     51e:	3306      	adds	r3, #6
     520:	781b      	ldrb	r3, [r3, #0]
     522:	0019      	movs	r1, r3
     524:	4b91      	ldr	r3, [pc, #580]	; (76c <mix_columns+0x3a4>)
     526:	5c5b      	ldrb	r3, [r3, r1]
     528:	4053      	eors	r3, r2
     52a:	b2da      	uxtb	r2, r3
     52c:	687b      	ldr	r3, [r7, #4]
     52e:	3307      	adds	r3, #7
     530:	781b      	ldrb	r3, [r3, #0]
     532:	0019      	movs	r1, r3
     534:	4b8e      	ldr	r3, [pc, #568]	; (770 <mix_columns+0x3a8>)
     536:	5c5b      	ldrb	r3, [r3, r1]
     538:	4053      	eors	r3, r2
     53a:	b2da      	uxtb	r2, r3
     53c:	230c      	movs	r3, #12
     53e:	18fb      	adds	r3, r7, r3
     540:	719a      	strb	r2, [r3, #6]
	tmp[7] = (unsigned char)(mul3[state[4]] ^ state[5] ^ state[6] ^ mul2[state[7]]);
     542:	687b      	ldr	r3, [r7, #4]
     544:	3304      	adds	r3, #4
     546:	781b      	ldrb	r3, [r3, #0]
     548:	001a      	movs	r2, r3
     54a:	4b89      	ldr	r3, [pc, #548]	; (770 <mix_columns+0x3a8>)
     54c:	5c9a      	ldrb	r2, [r3, r2]
     54e:	687b      	ldr	r3, [r7, #4]
     550:	3305      	adds	r3, #5
     552:	781b      	ldrb	r3, [r3, #0]
     554:	4053      	eors	r3, r2
     556:	b2da      	uxtb	r2, r3
     558:	687b      	ldr	r3, [r7, #4]
     55a:	3306      	adds	r3, #6
     55c:	781b      	ldrb	r3, [r3, #0]
     55e:	4053      	eors	r3, r2
     560:	b2da      	uxtb	r2, r3
     562:	687b      	ldr	r3, [r7, #4]
     564:	3307      	adds	r3, #7
     566:	781b      	ldrb	r3, [r3, #0]
     568:	0019      	movs	r1, r3
     56a:	4b80      	ldr	r3, [pc, #512]	; (76c <mix_columns+0x3a4>)
     56c:	5c5b      	ldrb	r3, [r3, r1]
     56e:	4053      	eors	r3, r2
     570:	b2da      	uxtb	r2, r3
     572:	230c      	movs	r3, #12
     574:	18fb      	adds	r3, r7, r3
     576:	71da      	strb	r2, [r3, #7]

	tmp[8] = (unsigned char)(mul2[state[8]] ^ mul3[state[9]] ^ state[10] ^ state[11]);
     578:	687b      	ldr	r3, [r7, #4]
     57a:	3308      	adds	r3, #8
     57c:	781b      	ldrb	r3, [r3, #0]
     57e:	001a      	movs	r2, r3
     580:	4b7a      	ldr	r3, [pc, #488]	; (76c <mix_columns+0x3a4>)
     582:	5c9a      	ldrb	r2, [r3, r2]
     584:	687b      	ldr	r3, [r7, #4]
     586:	3309      	adds	r3, #9
     588:	781b      	ldrb	r3, [r3, #0]
     58a:	0019      	movs	r1, r3
     58c:	4b78      	ldr	r3, [pc, #480]	; (770 <mix_columns+0x3a8>)
     58e:	5c5b      	ldrb	r3, [r3, r1]
     590:	4053      	eors	r3, r2
     592:	b2da      	uxtb	r2, r3
     594:	687b      	ldr	r3, [r7, #4]
     596:	330a      	adds	r3, #10
     598:	781b      	ldrb	r3, [r3, #0]
     59a:	4053      	eors	r3, r2
     59c:	b2da      	uxtb	r2, r3
     59e:	687b      	ldr	r3, [r7, #4]
     5a0:	330b      	adds	r3, #11
     5a2:	781b      	ldrb	r3, [r3, #0]
     5a4:	4053      	eors	r3, r2
     5a6:	b2da      	uxtb	r2, r3
     5a8:	230c      	movs	r3, #12
     5aa:	18fb      	adds	r3, r7, r3
     5ac:	721a      	strb	r2, [r3, #8]
	tmp[9] = (unsigned char)(state[8] ^ mul2[state[9]] ^ mul3[state[10]] ^ state[11]);
     5ae:	687b      	ldr	r3, [r7, #4]
     5b0:	3308      	adds	r3, #8
     5b2:	781a      	ldrb	r2, [r3, #0]
     5b4:	687b      	ldr	r3, [r7, #4]
     5b6:	3309      	adds	r3, #9
     5b8:	781b      	ldrb	r3, [r3, #0]
     5ba:	0019      	movs	r1, r3
     5bc:	4b6b      	ldr	r3, [pc, #428]	; (76c <mix_columns+0x3a4>)
     5be:	5c5b      	ldrb	r3, [r3, r1]
     5c0:	4053      	eors	r3, r2
     5c2:	b2da      	uxtb	r2, r3
     5c4:	687b      	ldr	r3, [r7, #4]
     5c6:	330a      	adds	r3, #10
     5c8:	781b      	ldrb	r3, [r3, #0]
     5ca:	0019      	movs	r1, r3
     5cc:	4b68      	ldr	r3, [pc, #416]	; (770 <mix_columns+0x3a8>)
     5ce:	5c5b      	ldrb	r3, [r3, r1]
     5d0:	4053      	eors	r3, r2
     5d2:	b2da      	uxtb	r2, r3
     5d4:	687b      	ldr	r3, [r7, #4]
     5d6:	330b      	adds	r3, #11
     5d8:	781b      	ldrb	r3, [r3, #0]
     5da:	4053      	eors	r3, r2
     5dc:	b2da      	uxtb	r2, r3
     5de:	230c      	movs	r3, #12
     5e0:	18fb      	adds	r3, r7, r3
     5e2:	725a      	strb	r2, [r3, #9]
	tmp[10] = (unsigned char)(state[8] ^ state[9] ^ mul2[state[10]] ^ mul3[state[11]]);
     5e4:	687b      	ldr	r3, [r7, #4]
     5e6:	3308      	adds	r3, #8
     5e8:	781a      	ldrb	r2, [r3, #0]
     5ea:	687b      	ldr	r3, [r7, #4]
     5ec:	3309      	adds	r3, #9
     5ee:	781b      	ldrb	r3, [r3, #0]
     5f0:	4053      	eors	r3, r2
     5f2:	b2da      	uxtb	r2, r3
     5f4:	687b      	ldr	r3, [r7, #4]
     5f6:	330a      	adds	r3, #10
     5f8:	781b      	ldrb	r3, [r3, #0]
     5fa:	0019      	movs	r1, r3
     5fc:	4b5b      	ldr	r3, [pc, #364]	; (76c <mix_columns+0x3a4>)
     5fe:	5c5b      	ldrb	r3, [r3, r1]
     600:	4053      	eors	r3, r2
     602:	b2da      	uxtb	r2, r3
     604:	687b      	ldr	r3, [r7, #4]
     606:	330b      	adds	r3, #11
     608:	781b      	ldrb	r3, [r3, #0]
     60a:	0019      	movs	r1, r3
     60c:	4b58      	ldr	r3, [pc, #352]	; (770 <mix_columns+0x3a8>)
     60e:	5c5b      	ldrb	r3, [r3, r1]
     610:	4053      	eors	r3, r2
     612:	b2da      	uxtb	r2, r3
     614:	230c      	movs	r3, #12
     616:	18fb      	adds	r3, r7, r3
     618:	729a      	strb	r2, [r3, #10]
	tmp[11] = (unsigned char)(mul3[state[8]] ^ state[9] ^ state[10] ^ mul2[state[11]]);
     61a:	687b      	ldr	r3, [r7, #4]
     61c:	3308      	adds	r3, #8
     61e:	781b      	ldrb	r3, [r3, #0]
     620:	001a      	movs	r2, r3
     622:	4b53      	ldr	r3, [pc, #332]	; (770 <mix_columns+0x3a8>)
     624:	5c9a      	ldrb	r2, [r3, r2]
     626:	687b      	ldr	r3, [r7, #4]
     628:	3309      	adds	r3, #9
     62a:	781b      	ldrb	r3, [r3, #0]
     62c:	4053      	eors	r3, r2
     62e:	b2da      	uxtb	r2, r3
     630:	687b      	ldr	r3, [r7, #4]
     632:	330a      	adds	r3, #10
     634:	781b      	ldrb	r3, [r3, #0]
     636:	4053      	eors	r3, r2
     638:	b2da      	uxtb	r2, r3
     63a:	687b      	ldr	r3, [r7, #4]
     63c:	330b      	adds	r3, #11
     63e:	781b      	ldrb	r3, [r3, #0]
     640:	0019      	movs	r1, r3
     642:	4b4a      	ldr	r3, [pc, #296]	; (76c <mix_columns+0x3a4>)
     644:	5c5b      	ldrb	r3, [r3, r1]
     646:	4053      	eors	r3, r2
     648:	b2da      	uxtb	r2, r3
     64a:	230c      	movs	r3, #12
     64c:	18fb      	adds	r3, r7, r3
     64e:	72da      	strb	r2, [r3, #11]

	tmp[12] = (unsigned char)(mul2[state[12]] ^ mul3[state[13]] ^ state[14] ^ state[15]);
     650:	687b      	ldr	r3, [r7, #4]
     652:	330c      	adds	r3, #12
     654:	781b      	ldrb	r3, [r3, #0]
     656:	001a      	movs	r2, r3
     658:	4b44      	ldr	r3, [pc, #272]	; (76c <mix_columns+0x3a4>)
     65a:	5c9a      	ldrb	r2, [r3, r2]
     65c:	687b      	ldr	r3, [r7, #4]
     65e:	330d      	adds	r3, #13
     660:	781b      	ldrb	r3, [r3, #0]
     662:	0019      	movs	r1, r3
     664:	4b42      	ldr	r3, [pc, #264]	; (770 <mix_columns+0x3a8>)
     666:	5c5b      	ldrb	r3, [r3, r1]
     668:	4053      	eors	r3, r2
     66a:	b2da      	uxtb	r2, r3
     66c:	687b      	ldr	r3, [r7, #4]
     66e:	330e      	adds	r3, #14
     670:	781b      	ldrb	r3, [r3, #0]
     672:	4053      	eors	r3, r2
     674:	b2da      	uxtb	r2, r3
     676:	687b      	ldr	r3, [r7, #4]
     678:	330f      	adds	r3, #15
     67a:	781b      	ldrb	r3, [r3, #0]
     67c:	4053      	eors	r3, r2
     67e:	b2da      	uxtb	r2, r3
     680:	230c      	movs	r3, #12
     682:	18fb      	adds	r3, r7, r3
     684:	731a      	strb	r2, [r3, #12]
	tmp[13] = (unsigned char)(state[12] ^ mul2[state[13]] ^ mul3[state[14]] ^ state[15]);
     686:	687b      	ldr	r3, [r7, #4]
     688:	330c      	adds	r3, #12
     68a:	781a      	ldrb	r2, [r3, #0]
     68c:	687b      	ldr	r3, [r7, #4]
     68e:	330d      	adds	r3, #13
     690:	781b      	ldrb	r3, [r3, #0]
     692:	0019      	movs	r1, r3
     694:	4b35      	ldr	r3, [pc, #212]	; (76c <mix_columns+0x3a4>)
     696:	5c5b      	ldrb	r3, [r3, r1]
     698:	4053      	eors	r3, r2
     69a:	b2da      	uxtb	r2, r3
     69c:	687b      	ldr	r3, [r7, #4]
     69e:	330e      	adds	r3, #14
     6a0:	781b      	ldrb	r3, [r3, #0]
     6a2:	0019      	movs	r1, r3
     6a4:	4b32      	ldr	r3, [pc, #200]	; (770 <mix_columns+0x3a8>)
     6a6:	5c5b      	ldrb	r3, [r3, r1]
     6a8:	4053      	eors	r3, r2
     6aa:	b2da      	uxtb	r2, r3
     6ac:	687b      	ldr	r3, [r7, #4]
     6ae:	330f      	adds	r3, #15
     6b0:	781b      	ldrb	r3, [r3, #0]
     6b2:	4053      	eors	r3, r2
     6b4:	b2da      	uxtb	r2, r3
     6b6:	230c      	movs	r3, #12
     6b8:	18fb      	adds	r3, r7, r3
     6ba:	735a      	strb	r2, [r3, #13]
	tmp[14] = (unsigned char)(state[12] ^ state[13] ^ mul2[state[14]] ^ mul3[state[15]]);
     6bc:	687b      	ldr	r3, [r7, #4]
     6be:	330c      	adds	r3, #12
     6c0:	781a      	ldrb	r2, [r3, #0]
     6c2:	687b      	ldr	r3, [r7, #4]
     6c4:	330d      	adds	r3, #13
     6c6:	781b      	ldrb	r3, [r3, #0]
     6c8:	4053      	eors	r3, r2
     6ca:	b2da      	uxtb	r2, r3
     6cc:	687b      	ldr	r3, [r7, #4]
     6ce:	330e      	adds	r3, #14
     6d0:	781b      	ldrb	r3, [r3, #0]
     6d2:	0019      	movs	r1, r3
     6d4:	4b25      	ldr	r3, [pc, #148]	; (76c <mix_columns+0x3a4>)
     6d6:	5c5b      	ldrb	r3, [r3, r1]
     6d8:	4053      	eors	r3, r2
     6da:	b2da      	uxtb	r2, r3
     6dc:	687b      	ldr	r3, [r7, #4]
     6de:	330f      	adds	r3, #15
     6e0:	781b      	ldrb	r3, [r3, #0]
     6e2:	0019      	movs	r1, r3
     6e4:	4b22      	ldr	r3, [pc, #136]	; (770 <mix_columns+0x3a8>)
     6e6:	5c5b      	ldrb	r3, [r3, r1]
     6e8:	4053      	eors	r3, r2
     6ea:	b2da      	uxtb	r2, r3
     6ec:	230c      	movs	r3, #12
     6ee:	18fb      	adds	r3, r7, r3
     6f0:	739a      	strb	r2, [r3, #14]
	tmp[15] = (unsigned char)(mul3[state[12]] ^ state[13] ^ state[14] ^ mul2[state[15]]);	
     6f2:	687b      	ldr	r3, [r7, #4]
     6f4:	330c      	adds	r3, #12
     6f6:	781b      	ldrb	r3, [r3, #0]
     6f8:	001a      	movs	r2, r3
     6fa:	4b1d      	ldr	r3, [pc, #116]	; (770 <mix_columns+0x3a8>)
     6fc:	5c9a      	ldrb	r2, [r3, r2]
     6fe:	687b      	ldr	r3, [r7, #4]
     700:	330d      	adds	r3, #13
     702:	781b      	ldrb	r3, [r3, #0]
     704:	4053      	eors	r3, r2
     706:	b2da      	uxtb	r2, r3
     708:	687b      	ldr	r3, [r7, #4]
     70a:	330e      	adds	r3, #14
     70c:	781b      	ldrb	r3, [r3, #0]
     70e:	4053      	eors	r3, r2
     710:	b2da      	uxtb	r2, r3
     712:	687b      	ldr	r3, [r7, #4]
     714:	330f      	adds	r3, #15
     716:	781b      	ldrb	r3, [r3, #0]
     718:	0019      	movs	r1, r3
     71a:	4b14      	ldr	r3, [pc, #80]	; (76c <mix_columns+0x3a4>)
     71c:	5c5b      	ldrb	r3, [r3, r1]
     71e:	4053      	eors	r3, r2
     720:	b2da      	uxtb	r2, r3
     722:	230c      	movs	r3, #12
     724:	18fb      	adds	r3, r7, r3
     726:	73da      	strb	r2, [r3, #15]
	
	for (uint8_t i = 0; i < 16; i++)
     728:	231f      	movs	r3, #31
     72a:	18fb      	adds	r3, r7, r3
     72c:	2200      	movs	r2, #0
     72e:	701a      	strb	r2, [r3, #0]
     730:	e012      	b.n	758 <mix_columns+0x390>
	{
		state[i] = tmp[i];
     732:	231f      	movs	r3, #31
     734:	18fb      	adds	r3, r7, r3
     736:	781b      	ldrb	r3, [r3, #0]
     738:	687a      	ldr	r2, [r7, #4]
     73a:	18d3      	adds	r3, r2, r3
     73c:	221f      	movs	r2, #31
     73e:	18ba      	adds	r2, r7, r2
     740:	7812      	ldrb	r2, [r2, #0]
     742:	210c      	movs	r1, #12
     744:	1879      	adds	r1, r7, r1
     746:	5c8a      	ldrb	r2, [r1, r2]
     748:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 16; i++)
     74a:	231f      	movs	r3, #31
     74c:	18fb      	adds	r3, r7, r3
     74e:	781a      	ldrb	r2, [r3, #0]
     750:	231f      	movs	r3, #31
     752:	18fb      	adds	r3, r7, r3
     754:	3201      	adds	r2, #1
     756:	701a      	strb	r2, [r3, #0]
     758:	231f      	movs	r3, #31
     75a:	18fb      	adds	r3, r7, r3
     75c:	781b      	ldrb	r3, [r3, #0]
     75e:	2b0f      	cmp	r3, #15
     760:	d9e7      	bls.n	732 <mix_columns+0x36a>
	}
}
     762:	46c0      	nop			; (mov r8, r8)
     764:	46bd      	mov	sp, r7
     766:	b008      	add	sp, #32
     768:	bd80      	pop	{r7, pc}
     76a:	46c0      	nop			; (mov r8, r8)
     76c:	20000100 	.word	0x20000100
     770:	20000200 	.word	0x20000200

00000774 <add_roundkey>:

void add_roundkey(unsigned char* state, unsigned char* roundkey)
{
     774:	b580      	push	{r7, lr}
     776:	b084      	sub	sp, #16
     778:	af00      	add	r7, sp, #0
     77a:	6078      	str	r0, [r7, #4]
     77c:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < 16; i++)
     77e:	230f      	movs	r3, #15
     780:	18fb      	adds	r3, r7, r3
     782:	2200      	movs	r2, #0
     784:	701a      	strb	r2, [r3, #0]
     786:	e01a      	b.n	7be <add_roundkey+0x4a>
	{
		state[i] ^= roundkey[i];
     788:	230f      	movs	r3, #15
     78a:	18fb      	adds	r3, r7, r3
     78c:	781b      	ldrb	r3, [r3, #0]
     78e:	687a      	ldr	r2, [r7, #4]
     790:	18d3      	adds	r3, r2, r3
     792:	220f      	movs	r2, #15
     794:	18ba      	adds	r2, r7, r2
     796:	7812      	ldrb	r2, [r2, #0]
     798:	6879      	ldr	r1, [r7, #4]
     79a:	188a      	adds	r2, r1, r2
     79c:	7811      	ldrb	r1, [r2, #0]
     79e:	220f      	movs	r2, #15
     7a0:	18ba      	adds	r2, r7, r2
     7a2:	7812      	ldrb	r2, [r2, #0]
     7a4:	6838      	ldr	r0, [r7, #0]
     7a6:	1882      	adds	r2, r0, r2
     7a8:	7812      	ldrb	r2, [r2, #0]
     7aa:	404a      	eors	r2, r1
     7ac:	b2d2      	uxtb	r2, r2
     7ae:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 16; i++)
     7b0:	230f      	movs	r3, #15
     7b2:	18fb      	adds	r3, r7, r3
     7b4:	781a      	ldrb	r2, [r3, #0]
     7b6:	230f      	movs	r3, #15
     7b8:	18fb      	adds	r3, r7, r3
     7ba:	3201      	adds	r2, #1
     7bc:	701a      	strb	r2, [r3, #0]
     7be:	230f      	movs	r3, #15
     7c0:	18fb      	adds	r3, r7, r3
     7c2:	781b      	ldrb	r3, [r3, #0]
     7c4:	2b0f      	cmp	r3, #15
     7c6:	d9df      	bls.n	788 <add_roundkey+0x14>
	}	
}
     7c8:	46c0      	nop			; (mov r8, r8)
     7ca:	46bd      	mov	sp, r7
     7cc:	b004      	add	sp, #16
     7ce:	bd80      	pop	{r7, pc}

000007d0 <aes_encrypt>:

void aes_encrypt(unsigned char* message, unsigned char* key)
{
     7d0:	b580      	push	{r7, lr}
     7d2:	b0b6      	sub	sp, #216	; 0xd8
     7d4:	af00      	add	r7, sp, #0
     7d6:	6078      	str	r0, [r7, #4]
     7d8:	6039      	str	r1, [r7, #0]
	unsigned char state[16];
	
	for (int i = 0; i < 16; i++)
     7da:	2300      	movs	r3, #0
     7dc:	22d4      	movs	r2, #212	; 0xd4
     7de:	18ba      	adds	r2, r7, r2
     7e0:	6013      	str	r3, [r2, #0]
     7e2:	e014      	b.n	80e <aes_encrypt+0x3e>
	{
		state[i] = message[i];
     7e4:	23d4      	movs	r3, #212	; 0xd4
     7e6:	18fb      	adds	r3, r7, r3
     7e8:	681b      	ldr	r3, [r3, #0]
     7ea:	687a      	ldr	r2, [r7, #4]
     7ec:	18d3      	adds	r3, r2, r3
     7ee:	7819      	ldrb	r1, [r3, #0]
     7f0:	23b8      	movs	r3, #184	; 0xb8
     7f2:	18fa      	adds	r2, r7, r3
     7f4:	23d4      	movs	r3, #212	; 0xd4
     7f6:	18fb      	adds	r3, r7, r3
     7f8:	681b      	ldr	r3, [r3, #0]
     7fa:	18d3      	adds	r3, r2, r3
     7fc:	1c0a      	adds	r2, r1, #0
     7fe:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 16; i++)
     800:	23d4      	movs	r3, #212	; 0xd4
     802:	18fb      	adds	r3, r7, r3
     804:	681b      	ldr	r3, [r3, #0]
     806:	3301      	adds	r3, #1
     808:	22d4      	movs	r2, #212	; 0xd4
     80a:	18ba      	adds	r2, r7, r2
     80c:	6013      	str	r3, [r2, #0]
     80e:	23d4      	movs	r3, #212	; 0xd4
     810:	18fb      	adds	r3, r7, r3
     812:	681b      	ldr	r3, [r3, #0]
     814:	2b0f      	cmp	r3, #15
     816:	dde5      	ble.n	7e4 <aes_encrypt+0x14>
	}
	
	int number_of_rounds = 9;
     818:	2309      	movs	r3, #9
     81a:	22c8      	movs	r2, #200	; 0xc8
     81c:	18ba      	adds	r2, r7, r2
     81e:	6013      	str	r3, [r2, #0]
	
	unsigned char expanded_keys[176];
	
	key_expansion(key, expanded_keys);
     820:	2308      	movs	r3, #8
     822:	18fa      	adds	r2, r7, r3
     824:	683b      	ldr	r3, [r7, #0]
     826:	0011      	movs	r1, r2
     828:	0018      	movs	r0, r3
     82a:	4b38      	ldr	r3, [pc, #224]	; (90c <aes_encrypt+0x13c>)
     82c:	4798      	blx	r3
	
	add_roundkey(state,key);
     82e:	683a      	ldr	r2, [r7, #0]
     830:	23b8      	movs	r3, #184	; 0xb8
     832:	18fb      	adds	r3, r7, r3
     834:	0011      	movs	r1, r2
     836:	0018      	movs	r0, r3
     838:	4b35      	ldr	r3, [pc, #212]	; (910 <aes_encrypt+0x140>)
     83a:	4798      	blx	r3
	
	for (int i = 0; i < number_of_rounds; i++)
     83c:	2300      	movs	r3, #0
     83e:	22d0      	movs	r2, #208	; 0xd0
     840:	18ba      	adds	r2, r7, r2
     842:	6013      	str	r3, [r2, #0]
     844:	e024      	b.n	890 <aes_encrypt+0xc0>
	{
		byte_substitution(state);
     846:	23b8      	movs	r3, #184	; 0xb8
     848:	18fb      	adds	r3, r7, r3
     84a:	0018      	movs	r0, r3
     84c:	4b31      	ldr	r3, [pc, #196]	; (914 <aes_encrypt+0x144>)
     84e:	4798      	blx	r3
		shift_rows(state);
     850:	23b8      	movs	r3, #184	; 0xb8
     852:	18fb      	adds	r3, r7, r3
     854:	0018      	movs	r0, r3
     856:	4b30      	ldr	r3, [pc, #192]	; (918 <aes_encrypt+0x148>)
     858:	4798      	blx	r3
		mix_columns(state);
     85a:	23b8      	movs	r3, #184	; 0xb8
     85c:	18fb      	adds	r3, r7, r3
     85e:	0018      	movs	r0, r3
     860:	4b2e      	ldr	r3, [pc, #184]	; (91c <aes_encrypt+0x14c>)
     862:	4798      	blx	r3
		add_roundkey(state, expanded_keys + (16* (i+1)));
     864:	23d0      	movs	r3, #208	; 0xd0
     866:	18fb      	adds	r3, r7, r3
     868:	681b      	ldr	r3, [r3, #0]
     86a:	3301      	adds	r3, #1
     86c:	011b      	lsls	r3, r3, #4
     86e:	001a      	movs	r2, r3
     870:	2308      	movs	r3, #8
     872:	18fb      	adds	r3, r7, r3
     874:	189a      	adds	r2, r3, r2
     876:	23b8      	movs	r3, #184	; 0xb8
     878:	18fb      	adds	r3, r7, r3
     87a:	0011      	movs	r1, r2
     87c:	0018      	movs	r0, r3
     87e:	4b24      	ldr	r3, [pc, #144]	; (910 <aes_encrypt+0x140>)
     880:	4798      	blx	r3
	for (int i = 0; i < number_of_rounds; i++)
     882:	23d0      	movs	r3, #208	; 0xd0
     884:	18fb      	adds	r3, r7, r3
     886:	681b      	ldr	r3, [r3, #0]
     888:	3301      	adds	r3, #1
     88a:	22d0      	movs	r2, #208	; 0xd0
     88c:	18ba      	adds	r2, r7, r2
     88e:	6013      	str	r3, [r2, #0]
     890:	23d0      	movs	r3, #208	; 0xd0
     892:	18fb      	adds	r3, r7, r3
     894:	681a      	ldr	r2, [r3, #0]
     896:	23c8      	movs	r3, #200	; 0xc8
     898:	18fb      	adds	r3, r7, r3
     89a:	681b      	ldr	r3, [r3, #0]
     89c:	429a      	cmp	r2, r3
     89e:	dbd2      	blt.n	846 <aes_encrypt+0x76>
	}
	
	byte_substitution(state);
     8a0:	23b8      	movs	r3, #184	; 0xb8
     8a2:	18fb      	adds	r3, r7, r3
     8a4:	0018      	movs	r0, r3
     8a6:	4b1b      	ldr	r3, [pc, #108]	; (914 <aes_encrypt+0x144>)
     8a8:	4798      	blx	r3
	shift_rows(state);
     8aa:	23b8      	movs	r3, #184	; 0xb8
     8ac:	18fb      	adds	r3, r7, r3
     8ae:	0018      	movs	r0, r3
     8b0:	4b19      	ldr	r3, [pc, #100]	; (918 <aes_encrypt+0x148>)
     8b2:	4798      	blx	r3
	add_roundkey(state, expanded_keys+160);
     8b4:	2308      	movs	r3, #8
     8b6:	18fb      	adds	r3, r7, r3
     8b8:	33a0      	adds	r3, #160	; 0xa0
     8ba:	22b8      	movs	r2, #184	; 0xb8
     8bc:	18ba      	adds	r2, r7, r2
     8be:	0019      	movs	r1, r3
     8c0:	0010      	movs	r0, r2
     8c2:	4b13      	ldr	r3, [pc, #76]	; (910 <aes_encrypt+0x140>)
     8c4:	4798      	blx	r3
	
	for (int i = 0; i < 16; i++)
     8c6:	2300      	movs	r3, #0
     8c8:	22cc      	movs	r2, #204	; 0xcc
     8ca:	18ba      	adds	r2, r7, r2
     8cc:	6013      	str	r3, [r2, #0]
     8ce:	e013      	b.n	8f8 <aes_encrypt+0x128>
	{
		message[i] = state[i];
     8d0:	23cc      	movs	r3, #204	; 0xcc
     8d2:	18fb      	adds	r3, r7, r3
     8d4:	681b      	ldr	r3, [r3, #0]
     8d6:	687a      	ldr	r2, [r7, #4]
     8d8:	18d3      	adds	r3, r2, r3
     8da:	22b8      	movs	r2, #184	; 0xb8
     8dc:	18b9      	adds	r1, r7, r2
     8de:	22cc      	movs	r2, #204	; 0xcc
     8e0:	18ba      	adds	r2, r7, r2
     8e2:	6812      	ldr	r2, [r2, #0]
     8e4:	188a      	adds	r2, r1, r2
     8e6:	7812      	ldrb	r2, [r2, #0]
     8e8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 16; i++)
     8ea:	23cc      	movs	r3, #204	; 0xcc
     8ec:	18fb      	adds	r3, r7, r3
     8ee:	681b      	ldr	r3, [r3, #0]
     8f0:	3301      	adds	r3, #1
     8f2:	22cc      	movs	r2, #204	; 0xcc
     8f4:	18ba      	adds	r2, r7, r2
     8f6:	6013      	str	r3, [r2, #0]
     8f8:	23cc      	movs	r3, #204	; 0xcc
     8fa:	18fb      	adds	r3, r7, r3
     8fc:	681b      	ldr	r3, [r3, #0]
     8fe:	2b0f      	cmp	r3, #15
     900:	dde6      	ble.n	8d0 <aes_encrypt+0x100>
	}	
     902:	46c0      	nop			; (mov r8, r8)
     904:	46bd      	mov	sp, r7
     906:	b036      	add	sp, #216	; 0xd8
     908:	bd80      	pop	{r7, pc}
     90a:	46c0      	nop			; (mov r8, r8)
     90c:	000001bd 	.word	0x000001bd
     910:	00000775 	.word	0x00000775
     914:	00000289 	.word	0x00000289
     918:	000002dd 	.word	0x000002dd
     91c:	000003c9 	.word	0x000003c9

00000920 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
     920:	b580      	push	{r7, lr}
     922:	b082      	sub	sp, #8
     924:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
     926:	4b10      	ldr	r3, [pc, #64]	; (968 <cpu_irq_enter_critical+0x48>)
     928:	681b      	ldr	r3, [r3, #0]
     92a:	2b00      	cmp	r3, #0
     92c:	d112      	bne.n	954 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     92e:	f3ef 8310 	mrs	r3, PRIMASK
     932:	607b      	str	r3, [r7, #4]
  return(result);
     934:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
     936:	2b00      	cmp	r3, #0
     938:	d109      	bne.n	94e <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
     93a:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     93c:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     940:	4b0a      	ldr	r3, [pc, #40]	; (96c <cpu_irq_enter_critical+0x4c>)
     942:	2200      	movs	r2, #0
     944:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     946:	4b0a      	ldr	r3, [pc, #40]	; (970 <cpu_irq_enter_critical+0x50>)
     948:	2201      	movs	r2, #1
     94a:	701a      	strb	r2, [r3, #0]
     94c:	e002      	b.n	954 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     94e:	4b08      	ldr	r3, [pc, #32]	; (970 <cpu_irq_enter_critical+0x50>)
     950:	2200      	movs	r2, #0
     952:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     954:	4b04      	ldr	r3, [pc, #16]	; (968 <cpu_irq_enter_critical+0x48>)
     956:	681b      	ldr	r3, [r3, #0]
     958:	1c5a      	adds	r2, r3, #1
     95a:	4b03      	ldr	r3, [pc, #12]	; (968 <cpu_irq_enter_critical+0x48>)
     95c:	601a      	str	r2, [r3, #0]
}
     95e:	46c0      	nop			; (mov r8, r8)
     960:	46bd      	mov	sp, r7
     962:	b002      	add	sp, #8
     964:	bd80      	pop	{r7, pc}
     966:	46c0      	nop			; (mov r8, r8)
     968:	20000484 	.word	0x20000484
     96c:	20000400 	.word	0x20000400
     970:	20000488 	.word	0x20000488

00000974 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
     974:	b580      	push	{r7, lr}
     976:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     978:	4b0b      	ldr	r3, [pc, #44]	; (9a8 <cpu_irq_leave_critical+0x34>)
     97a:	681b      	ldr	r3, [r3, #0]
     97c:	1e5a      	subs	r2, r3, #1
     97e:	4b0a      	ldr	r3, [pc, #40]	; (9a8 <cpu_irq_leave_critical+0x34>)
     980:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     982:	4b09      	ldr	r3, [pc, #36]	; (9a8 <cpu_irq_leave_critical+0x34>)
     984:	681b      	ldr	r3, [r3, #0]
     986:	2b00      	cmp	r3, #0
     988:	d10a      	bne.n	9a0 <cpu_irq_leave_critical+0x2c>
     98a:	4b08      	ldr	r3, [pc, #32]	; (9ac <cpu_irq_leave_critical+0x38>)
     98c:	781b      	ldrb	r3, [r3, #0]
     98e:	b2db      	uxtb	r3, r3
     990:	2b00      	cmp	r3, #0
     992:	d005      	beq.n	9a0 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
     994:	4b06      	ldr	r3, [pc, #24]	; (9b0 <cpu_irq_leave_critical+0x3c>)
     996:	2201      	movs	r2, #1
     998:	701a      	strb	r2, [r3, #0]
     99a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     99e:	b662      	cpsie	i
	}
}
     9a0:	46c0      	nop			; (mov r8, r8)
     9a2:	46bd      	mov	sp, r7
     9a4:	bd80      	pop	{r7, pc}
     9a6:	46c0      	nop			; (mov r8, r8)
     9a8:	20000484 	.word	0x20000484
     9ac:	20000488 	.word	0x20000488
     9b0:	20000400 	.word	0x20000400

000009b4 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     9b4:	b580      	push	{r7, lr}
     9b6:	b084      	sub	sp, #16
     9b8:	af00      	add	r7, sp, #0
     9ba:	0002      	movs	r2, r0
     9bc:	1dfb      	adds	r3, r7, #7
     9be:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     9c0:	230f      	movs	r3, #15
     9c2:	18fb      	adds	r3, r7, r3
     9c4:	1dfa      	adds	r2, r7, #7
     9c6:	7812      	ldrb	r2, [r2, #0]
     9c8:	09d2      	lsrs	r2, r2, #7
     9ca:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     9cc:	230e      	movs	r3, #14
     9ce:	18fb      	adds	r3, r7, r3
     9d0:	1dfa      	adds	r2, r7, #7
     9d2:	7812      	ldrb	r2, [r2, #0]
     9d4:	0952      	lsrs	r2, r2, #5
     9d6:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     9d8:	4b0d      	ldr	r3, [pc, #52]	; (a10 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     9da:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     9dc:	230f      	movs	r3, #15
     9de:	18fb      	adds	r3, r7, r3
     9e0:	781b      	ldrb	r3, [r3, #0]
     9e2:	2b00      	cmp	r3, #0
     9e4:	d10f      	bne.n	a06 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     9e6:	230f      	movs	r3, #15
     9e8:	18fb      	adds	r3, r7, r3
     9ea:	781b      	ldrb	r3, [r3, #0]
     9ec:	009b      	lsls	r3, r3, #2
     9ee:	2210      	movs	r2, #16
     9f0:	4694      	mov	ip, r2
     9f2:	44bc      	add	ip, r7
     9f4:	4463      	add	r3, ip
     9f6:	3b08      	subs	r3, #8
     9f8:	681a      	ldr	r2, [r3, #0]
     9fa:	230e      	movs	r3, #14
     9fc:	18fb      	adds	r3, r7, r3
     9fe:	781b      	ldrb	r3, [r3, #0]
     a00:	01db      	lsls	r3, r3, #7
     a02:	18d3      	adds	r3, r2, r3
     a04:	e000      	b.n	a08 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     a06:	2300      	movs	r3, #0
	}
}
     a08:	0018      	movs	r0, r3
     a0a:	46bd      	mov	sp, r7
     a0c:	b004      	add	sp, #16
     a0e:	bd80      	pop	{r7, pc}
     a10:	40002800 	.word	0x40002800

00000a14 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     a14:	b580      	push	{r7, lr}
     a16:	b082      	sub	sp, #8
     a18:	af00      	add	r7, sp, #0
     a1a:	0002      	movs	r2, r0
     a1c:	1dfb      	adds	r3, r7, #7
     a1e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     a20:	1dfb      	adds	r3, r7, #7
     a22:	781b      	ldrb	r3, [r3, #0]
     a24:	0018      	movs	r0, r3
     a26:	4b03      	ldr	r3, [pc, #12]	; (a34 <port_get_group_from_gpio_pin+0x20>)
     a28:	4798      	blx	r3
     a2a:	0003      	movs	r3, r0
}
     a2c:	0018      	movs	r0, r3
     a2e:	46bd      	mov	sp, r7
     a30:	b002      	add	sp, #8
     a32:	bd80      	pop	{r7, pc}
     a34:	000009b5 	.word	0x000009b5

00000a38 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
     a38:	b580      	push	{r7, lr}
     a3a:	b082      	sub	sp, #8
     a3c:	af00      	add	r7, sp, #0
     a3e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     a40:	687b      	ldr	r3, [r7, #4]
     a42:	2200      	movs	r2, #0
     a44:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     a46:	687b      	ldr	r3, [r7, #4]
     a48:	2201      	movs	r2, #1
     a4a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
     a4c:	687b      	ldr	r3, [r7, #4]
     a4e:	2200      	movs	r2, #0
     a50:	709a      	strb	r2, [r3, #2]
}
     a52:	46c0      	nop			; (mov r8, r8)
     a54:	46bd      	mov	sp, r7
     a56:	b002      	add	sp, #8
     a58:	bd80      	pop	{r7, pc}
	...

00000a5c <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     a5c:	b580      	push	{r7, lr}
     a5e:	b084      	sub	sp, #16
     a60:	af00      	add	r7, sp, #0
     a62:	0002      	movs	r2, r0
     a64:	1dfb      	adds	r3, r7, #7
     a66:	701a      	strb	r2, [r3, #0]
     a68:	1dbb      	adds	r3, r7, #6
     a6a:	1c0a      	adds	r2, r1, #0
     a6c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     a6e:	1dfb      	adds	r3, r7, #7
     a70:	781b      	ldrb	r3, [r3, #0]
     a72:	0018      	movs	r0, r3
     a74:	4b0d      	ldr	r3, [pc, #52]	; (aac <port_pin_set_output_level+0x50>)
     a76:	4798      	blx	r3
     a78:	0003      	movs	r3, r0
     a7a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     a7c:	1dfb      	adds	r3, r7, #7
     a7e:	781b      	ldrb	r3, [r3, #0]
     a80:	221f      	movs	r2, #31
     a82:	4013      	ands	r3, r2
     a84:	2201      	movs	r2, #1
     a86:	409a      	lsls	r2, r3
     a88:	0013      	movs	r3, r2
     a8a:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     a8c:	1dbb      	adds	r3, r7, #6
     a8e:	781b      	ldrb	r3, [r3, #0]
     a90:	2b00      	cmp	r3, #0
     a92:	d003      	beq.n	a9c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     a94:	68fb      	ldr	r3, [r7, #12]
     a96:	68ba      	ldr	r2, [r7, #8]
     a98:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
     a9a:	e002      	b.n	aa2 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
     a9c:	68fb      	ldr	r3, [r7, #12]
     a9e:	68ba      	ldr	r2, [r7, #8]
     aa0:	615a      	str	r2, [r3, #20]
}
     aa2:	46c0      	nop			; (mov r8, r8)
     aa4:	46bd      	mov	sp, r7
     aa6:	b004      	add	sp, #16
     aa8:	bd80      	pop	{r7, pc}
     aaa:	46c0      	nop			; (mov r8, r8)
     aac:	00000a15 	.word	0x00000a15

00000ab0 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     ab0:	b580      	push	{r7, lr}
     ab2:	b082      	sub	sp, #8
     ab4:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
     ab6:	1d3b      	adds	r3, r7, #4
     ab8:	0018      	movs	r0, r3
     aba:	4b0e      	ldr	r3, [pc, #56]	; (af4 <system_board_init+0x44>)
     abc:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     abe:	1d3b      	adds	r3, r7, #4
     ac0:	2201      	movs	r2, #1
     ac2:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     ac4:	1d3b      	adds	r3, r7, #4
     ac6:	0019      	movs	r1, r3
     ac8:	202a      	movs	r0, #42	; 0x2a
     aca:	4b0b      	ldr	r3, [pc, #44]	; (af8 <system_board_init+0x48>)
     acc:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
     ace:	2101      	movs	r1, #1
     ad0:	202a      	movs	r0, #42	; 0x2a
     ad2:	4b0a      	ldr	r3, [pc, #40]	; (afc <system_board_init+0x4c>)
     ad4:	4798      	blx	r3

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     ad6:	1d3b      	adds	r3, r7, #4
     ad8:	2200      	movs	r2, #0
     ada:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     adc:	1d3b      	adds	r3, r7, #4
     ade:	2201      	movs	r2, #1
     ae0:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     ae2:	1d3b      	adds	r3, r7, #4
     ae4:	0019      	movs	r1, r3
     ae6:	2002      	movs	r0, #2
     ae8:	4b03      	ldr	r3, [pc, #12]	; (af8 <system_board_init+0x48>)
     aea:	4798      	blx	r3
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     aec:	46c0      	nop			; (mov r8, r8)
     aee:	46bd      	mov	sp, r7
     af0:	b002      	add	sp, #8
     af2:	bd80      	pop	{r7, pc}
     af4:	00000a39 	.word	0x00000a39
     af8:	00000b29 	.word	0x00000b29
     afc:	00000a5d 	.word	0x00000a5d

00000b00 <system_pinmux_get_config_defaults>:
{
     b00:	b580      	push	{r7, lr}
     b02:	b082      	sub	sp, #8
     b04:	af00      	add	r7, sp, #0
     b06:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     b08:	687b      	ldr	r3, [r7, #4]
     b0a:	2280      	movs	r2, #128	; 0x80
     b0c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     b0e:	687b      	ldr	r3, [r7, #4]
     b10:	2200      	movs	r2, #0
     b12:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     b14:	687b      	ldr	r3, [r7, #4]
     b16:	2201      	movs	r2, #1
     b18:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     b1a:	687b      	ldr	r3, [r7, #4]
     b1c:	2200      	movs	r2, #0
     b1e:	70da      	strb	r2, [r3, #3]
}
     b20:	46c0      	nop			; (mov r8, r8)
     b22:	46bd      	mov	sp, r7
     b24:	b002      	add	sp, #8
     b26:	bd80      	pop	{r7, pc}

00000b28 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     b28:	b580      	push	{r7, lr}
     b2a:	b084      	sub	sp, #16
     b2c:	af00      	add	r7, sp, #0
     b2e:	0002      	movs	r2, r0
     b30:	6039      	str	r1, [r7, #0]
     b32:	1dfb      	adds	r3, r7, #7
     b34:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
     b36:	230c      	movs	r3, #12
     b38:	18fb      	adds	r3, r7, r3
     b3a:	0018      	movs	r0, r3
     b3c:	4b10      	ldr	r3, [pc, #64]	; (b80 <port_pin_set_config+0x58>)
     b3e:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
     b40:	230c      	movs	r3, #12
     b42:	18fb      	adds	r3, r7, r3
     b44:	2280      	movs	r2, #128	; 0x80
     b46:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     b48:	683b      	ldr	r3, [r7, #0]
     b4a:	781a      	ldrb	r2, [r3, #0]
     b4c:	230c      	movs	r3, #12
     b4e:	18fb      	adds	r3, r7, r3
     b50:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     b52:	683b      	ldr	r3, [r7, #0]
     b54:	785a      	ldrb	r2, [r3, #1]
     b56:	230c      	movs	r3, #12
     b58:	18fb      	adds	r3, r7, r3
     b5a:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     b5c:	683b      	ldr	r3, [r7, #0]
     b5e:	789a      	ldrb	r2, [r3, #2]
     b60:	230c      	movs	r3, #12
     b62:	18fb      	adds	r3, r7, r3
     b64:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     b66:	230c      	movs	r3, #12
     b68:	18fa      	adds	r2, r7, r3
     b6a:	1dfb      	adds	r3, r7, #7
     b6c:	781b      	ldrb	r3, [r3, #0]
     b6e:	0011      	movs	r1, r2
     b70:	0018      	movs	r0, r3
     b72:	4b04      	ldr	r3, [pc, #16]	; (b84 <port_pin_set_config+0x5c>)
     b74:	4798      	blx	r3
}
     b76:	46c0      	nop			; (mov r8, r8)
     b78:	46bd      	mov	sp, r7
     b7a:	b004      	add	sp, #16
     b7c:	bd80      	pop	{r7, pc}
     b7e:	46c0      	nop			; (mov r8, r8)
     b80:	00000b01 	.word	0x00000b01
     b84:	000021dd 	.word	0x000021dd

00000b88 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     b88:	b580      	push	{r7, lr}
     b8a:	b082      	sub	sp, #8
     b8c:	af00      	add	r7, sp, #0
     b8e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     b90:	687b      	ldr	r3, [r7, #4]
     b92:	2200      	movs	r2, #0
     b94:	701a      	strb	r2, [r3, #0]
}
     b96:	46c0      	nop			; (mov r8, r8)
     b98:	46bd      	mov	sp, r7
     b9a:	b002      	add	sp, #8
     b9c:	bd80      	pop	{r7, pc}

00000b9e <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     b9e:	b5f0      	push	{r4, r5, r6, r7, lr}
     ba0:	b08d      	sub	sp, #52	; 0x34
     ba2:	af00      	add	r7, sp, #0
     ba4:	60b8      	str	r0, [r7, #8]
     ba6:	60f9      	str	r1, [r7, #12]
     ba8:	603a      	str	r2, [r7, #0]
     baa:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     bac:	2300      	movs	r3, #0
     bae:	2400      	movs	r4, #0
     bb0:	623b      	str	r3, [r7, #32]
     bb2:	627c      	str	r4, [r7, #36]	; 0x24
     bb4:	2300      	movs	r3, #0
     bb6:	2400      	movs	r4, #0
     bb8:	61bb      	str	r3, [r7, #24]
     bba:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
     bbc:	233f      	movs	r3, #63	; 0x3f
     bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
     bc0:	e053      	b.n	c6a <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
     bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     bc4:	3b20      	subs	r3, #32
     bc6:	2b00      	cmp	r3, #0
     bc8:	db04      	blt.n	bd4 <long_division+0x36>
     bca:	2201      	movs	r2, #1
     bcc:	409a      	lsls	r2, r3
     bce:	0013      	movs	r3, r2
     bd0:	617b      	str	r3, [r7, #20]
     bd2:	e00b      	b.n	bec <long_division+0x4e>
     bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     bd6:	2220      	movs	r2, #32
     bd8:	1ad3      	subs	r3, r2, r3
     bda:	2201      	movs	r2, #1
     bdc:	40da      	lsrs	r2, r3
     bde:	0013      	movs	r3, r2
     be0:	2100      	movs	r1, #0
     be2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     be4:	4091      	lsls	r1, r2
     be6:	000a      	movs	r2, r1
     be8:	4313      	orrs	r3, r2
     bea:	617b      	str	r3, [r7, #20]
     bec:	2201      	movs	r2, #1
     bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     bf0:	409a      	lsls	r2, r3
     bf2:	0013      	movs	r3, r2
     bf4:	613b      	str	r3, [r7, #16]

		r = r << 1;
     bf6:	69bb      	ldr	r3, [r7, #24]
     bf8:	69fc      	ldr	r4, [r7, #28]
     bfa:	18db      	adds	r3, r3, r3
     bfc:	4164      	adcs	r4, r4
     bfe:	61bb      	str	r3, [r7, #24]
     c00:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
     c02:	68bb      	ldr	r3, [r7, #8]
     c04:	693a      	ldr	r2, [r7, #16]
     c06:	401a      	ands	r2, r3
     c08:	0015      	movs	r5, r2
     c0a:	68fb      	ldr	r3, [r7, #12]
     c0c:	697a      	ldr	r2, [r7, #20]
     c0e:	401a      	ands	r2, r3
     c10:	0016      	movs	r6, r2
     c12:	002b      	movs	r3, r5
     c14:	4333      	orrs	r3, r6
     c16:	d007      	beq.n	c28 <long_division+0x8a>
			r |= 0x01;
     c18:	69bb      	ldr	r3, [r7, #24]
     c1a:	2201      	movs	r2, #1
     c1c:	4313      	orrs	r3, r2
     c1e:	61bb      	str	r3, [r7, #24]
     c20:	69fb      	ldr	r3, [r7, #28]
     c22:	2200      	movs	r2, #0
     c24:	4313      	orrs	r3, r2
     c26:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
     c28:	687a      	ldr	r2, [r7, #4]
     c2a:	69fb      	ldr	r3, [r7, #28]
     c2c:	429a      	cmp	r2, r3
     c2e:	d819      	bhi.n	c64 <long_division+0xc6>
     c30:	687a      	ldr	r2, [r7, #4]
     c32:	69fb      	ldr	r3, [r7, #28]
     c34:	429a      	cmp	r2, r3
     c36:	d103      	bne.n	c40 <long_division+0xa2>
     c38:	683a      	ldr	r2, [r7, #0]
     c3a:	69bb      	ldr	r3, [r7, #24]
     c3c:	429a      	cmp	r2, r3
     c3e:	d811      	bhi.n	c64 <long_division+0xc6>
			r = r - d;
     c40:	69b9      	ldr	r1, [r7, #24]
     c42:	69fa      	ldr	r2, [r7, #28]
     c44:	683b      	ldr	r3, [r7, #0]
     c46:	687c      	ldr	r4, [r7, #4]
     c48:	1ac9      	subs	r1, r1, r3
     c4a:	41a2      	sbcs	r2, r4
     c4c:	000b      	movs	r3, r1
     c4e:	0014      	movs	r4, r2
     c50:	61bb      	str	r3, [r7, #24]
     c52:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
     c54:	6a3a      	ldr	r2, [r7, #32]
     c56:	693b      	ldr	r3, [r7, #16]
     c58:	4313      	orrs	r3, r2
     c5a:	623b      	str	r3, [r7, #32]
     c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     c5e:	697b      	ldr	r3, [r7, #20]
     c60:	4313      	orrs	r3, r2
     c62:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
     c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     c66:	3b01      	subs	r3, #1
     c68:	62fb      	str	r3, [r7, #44]	; 0x2c
     c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     c6c:	2b00      	cmp	r3, #0
     c6e:	daa8      	bge.n	bc2 <long_division+0x24>
		}
	}

	return q;
     c70:	6a3b      	ldr	r3, [r7, #32]
     c72:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
     c74:	0018      	movs	r0, r3
     c76:	0021      	movs	r1, r4
     c78:	46bd      	mov	sp, r7
     c7a:	b00d      	add	sp, #52	; 0x34
     c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000c7e <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     c7e:	b580      	push	{r7, lr}
     c80:	b086      	sub	sp, #24
     c82:	af00      	add	r7, sp, #0
     c84:	60f8      	str	r0, [r7, #12]
     c86:	60b9      	str	r1, [r7, #8]
     c88:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
     c8a:	2316      	movs	r3, #22
     c8c:	18fb      	adds	r3, r7, r3
     c8e:	2200      	movs	r2, #0
     c90:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
     c92:	68bb      	ldr	r3, [r7, #8]
     c94:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     c96:	68bb      	ldr	r3, [r7, #8]
     c98:	085a      	lsrs	r2, r3, #1
     c9a:	68fb      	ldr	r3, [r7, #12]
     c9c:	429a      	cmp	r2, r3
     c9e:	d201      	bcs.n	ca4 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     ca0:	2340      	movs	r3, #64	; 0x40
     ca2:	e026      	b.n	cf2 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
     ca4:	68bb      	ldr	r3, [r7, #8]
     ca6:	085b      	lsrs	r3, r3, #1
     ca8:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
     caa:	e00a      	b.n	cc2 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
     cac:	693a      	ldr	r2, [r7, #16]
     cae:	68fb      	ldr	r3, [r7, #12]
     cb0:	1ad3      	subs	r3, r2, r3
     cb2:	613b      	str	r3, [r7, #16]
		baud_calculated++;
     cb4:	2316      	movs	r3, #22
     cb6:	18fb      	adds	r3, r7, r3
     cb8:	881a      	ldrh	r2, [r3, #0]
     cba:	2316      	movs	r3, #22
     cbc:	18fb      	adds	r3, r7, r3
     cbe:	3201      	adds	r2, #1
     cc0:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
     cc2:	693a      	ldr	r2, [r7, #16]
     cc4:	68fb      	ldr	r3, [r7, #12]
     cc6:	429a      	cmp	r2, r3
     cc8:	d2f0      	bcs.n	cac <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
     cca:	2316      	movs	r3, #22
     ccc:	18fb      	adds	r3, r7, r3
     cce:	2216      	movs	r2, #22
     cd0:	18ba      	adds	r2, r7, r2
     cd2:	8812      	ldrh	r2, [r2, #0]
     cd4:	3a01      	subs	r2, #1
     cd6:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     cd8:	2316      	movs	r3, #22
     cda:	18fb      	adds	r3, r7, r3
     cdc:	881b      	ldrh	r3, [r3, #0]
     cde:	2bff      	cmp	r3, #255	; 0xff
     ce0:	d901      	bls.n	ce6 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     ce2:	2340      	movs	r3, #64	; 0x40
     ce4:	e005      	b.n	cf2 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
     ce6:	687b      	ldr	r3, [r7, #4]
     ce8:	2216      	movs	r2, #22
     cea:	18ba      	adds	r2, r7, r2
     cec:	8812      	ldrh	r2, [r2, #0]
     cee:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
     cf0:	2300      	movs	r3, #0
	}
}
     cf2:	0018      	movs	r0, r3
     cf4:	46bd      	mov	sp, r7
     cf6:	b006      	add	sp, #24
     cf8:	bd80      	pop	{r7, pc}
	...

00000cfc <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
     cfe:	b0a1      	sub	sp, #132	; 0x84
     d00:	af00      	add	r7, sp, #0
     d02:	64f8      	str	r0, [r7, #76]	; 0x4c
     d04:	64b9      	str	r1, [r7, #72]	; 0x48
     d06:	647a      	str	r2, [r7, #68]	; 0x44
     d08:	2243      	movs	r2, #67	; 0x43
     d0a:	18ba      	adds	r2, r7, r2
     d0c:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
     d0e:	2300      	movs	r3, #0
     d10:	2400      	movs	r4, #0
     d12:	673b      	str	r3, [r7, #112]	; 0x70
     d14:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
     d16:	2300      	movs	r3, #0
     d18:	2400      	movs	r4, #0
     d1a:	66bb      	str	r3, [r7, #104]	; 0x68
     d1c:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
     d1e:	2300      	movs	r3, #0
     d20:	2400      	movs	r4, #0
     d22:	67bb      	str	r3, [r7, #120]	; 0x78
     d24:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
     d26:	2300      	movs	r3, #0
     d28:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     d2a:	2358      	movs	r3, #88	; 0x58
     d2c:	2240      	movs	r2, #64	; 0x40
     d2e:	4694      	mov	ip, r2
     d30:	44bc      	add	ip, r7
     d32:	4463      	add	r3, ip
     d34:	781a      	ldrb	r2, [r3, #0]
     d36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     d38:	435a      	muls	r2, r3
     d3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     d3c:	429a      	cmp	r2, r3
     d3e:	d901      	bls.n	d44 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     d40:	2340      	movs	r3, #64	; 0x40
     d42:	e0b3      	b.n	eac <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     d44:	2343      	movs	r3, #67	; 0x43
     d46:	18fb      	adds	r3, r7, r3
     d48:	781b      	ldrb	r3, [r3, #0]
     d4a:	2b00      	cmp	r3, #0
     d4c:	d13d      	bne.n	dca <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     d4e:	2358      	movs	r3, #88	; 0x58
     d50:	2240      	movs	r2, #64	; 0x40
     d52:	4694      	mov	ip, r2
     d54:	44bc      	add	ip, r7
     d56:	4463      	add	r3, ip
     d58:	781b      	ldrb	r3, [r3, #0]
     d5a:	b2db      	uxtb	r3, r3
     d5c:	613b      	str	r3, [r7, #16]
     d5e:	2300      	movs	r3, #0
     d60:	617b      	str	r3, [r7, #20]
     d62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     d64:	60bb      	str	r3, [r7, #8]
     d66:	2300      	movs	r3, #0
     d68:	60fb      	str	r3, [r7, #12]
     d6a:	4c52      	ldr	r4, [pc, #328]	; (eb4 <_sercom_get_async_baud_val+0x1b8>)
     d6c:	68ba      	ldr	r2, [r7, #8]
     d6e:	68fb      	ldr	r3, [r7, #12]
     d70:	6938      	ldr	r0, [r7, #16]
     d72:	6979      	ldr	r1, [r7, #20]
     d74:	47a0      	blx	r4
     d76:	0003      	movs	r3, r0
     d78:	000c      	movs	r4, r1
     d7a:	001b      	movs	r3, r3
     d7c:	65fb      	str	r3, [r7, #92]	; 0x5c
     d7e:	2300      	movs	r3, #0
     d80:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
     d82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     d84:	603b      	str	r3, [r7, #0]
     d86:	2300      	movs	r3, #0
     d88:	607b      	str	r3, [r7, #4]
     d8a:	6db8      	ldr	r0, [r7, #88]	; 0x58
     d8c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
     d8e:	683a      	ldr	r2, [r7, #0]
     d90:	687b      	ldr	r3, [r7, #4]
     d92:	4c49      	ldr	r4, [pc, #292]	; (eb8 <_sercom_get_async_baud_val+0x1bc>)
     d94:	47a0      	blx	r4
     d96:	0003      	movs	r3, r0
     d98:	000c      	movs	r4, r1
     d9a:	673b      	str	r3, [r7, #112]	; 0x70
     d9c:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
     d9e:	2100      	movs	r1, #0
     da0:	2201      	movs	r2, #1
     da2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
     da4:	6f7c      	ldr	r4, [r7, #116]	; 0x74
     da6:	1ac9      	subs	r1, r1, r3
     da8:	41a2      	sbcs	r2, r4
     daa:	000b      	movs	r3, r1
     dac:	0014      	movs	r4, r2
     dae:	66bb      	str	r3, [r7, #104]	; 0x68
     db0:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
     db2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
     db4:	0c1b      	lsrs	r3, r3, #16
     db6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
     db8:	0416      	lsls	r6, r2, #16
     dba:	431e      	orrs	r6, r3
     dbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
     dbe:	041d      	lsls	r5, r3, #16
     dc0:	0033      	movs	r3, r6
     dc2:	67bb      	str	r3, [r7, #120]	; 0x78
     dc4:	2300      	movs	r3, #0
     dc6:	67fb      	str	r3, [r7, #124]	; 0x7c
     dc8:	e06a      	b.n	ea0 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     dca:	2343      	movs	r3, #67	; 0x43
     dcc:	18fb      	adds	r3, r7, r3
     dce:	781b      	ldrb	r3, [r3, #0]
     dd0:	2b01      	cmp	r3, #1
     dd2:	d165      	bne.n	ea0 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
     dd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     dd6:	633b      	str	r3, [r7, #48]	; 0x30
     dd8:	2300      	movs	r3, #0
     dda:	637b      	str	r3, [r7, #52]	; 0x34
     ddc:	2358      	movs	r3, #88	; 0x58
     dde:	2240      	movs	r2, #64	; 0x40
     de0:	4694      	mov	ip, r2
     de2:	44bc      	add	ip, r7
     de4:	4463      	add	r3, ip
     de6:	781b      	ldrb	r3, [r3, #0]
     de8:	b2db      	uxtb	r3, r3
     dea:	62bb      	str	r3, [r7, #40]	; 0x28
     dec:	2300      	movs	r3, #0
     dee:	62fb      	str	r3, [r7, #44]	; 0x2c
     df0:	4c30      	ldr	r4, [pc, #192]	; (eb4 <_sercom_get_async_baud_val+0x1b8>)
     df2:	6aba      	ldr	r2, [r7, #40]	; 0x28
     df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     df6:	6b38      	ldr	r0, [r7, #48]	; 0x30
     df8:	6b79      	ldr	r1, [r7, #52]	; 0x34
     dfa:	47a0      	blx	r4
     dfc:	0003      	movs	r3, r0
     dfe:	000c      	movs	r4, r1
     e00:	65bb      	str	r3, [r7, #88]	; 0x58
     e02:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
     e04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     e06:	623b      	str	r3, [r7, #32]
     e08:	2300      	movs	r3, #0
     e0a:	627b      	str	r3, [r7, #36]	; 0x24
     e0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
     e0e:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
     e10:	001a      	movs	r2, r3
     e12:	0023      	movs	r3, r4
     e14:	6a38      	ldr	r0, [r7, #32]
     e16:	6a79      	ldr	r1, [r7, #36]	; 0x24
     e18:	4c27      	ldr	r4, [pc, #156]	; (eb8 <_sercom_get_async_baud_val+0x1bc>)
     e1a:	47a0      	blx	r4
     e1c:	0003      	movs	r3, r0
     e1e:	000c      	movs	r4, r1
     e20:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
     e22:	6e7a      	ldr	r2, [r7, #100]	; 0x64
     e24:	2380      	movs	r3, #128	; 0x80
     e26:	019b      	lsls	r3, r3, #6
     e28:	429a      	cmp	r2, r3
     e2a:	d901      	bls.n	e30 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     e2c:	2340      	movs	r3, #64	; 0x40
     e2e:	e03d      	b.n	eac <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     e30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     e32:	61bb      	str	r3, [r7, #24]
     e34:	2300      	movs	r3, #0
     e36:	61fb      	str	r3, [r7, #28]
     e38:	69b9      	ldr	r1, [r7, #24]
     e3a:	69fa      	ldr	r2, [r7, #28]
     e3c:	000b      	movs	r3, r1
     e3e:	0f5b      	lsrs	r3, r3, #29
     e40:	0010      	movs	r0, r2
     e42:	00c0      	lsls	r0, r0, #3
     e44:	63f8      	str	r0, [r7, #60]	; 0x3c
     e46:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
     e48:	4318      	orrs	r0, r3
     e4a:	63f8      	str	r0, [r7, #60]	; 0x3c
     e4c:	000b      	movs	r3, r1
     e4e:	00db      	lsls	r3, r3, #3
     e50:	63bb      	str	r3, [r7, #56]	; 0x38
     e52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
     e54:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
     e56:	001a      	movs	r2, r3
     e58:	0023      	movs	r3, r4
     e5a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
     e5c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
     e5e:	4c16      	ldr	r4, [pc, #88]	; (eb8 <_sercom_get_async_baud_val+0x1bc>)
     e60:	47a0      	blx	r4
     e62:	0003      	movs	r3, r0
     e64:	000c      	movs	r4, r1
     e66:	65bb      	str	r3, [r7, #88]	; 0x58
     e68:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
     e6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
     e6c:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
     e6e:	b2d9      	uxtb	r1, r3
     e70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
     e72:	b2db      	uxtb	r3, r3
     e74:	00db      	lsls	r3, r3, #3
     e76:	b2da      	uxtb	r2, r3
     e78:	2317      	movs	r3, #23
     e7a:	2040      	movs	r0, #64	; 0x40
     e7c:	4684      	mov	ip, r0
     e7e:	44bc      	add	ip, r7
     e80:	4463      	add	r3, ip
     e82:	1a8a      	subs	r2, r1, r2
     e84:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
     e86:	2317      	movs	r3, #23
     e88:	2240      	movs	r2, #64	; 0x40
     e8a:	4694      	mov	ip, r2
     e8c:	44bc      	add	ip, r7
     e8e:	4463      	add	r3, ip
     e90:	781b      	ldrb	r3, [r3, #0]
     e92:	035b      	lsls	r3, r3, #13
     e94:	001a      	movs	r2, r3
     e96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
     e98:	4313      	orrs	r3, r2
     e9a:	67bb      	str	r3, [r7, #120]	; 0x78
     e9c:	2300      	movs	r3, #0
     e9e:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
     ea0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
     ea2:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
     ea4:	b29a      	uxth	r2, r3
     ea6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     ea8:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
     eaa:	2300      	movs	r3, #0
}
     eac:	0018      	movs	r0, r3
     eae:	46bd      	mov	sp, r7
     eb0:	b021      	add	sp, #132	; 0x84
     eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     eb4:	000028f1 	.word	0x000028f1
     eb8:	00000b9f 	.word	0x00000b9f

00000ebc <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     ebc:	b580      	push	{r7, lr}
     ebe:	b084      	sub	sp, #16
     ec0:	af00      	add	r7, sp, #0
     ec2:	0002      	movs	r2, r0
     ec4:	1dfb      	adds	r3, r7, #7
     ec6:	701a      	strb	r2, [r3, #0]
     ec8:	1dbb      	adds	r3, r7, #6
     eca:	1c0a      	adds	r2, r1, #0
     ecc:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     ece:	4b1a      	ldr	r3, [pc, #104]	; (f38 <sercom_set_gclk_generator+0x7c>)
     ed0:	781b      	ldrb	r3, [r3, #0]
     ed2:	2201      	movs	r2, #1
     ed4:	4053      	eors	r3, r2
     ed6:	b2db      	uxtb	r3, r3
     ed8:	2b00      	cmp	r3, #0
     eda:	d103      	bne.n	ee4 <sercom_set_gclk_generator+0x28>
     edc:	1dbb      	adds	r3, r7, #6
     ede:	781b      	ldrb	r3, [r3, #0]
     ee0:	2b00      	cmp	r3, #0
     ee2:	d01b      	beq.n	f1c <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     ee4:	230c      	movs	r3, #12
     ee6:	18fb      	adds	r3, r7, r3
     ee8:	0018      	movs	r0, r3
     eea:	4b14      	ldr	r3, [pc, #80]	; (f3c <sercom_set_gclk_generator+0x80>)
     eec:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
     eee:	230c      	movs	r3, #12
     ef0:	18fb      	adds	r3, r7, r3
     ef2:	1dfa      	adds	r2, r7, #7
     ef4:	7812      	ldrb	r2, [r2, #0]
     ef6:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     ef8:	230c      	movs	r3, #12
     efa:	18fb      	adds	r3, r7, r3
     efc:	0019      	movs	r1, r3
     efe:	2011      	movs	r0, #17
     f00:	4b0f      	ldr	r3, [pc, #60]	; (f40 <sercom_set_gclk_generator+0x84>)
     f02:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     f04:	2011      	movs	r0, #17
     f06:	4b0f      	ldr	r3, [pc, #60]	; (f44 <sercom_set_gclk_generator+0x88>)
     f08:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
     f0a:	4b0b      	ldr	r3, [pc, #44]	; (f38 <sercom_set_gclk_generator+0x7c>)
     f0c:	1dfa      	adds	r2, r7, #7
     f0e:	7812      	ldrb	r2, [r2, #0]
     f10:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
     f12:	4b09      	ldr	r3, [pc, #36]	; (f38 <sercom_set_gclk_generator+0x7c>)
     f14:	2201      	movs	r2, #1
     f16:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     f18:	2300      	movs	r3, #0
     f1a:	e008      	b.n	f2e <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
     f1c:	4b06      	ldr	r3, [pc, #24]	; (f38 <sercom_set_gclk_generator+0x7c>)
     f1e:	785b      	ldrb	r3, [r3, #1]
     f20:	1dfa      	adds	r2, r7, #7
     f22:	7812      	ldrb	r2, [r2, #0]
     f24:	429a      	cmp	r2, r3
     f26:	d101      	bne.n	f2c <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
     f28:	2300      	movs	r3, #0
     f2a:	e000      	b.n	f2e <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     f2c:	231d      	movs	r3, #29
}
     f2e:	0018      	movs	r0, r3
     f30:	46bd      	mov	sp, r7
     f32:	b004      	add	sp, #16
     f34:	bd80      	pop	{r7, pc}
     f36:	46c0      	nop			; (mov r8, r8)
     f38:	2000048c 	.word	0x2000048c
     f3c:	00000b89 	.word	0x00000b89
     f40:	00001f29 	.word	0x00001f29
     f44:	00001f69 	.word	0x00001f69

00000f48 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
     f48:	b580      	push	{r7, lr}
     f4a:	b082      	sub	sp, #8
     f4c:	af00      	add	r7, sp, #0
     f4e:	6078      	str	r0, [r7, #4]
     f50:	000a      	movs	r2, r1
     f52:	1cfb      	adds	r3, r7, #3
     f54:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
     f56:	687b      	ldr	r3, [r7, #4]
     f58:	4a4e      	ldr	r2, [pc, #312]	; (1094 <_sercom_get_default_pad+0x14c>)
     f5a:	4293      	cmp	r3, r2
     f5c:	d040      	beq.n	fe0 <_sercom_get_default_pad+0x98>
     f5e:	4a4d      	ldr	r2, [pc, #308]	; (1094 <_sercom_get_default_pad+0x14c>)
     f60:	4293      	cmp	r3, r2
     f62:	d807      	bhi.n	f74 <_sercom_get_default_pad+0x2c>
     f64:	2284      	movs	r2, #132	; 0x84
     f66:	05d2      	lsls	r2, r2, #23
     f68:	4293      	cmp	r3, r2
     f6a:	d00f      	beq.n	f8c <_sercom_get_default_pad+0x44>
     f6c:	4a4a      	ldr	r2, [pc, #296]	; (1098 <_sercom_get_default_pad+0x150>)
     f6e:	4293      	cmp	r3, r2
     f70:	d021      	beq.n	fb6 <_sercom_get_default_pad+0x6e>
     f72:	e089      	b.n	1088 <_sercom_get_default_pad+0x140>
     f74:	4a49      	ldr	r2, [pc, #292]	; (109c <_sercom_get_default_pad+0x154>)
     f76:	4293      	cmp	r3, r2
     f78:	d100      	bne.n	f7c <_sercom_get_default_pad+0x34>
     f7a:	e05b      	b.n	1034 <_sercom_get_default_pad+0xec>
     f7c:	4a48      	ldr	r2, [pc, #288]	; (10a0 <_sercom_get_default_pad+0x158>)
     f7e:	4293      	cmp	r3, r2
     f80:	d100      	bne.n	f84 <_sercom_get_default_pad+0x3c>
     f82:	e06c      	b.n	105e <_sercom_get_default_pad+0x116>
     f84:	4a47      	ldr	r2, [pc, #284]	; (10a4 <_sercom_get_default_pad+0x15c>)
     f86:	4293      	cmp	r3, r2
     f88:	d03f      	beq.n	100a <_sercom_get_default_pad+0xc2>
     f8a:	e07d      	b.n	1088 <_sercom_get_default_pad+0x140>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     f8c:	1cfb      	adds	r3, r7, #3
     f8e:	781b      	ldrb	r3, [r3, #0]
     f90:	2b01      	cmp	r3, #1
     f92:	d00a      	beq.n	faa <_sercom_get_default_pad+0x62>
     f94:	dc02      	bgt.n	f9c <_sercom_get_default_pad+0x54>
     f96:	2b00      	cmp	r3, #0
     f98:	d005      	beq.n	fa6 <_sercom_get_default_pad+0x5e>
     f9a:	e075      	b.n	1088 <_sercom_get_default_pad+0x140>
     f9c:	2b02      	cmp	r3, #2
     f9e:	d006      	beq.n	fae <_sercom_get_default_pad+0x66>
     fa0:	2b03      	cmp	r3, #3
     fa2:	d006      	beq.n	fb2 <_sercom_get_default_pad+0x6a>
     fa4:	e070      	b.n	1088 <_sercom_get_default_pad+0x140>
     fa6:	4b40      	ldr	r3, [pc, #256]	; (10a8 <_sercom_get_default_pad+0x160>)
     fa8:	e06f      	b.n	108a <_sercom_get_default_pad+0x142>
     faa:	4b40      	ldr	r3, [pc, #256]	; (10ac <_sercom_get_default_pad+0x164>)
     fac:	e06d      	b.n	108a <_sercom_get_default_pad+0x142>
     fae:	4b40      	ldr	r3, [pc, #256]	; (10b0 <_sercom_get_default_pad+0x168>)
     fb0:	e06b      	b.n	108a <_sercom_get_default_pad+0x142>
     fb2:	4b40      	ldr	r3, [pc, #256]	; (10b4 <_sercom_get_default_pad+0x16c>)
     fb4:	e069      	b.n	108a <_sercom_get_default_pad+0x142>
     fb6:	1cfb      	adds	r3, r7, #3
     fb8:	781b      	ldrb	r3, [r3, #0]
     fba:	2b01      	cmp	r3, #1
     fbc:	d00a      	beq.n	fd4 <_sercom_get_default_pad+0x8c>
     fbe:	dc02      	bgt.n	fc6 <_sercom_get_default_pad+0x7e>
     fc0:	2b00      	cmp	r3, #0
     fc2:	d005      	beq.n	fd0 <_sercom_get_default_pad+0x88>
     fc4:	e060      	b.n	1088 <_sercom_get_default_pad+0x140>
     fc6:	2b02      	cmp	r3, #2
     fc8:	d006      	beq.n	fd8 <_sercom_get_default_pad+0x90>
     fca:	2b03      	cmp	r3, #3
     fcc:	d006      	beq.n	fdc <_sercom_get_default_pad+0x94>
     fce:	e05b      	b.n	1088 <_sercom_get_default_pad+0x140>
     fd0:	2303      	movs	r3, #3
     fd2:	e05a      	b.n	108a <_sercom_get_default_pad+0x142>
     fd4:	4b38      	ldr	r3, [pc, #224]	; (10b8 <_sercom_get_default_pad+0x170>)
     fd6:	e058      	b.n	108a <_sercom_get_default_pad+0x142>
     fd8:	4b38      	ldr	r3, [pc, #224]	; (10bc <_sercom_get_default_pad+0x174>)
     fda:	e056      	b.n	108a <_sercom_get_default_pad+0x142>
     fdc:	4b38      	ldr	r3, [pc, #224]	; (10c0 <_sercom_get_default_pad+0x178>)
     fde:	e054      	b.n	108a <_sercom_get_default_pad+0x142>
     fe0:	1cfb      	adds	r3, r7, #3
     fe2:	781b      	ldrb	r3, [r3, #0]
     fe4:	2b01      	cmp	r3, #1
     fe6:	d00a      	beq.n	ffe <_sercom_get_default_pad+0xb6>
     fe8:	dc02      	bgt.n	ff0 <_sercom_get_default_pad+0xa8>
     fea:	2b00      	cmp	r3, #0
     fec:	d005      	beq.n	ffa <_sercom_get_default_pad+0xb2>
     fee:	e04b      	b.n	1088 <_sercom_get_default_pad+0x140>
     ff0:	2b02      	cmp	r3, #2
     ff2:	d006      	beq.n	1002 <_sercom_get_default_pad+0xba>
     ff4:	2b03      	cmp	r3, #3
     ff6:	d006      	beq.n	1006 <_sercom_get_default_pad+0xbe>
     ff8:	e046      	b.n	1088 <_sercom_get_default_pad+0x140>
     ffa:	4b32      	ldr	r3, [pc, #200]	; (10c4 <_sercom_get_default_pad+0x17c>)
     ffc:	e045      	b.n	108a <_sercom_get_default_pad+0x142>
     ffe:	4b32      	ldr	r3, [pc, #200]	; (10c8 <_sercom_get_default_pad+0x180>)
    1000:	e043      	b.n	108a <_sercom_get_default_pad+0x142>
    1002:	4b32      	ldr	r3, [pc, #200]	; (10cc <_sercom_get_default_pad+0x184>)
    1004:	e041      	b.n	108a <_sercom_get_default_pad+0x142>
    1006:	4b32      	ldr	r3, [pc, #200]	; (10d0 <_sercom_get_default_pad+0x188>)
    1008:	e03f      	b.n	108a <_sercom_get_default_pad+0x142>
    100a:	1cfb      	adds	r3, r7, #3
    100c:	781b      	ldrb	r3, [r3, #0]
    100e:	2b01      	cmp	r3, #1
    1010:	d00a      	beq.n	1028 <_sercom_get_default_pad+0xe0>
    1012:	dc02      	bgt.n	101a <_sercom_get_default_pad+0xd2>
    1014:	2b00      	cmp	r3, #0
    1016:	d005      	beq.n	1024 <_sercom_get_default_pad+0xdc>
    1018:	e036      	b.n	1088 <_sercom_get_default_pad+0x140>
    101a:	2b02      	cmp	r3, #2
    101c:	d006      	beq.n	102c <_sercom_get_default_pad+0xe4>
    101e:	2b03      	cmp	r3, #3
    1020:	d006      	beq.n	1030 <_sercom_get_default_pad+0xe8>
    1022:	e031      	b.n	1088 <_sercom_get_default_pad+0x140>
    1024:	4b2b      	ldr	r3, [pc, #172]	; (10d4 <_sercom_get_default_pad+0x18c>)
    1026:	e030      	b.n	108a <_sercom_get_default_pad+0x142>
    1028:	4b2b      	ldr	r3, [pc, #172]	; (10d8 <_sercom_get_default_pad+0x190>)
    102a:	e02e      	b.n	108a <_sercom_get_default_pad+0x142>
    102c:	4b2b      	ldr	r3, [pc, #172]	; (10dc <_sercom_get_default_pad+0x194>)
    102e:	e02c      	b.n	108a <_sercom_get_default_pad+0x142>
    1030:	4b2b      	ldr	r3, [pc, #172]	; (10e0 <_sercom_get_default_pad+0x198>)
    1032:	e02a      	b.n	108a <_sercom_get_default_pad+0x142>
    1034:	1cfb      	adds	r3, r7, #3
    1036:	781b      	ldrb	r3, [r3, #0]
    1038:	2b01      	cmp	r3, #1
    103a:	d00a      	beq.n	1052 <_sercom_get_default_pad+0x10a>
    103c:	dc02      	bgt.n	1044 <_sercom_get_default_pad+0xfc>
    103e:	2b00      	cmp	r3, #0
    1040:	d005      	beq.n	104e <_sercom_get_default_pad+0x106>
    1042:	e021      	b.n	1088 <_sercom_get_default_pad+0x140>
    1044:	2b02      	cmp	r3, #2
    1046:	d006      	beq.n	1056 <_sercom_get_default_pad+0x10e>
    1048:	2b03      	cmp	r3, #3
    104a:	d006      	beq.n	105a <_sercom_get_default_pad+0x112>
    104c:	e01c      	b.n	1088 <_sercom_get_default_pad+0x140>
    104e:	4b25      	ldr	r3, [pc, #148]	; (10e4 <_sercom_get_default_pad+0x19c>)
    1050:	e01b      	b.n	108a <_sercom_get_default_pad+0x142>
    1052:	4b25      	ldr	r3, [pc, #148]	; (10e8 <_sercom_get_default_pad+0x1a0>)
    1054:	e019      	b.n	108a <_sercom_get_default_pad+0x142>
    1056:	4b25      	ldr	r3, [pc, #148]	; (10ec <_sercom_get_default_pad+0x1a4>)
    1058:	e017      	b.n	108a <_sercom_get_default_pad+0x142>
    105a:	4b25      	ldr	r3, [pc, #148]	; (10f0 <_sercom_get_default_pad+0x1a8>)
    105c:	e015      	b.n	108a <_sercom_get_default_pad+0x142>
    105e:	1cfb      	adds	r3, r7, #3
    1060:	781b      	ldrb	r3, [r3, #0]
    1062:	2b01      	cmp	r3, #1
    1064:	d00a      	beq.n	107c <_sercom_get_default_pad+0x134>
    1066:	dc02      	bgt.n	106e <_sercom_get_default_pad+0x126>
    1068:	2b00      	cmp	r3, #0
    106a:	d005      	beq.n	1078 <_sercom_get_default_pad+0x130>
    106c:	e00c      	b.n	1088 <_sercom_get_default_pad+0x140>
    106e:	2b02      	cmp	r3, #2
    1070:	d006      	beq.n	1080 <_sercom_get_default_pad+0x138>
    1072:	2b03      	cmp	r3, #3
    1074:	d006      	beq.n	1084 <_sercom_get_default_pad+0x13c>
    1076:	e007      	b.n	1088 <_sercom_get_default_pad+0x140>
    1078:	4b1e      	ldr	r3, [pc, #120]	; (10f4 <_sercom_get_default_pad+0x1ac>)
    107a:	e006      	b.n	108a <_sercom_get_default_pad+0x142>
    107c:	4b1e      	ldr	r3, [pc, #120]	; (10f8 <_sercom_get_default_pad+0x1b0>)
    107e:	e004      	b.n	108a <_sercom_get_default_pad+0x142>
    1080:	4b1e      	ldr	r3, [pc, #120]	; (10fc <_sercom_get_default_pad+0x1b4>)
    1082:	e002      	b.n	108a <_sercom_get_default_pad+0x142>
    1084:	4b1e      	ldr	r3, [pc, #120]	; (1100 <_sercom_get_default_pad+0x1b8>)
    1086:	e000      	b.n	108a <_sercom_get_default_pad+0x142>
	}

	Assert(false);
	return 0;
    1088:	2300      	movs	r3, #0
}
    108a:	0018      	movs	r0, r3
    108c:	46bd      	mov	sp, r7
    108e:	b002      	add	sp, #8
    1090:	bd80      	pop	{r7, pc}
    1092:	46c0      	nop			; (mov r8, r8)
    1094:	42000800 	.word	0x42000800
    1098:	42000400 	.word	0x42000400
    109c:	42001000 	.word	0x42001000
    10a0:	43000400 	.word	0x43000400
    10a4:	42000c00 	.word	0x42000c00
    10a8:	00040003 	.word	0x00040003
    10ac:	00050003 	.word	0x00050003
    10b0:	00060003 	.word	0x00060003
    10b4:	00070003 	.word	0x00070003
    10b8:	00010003 	.word	0x00010003
    10bc:	001e0003 	.word	0x001e0003
    10c0:	001f0003 	.word	0x001f0003
    10c4:	00080003 	.word	0x00080003
    10c8:	00090003 	.word	0x00090003
    10cc:	000a0003 	.word	0x000a0003
    10d0:	000b0003 	.word	0x000b0003
    10d4:	00100003 	.word	0x00100003
    10d8:	00110003 	.word	0x00110003
    10dc:	00120003 	.word	0x00120003
    10e0:	00130003 	.word	0x00130003
    10e4:	000c0003 	.word	0x000c0003
    10e8:	000d0003 	.word	0x000d0003
    10ec:	000e0003 	.word	0x000e0003
    10f0:	000f0003 	.word	0x000f0003
    10f4:	00160003 	.word	0x00160003
    10f8:	00170003 	.word	0x00170003
    10fc:	00180003 	.word	0x00180003
    1100:	00190003 	.word	0x00190003

00001104 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1104:	b590      	push	{r4, r7, lr}
    1106:	b08b      	sub	sp, #44	; 0x2c
    1108:	af00      	add	r7, sp, #0
    110a:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    110c:	230c      	movs	r3, #12
    110e:	18fb      	adds	r3, r7, r3
    1110:	4a0f      	ldr	r2, [pc, #60]	; (1150 <_sercom_get_sercom_inst_index+0x4c>)
    1112:	ca13      	ldmia	r2!, {r0, r1, r4}
    1114:	c313      	stmia	r3!, {r0, r1, r4}
    1116:	ca13      	ldmia	r2!, {r0, r1, r4}
    1118:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    111a:	2300      	movs	r3, #0
    111c:	627b      	str	r3, [r7, #36]	; 0x24
    111e:	e00e      	b.n	113e <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    1120:	230c      	movs	r3, #12
    1122:	18fb      	adds	r3, r7, r3
    1124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1126:	0092      	lsls	r2, r2, #2
    1128:	58d3      	ldr	r3, [r2, r3]
    112a:	001a      	movs	r2, r3
    112c:	687b      	ldr	r3, [r7, #4]
    112e:	429a      	cmp	r2, r3
    1130:	d102      	bne.n	1138 <_sercom_get_sercom_inst_index+0x34>
			return i;
    1132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1134:	b2db      	uxtb	r3, r3
    1136:	e006      	b.n	1146 <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    113a:	3301      	adds	r3, #1
    113c:	627b      	str	r3, [r7, #36]	; 0x24
    113e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1140:	2b05      	cmp	r3, #5
    1142:	d9ed      	bls.n	1120 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    1144:	2300      	movs	r3, #0
}
    1146:	0018      	movs	r0, r3
    1148:	46bd      	mov	sp, r7
    114a:	b00b      	add	sp, #44	; 0x2c
    114c:	bd90      	pop	{r4, r7, pc}
    114e:	46c0      	nop			; (mov r8, r8)
    1150:	00003a54 	.word	0x00003a54

00001154 <system_gclk_chan_get_config_defaults>:
{
    1154:	b580      	push	{r7, lr}
    1156:	b082      	sub	sp, #8
    1158:	af00      	add	r7, sp, #0
    115a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    115c:	687b      	ldr	r3, [r7, #4]
    115e:	2200      	movs	r2, #0
    1160:	701a      	strb	r2, [r3, #0]
}
    1162:	46c0      	nop			; (mov r8, r8)
    1164:	46bd      	mov	sp, r7
    1166:	b002      	add	sp, #8
    1168:	bd80      	pop	{r7, pc}
	...

0000116c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    116c:	b580      	push	{r7, lr}
    116e:	b082      	sub	sp, #8
    1170:	af00      	add	r7, sp, #0
    1172:	0002      	movs	r2, r0
    1174:	6039      	str	r1, [r7, #0]
    1176:	1dfb      	adds	r3, r7, #7
    1178:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    117a:	1dfb      	adds	r3, r7, #7
    117c:	781b      	ldrb	r3, [r3, #0]
    117e:	2b04      	cmp	r3, #4
    1180:	d827      	bhi.n	11d2 <system_apb_clock_set_mask+0x66>
    1182:	009a      	lsls	r2, r3, #2
    1184:	4b16      	ldr	r3, [pc, #88]	; (11e0 <system_apb_clock_set_mask+0x74>)
    1186:	18d3      	adds	r3, r2, r3
    1188:	681b      	ldr	r3, [r3, #0]
    118a:	469f      	mov	pc, r3
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
    118c:	4b15      	ldr	r3, [pc, #84]	; (11e4 <system_apb_clock_set_mask+0x78>)
    118e:	4a15      	ldr	r2, [pc, #84]	; (11e4 <system_apb_clock_set_mask+0x78>)
    1190:	6951      	ldr	r1, [r2, #20]
    1192:	683a      	ldr	r2, [r7, #0]
    1194:	430a      	orrs	r2, r1
    1196:	615a      	str	r2, [r3, #20]
			break;
    1198:	e01d      	b.n	11d6 <system_apb_clock_set_mask+0x6a>

		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
    119a:	4b12      	ldr	r3, [pc, #72]	; (11e4 <system_apb_clock_set_mask+0x78>)
    119c:	4a11      	ldr	r2, [pc, #68]	; (11e4 <system_apb_clock_set_mask+0x78>)
    119e:	6991      	ldr	r1, [r2, #24]
    11a0:	683a      	ldr	r2, [r7, #0]
    11a2:	430a      	orrs	r2, r1
    11a4:	619a      	str	r2, [r3, #24]
			break;
    11a6:	e016      	b.n	11d6 <system_apb_clock_set_mask+0x6a>

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
    11a8:	4b0e      	ldr	r3, [pc, #56]	; (11e4 <system_apb_clock_set_mask+0x78>)
    11aa:	4a0e      	ldr	r2, [pc, #56]	; (11e4 <system_apb_clock_set_mask+0x78>)
    11ac:	69d1      	ldr	r1, [r2, #28]
    11ae:	683a      	ldr	r2, [r7, #0]
    11b0:	430a      	orrs	r2, r1
    11b2:	61da      	str	r2, [r3, #28]
			break;
    11b4:	e00f      	b.n	11d6 <system_apb_clock_set_mask+0x6a>
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
    11b6:	4b0b      	ldr	r3, [pc, #44]	; (11e4 <system_apb_clock_set_mask+0x78>)
    11b8:	4a0a      	ldr	r2, [pc, #40]	; (11e4 <system_apb_clock_set_mask+0x78>)
    11ba:	6a11      	ldr	r1, [r2, #32]
    11bc:	683a      	ldr	r2, [r7, #0]
    11be:	430a      	orrs	r2, r1
    11c0:	621a      	str	r2, [r3, #32]
			break;
    11c2:	e008      	b.n	11d6 <system_apb_clock_set_mask+0x6a>
		case SYSTEM_CLOCK_APB_APBE:
			MCLK->APBEMASK.reg |= mask;
    11c4:	4b07      	ldr	r3, [pc, #28]	; (11e4 <system_apb_clock_set_mask+0x78>)
    11c6:	4a07      	ldr	r2, [pc, #28]	; (11e4 <system_apb_clock_set_mask+0x78>)
    11c8:	6a51      	ldr	r1, [r2, #36]	; 0x24
    11ca:	683a      	ldr	r2, [r7, #0]
    11cc:	430a      	orrs	r2, r1
    11ce:	625a      	str	r2, [r3, #36]	; 0x24
			break;
    11d0:	e001      	b.n	11d6 <system_apb_clock_set_mask+0x6a>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    11d2:	2317      	movs	r3, #23
    11d4:	e000      	b.n	11d8 <system_apb_clock_set_mask+0x6c>

	}

	return STATUS_OK;
    11d6:	2300      	movs	r3, #0
}
    11d8:	0018      	movs	r0, r3
    11da:	46bd      	mov	sp, r7
    11dc:	b002      	add	sp, #8
    11de:	bd80      	pop	{r7, pc}
    11e0:	00003a6c 	.word	0x00003a6c
    11e4:	40000400 	.word	0x40000400

000011e8 <system_pinmux_get_config_defaults>:
{
    11e8:	b580      	push	{r7, lr}
    11ea:	b082      	sub	sp, #8
    11ec:	af00      	add	r7, sp, #0
    11ee:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    11f0:	687b      	ldr	r3, [r7, #4]
    11f2:	2280      	movs	r2, #128	; 0x80
    11f4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    11f6:	687b      	ldr	r3, [r7, #4]
    11f8:	2200      	movs	r2, #0
    11fa:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    11fc:	687b      	ldr	r3, [r7, #4]
    11fe:	2201      	movs	r2, #1
    1200:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    1202:	687b      	ldr	r3, [r7, #4]
    1204:	2200      	movs	r2, #0
    1206:	70da      	strb	r2, [r3, #3]
}
    1208:	46c0      	nop			; (mov r8, r8)
    120a:	46bd      	mov	sp, r7
    120c:	b002      	add	sp, #8
    120e:	bd80      	pop	{r7, pc}

00001210 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    1210:	b580      	push	{r7, lr}
    1212:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    1214:	4b05      	ldr	r3, [pc, #20]	; (122c <system_is_debugger_present+0x1c>)
    1216:	789b      	ldrb	r3, [r3, #2]
    1218:	b2db      	uxtb	r3, r3
    121a:	001a      	movs	r2, r3
    121c:	2302      	movs	r3, #2
    121e:	4013      	ands	r3, r2
    1220:	1e5a      	subs	r2, r3, #1
    1222:	4193      	sbcs	r3, r2
    1224:	b2db      	uxtb	r3, r3
}
    1226:	0018      	movs	r0, r3
    1228:	46bd      	mov	sp, r7
    122a:	bd80      	pop	{r7, pc}
    122c:	41002000 	.word	0x41002000

00001230 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    1230:	b580      	push	{r7, lr}
    1232:	b084      	sub	sp, #16
    1234:	af00      	add	r7, sp, #0
    1236:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1238:	687b      	ldr	r3, [r7, #4]
    123a:	681b      	ldr	r3, [r3, #0]
    123c:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    123e:	68fb      	ldr	r3, [r7, #12]
    1240:	69db      	ldr	r3, [r3, #28]
    1242:	1e5a      	subs	r2, r3, #1
    1244:	4193      	sbcs	r3, r2
    1246:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    1248:	0018      	movs	r0, r3
    124a:	46bd      	mov	sp, r7
    124c:	b004      	add	sp, #16
    124e:	bd80      	pop	{r7, pc}

00001250 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    1250:	b580      	push	{r7, lr}
    1252:	b082      	sub	sp, #8
    1254:	af00      	add	r7, sp, #0
    1256:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1258:	46c0      	nop			; (mov r8, r8)
    125a:	687b      	ldr	r3, [r7, #4]
    125c:	0018      	movs	r0, r3
    125e:	4b04      	ldr	r3, [pc, #16]	; (1270 <_usart_wait_for_sync+0x20>)
    1260:	4798      	blx	r3
    1262:	1e03      	subs	r3, r0, #0
    1264:	d1f9      	bne.n	125a <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    1266:	46c0      	nop			; (mov r8, r8)
    1268:	46bd      	mov	sp, r7
    126a:	b002      	add	sp, #8
    126c:	bd80      	pop	{r7, pc}
    126e:	46c0      	nop			; (mov r8, r8)
    1270:	00001231 	.word	0x00001231

00001274 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    1274:	b5b0      	push	{r4, r5, r7, lr}
    1276:	b08c      	sub	sp, #48	; 0x30
    1278:	af02      	add	r7, sp, #8
    127a:	6078      	str	r0, [r7, #4]
    127c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    127e:	687b      	ldr	r3, [r7, #4]
    1280:	681b      	ldr	r3, [r3, #0]
    1282:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1284:	687b      	ldr	r3, [r7, #4]
    1286:	681b      	ldr	r3, [r3, #0]
    1288:	0018      	movs	r0, r3
    128a:	4bab      	ldr	r3, [pc, #684]	; (1538 <_usart_set_config+0x2c4>)
    128c:	4798      	blx	r3
    128e:	0003      	movs	r3, r0
    1290:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1292:	697b      	ldr	r3, [r7, #20]
    1294:	3312      	adds	r3, #18
    1296:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    1298:	2300      	movs	r3, #0
    129a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    129c:	2300      	movs	r3, #0
    129e:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    12a0:	230a      	movs	r3, #10
    12a2:	18fb      	adds	r3, r7, r3
    12a4:	2200      	movs	r2, #0
    12a6:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    12a8:	231f      	movs	r3, #31
    12aa:	18fb      	adds	r3, r7, r3
    12ac:	2200      	movs	r2, #0
    12ae:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    12b0:	231e      	movs	r3, #30
    12b2:	18fb      	adds	r3, r7, r3
    12b4:	2210      	movs	r2, #16
    12b6:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    12b8:	683b      	ldr	r3, [r7, #0]
    12ba:	8a1b      	ldrh	r3, [r3, #16]
    12bc:	2280      	movs	r2, #128	; 0x80
    12be:	01d2      	lsls	r2, r2, #7
    12c0:	4293      	cmp	r3, r2
    12c2:	d01c      	beq.n	12fe <_usart_set_config+0x8a>
    12c4:	2280      	movs	r2, #128	; 0x80
    12c6:	01d2      	lsls	r2, r2, #7
    12c8:	4293      	cmp	r3, r2
    12ca:	dc06      	bgt.n	12da <_usart_set_config+0x66>
    12cc:	2b00      	cmp	r3, #0
    12ce:	d00d      	beq.n	12ec <_usart_set_config+0x78>
    12d0:	2280      	movs	r2, #128	; 0x80
    12d2:	0192      	lsls	r2, r2, #6
    12d4:	4293      	cmp	r3, r2
    12d6:	d024      	beq.n	1322 <_usart_set_config+0xae>
    12d8:	e035      	b.n	1346 <_usart_set_config+0xd2>
    12da:	22c0      	movs	r2, #192	; 0xc0
    12dc:	01d2      	lsls	r2, r2, #7
    12de:	4293      	cmp	r3, r2
    12e0:	d028      	beq.n	1334 <_usart_set_config+0xc0>
    12e2:	2280      	movs	r2, #128	; 0x80
    12e4:	0212      	lsls	r2, r2, #8
    12e6:	4293      	cmp	r3, r2
    12e8:	d012      	beq.n	1310 <_usart_set_config+0x9c>
    12ea:	e02c      	b.n	1346 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    12ec:	231f      	movs	r3, #31
    12ee:	18fb      	adds	r3, r7, r3
    12f0:	2200      	movs	r2, #0
    12f2:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    12f4:	231e      	movs	r3, #30
    12f6:	18fb      	adds	r3, r7, r3
    12f8:	2210      	movs	r2, #16
    12fa:	701a      	strb	r2, [r3, #0]
			break;
    12fc:	e023      	b.n	1346 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    12fe:	231f      	movs	r3, #31
    1300:	18fb      	adds	r3, r7, r3
    1302:	2200      	movs	r2, #0
    1304:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1306:	231e      	movs	r3, #30
    1308:	18fb      	adds	r3, r7, r3
    130a:	2208      	movs	r2, #8
    130c:	701a      	strb	r2, [r3, #0]
			break;
    130e:	e01a      	b.n	1346 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1310:	231f      	movs	r3, #31
    1312:	18fb      	adds	r3, r7, r3
    1314:	2200      	movs	r2, #0
    1316:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    1318:	231e      	movs	r3, #30
    131a:	18fb      	adds	r3, r7, r3
    131c:	2203      	movs	r2, #3
    131e:	701a      	strb	r2, [r3, #0]
			break;
    1320:	e011      	b.n	1346 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1322:	231f      	movs	r3, #31
    1324:	18fb      	adds	r3, r7, r3
    1326:	2201      	movs	r2, #1
    1328:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    132a:	231e      	movs	r3, #30
    132c:	18fb      	adds	r3, r7, r3
    132e:	2210      	movs	r2, #16
    1330:	701a      	strb	r2, [r3, #0]
			break;
    1332:	e008      	b.n	1346 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1334:	231f      	movs	r3, #31
    1336:	18fb      	adds	r3, r7, r3
    1338:	2201      	movs	r2, #1
    133a:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    133c:	231e      	movs	r3, #30
    133e:	18fb      	adds	r3, r7, r3
    1340:	2208      	movs	r2, #8
    1342:	701a      	strb	r2, [r3, #0]
			break;
    1344:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    1346:	683b      	ldr	r3, [r7, #0]
    1348:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    134a:	683b      	ldr	r3, [r7, #0]
    134c:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
    134e:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    1350:	683b      	ldr	r3, [r7, #0]
    1352:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
    1354:	4313      	orrs	r3, r2
		config->sample_rate |
    1356:	683a      	ldr	r2, [r7, #0]
    1358:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
    135a:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    135c:	683a      	ldr	r2, [r7, #0]
    135e:	7e12      	ldrb	r2, [r2, #24]
    1360:	0212      	lsls	r2, r2, #8
		config->sample_rate |
    1362:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1364:	683a      	ldr	r2, [r7, #0]
    1366:	2126      	movs	r1, #38	; 0x26
    1368:	5c52      	ldrb	r2, [r2, r1]
    136a:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
    136c:	4313      	orrs	r3, r2
    136e:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
    1370:	231d      	movs	r3, #29
    1372:	18fb      	adds	r3, r7, r3
    1374:	2200      	movs	r2, #0
    1376:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
    1378:	683b      	ldr	r3, [r7, #0]
    137a:	685b      	ldr	r3, [r3, #4]
    137c:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    137e:	68fb      	ldr	r3, [r7, #12]
    1380:	2b00      	cmp	r3, #0
    1382:	d01e      	beq.n	13c2 <_usart_set_config+0x14e>
    1384:	2280      	movs	r2, #128	; 0x80
    1386:	0552      	lsls	r2, r2, #21
    1388:	4293      	cmp	r3, r2
    138a:	d14f      	bne.n	142c <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    138c:	683b      	ldr	r3, [r7, #0]
    138e:	2227      	movs	r2, #39	; 0x27
    1390:	5c9b      	ldrb	r3, [r3, r2]
    1392:	2201      	movs	r2, #1
    1394:	4053      	eors	r3, r2
    1396:	b2db      	uxtb	r3, r3
    1398:	2b00      	cmp	r3, #0
    139a:	d046      	beq.n	142a <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    139c:	683b      	ldr	r3, [r7, #0]
    139e:	6a1d      	ldr	r5, [r3, #32]
    13a0:	693b      	ldr	r3, [r7, #16]
    13a2:	b2db      	uxtb	r3, r3
    13a4:	0018      	movs	r0, r3
    13a6:	4b65      	ldr	r3, [pc, #404]	; (153c <_usart_set_config+0x2c8>)
    13a8:	4798      	blx	r3
    13aa:	0001      	movs	r1, r0
    13ac:	231d      	movs	r3, #29
    13ae:	18fc      	adds	r4, r7, r3
    13b0:	230a      	movs	r3, #10
    13b2:	18fb      	adds	r3, r7, r3
    13b4:	001a      	movs	r2, r3
    13b6:	0028      	movs	r0, r5
    13b8:	4b61      	ldr	r3, [pc, #388]	; (1540 <_usart_set_config+0x2cc>)
    13ba:	4798      	blx	r3
    13bc:	0003      	movs	r3, r0
    13be:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    13c0:	e033      	b.n	142a <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    13c2:	683b      	ldr	r3, [r7, #0]
    13c4:	2227      	movs	r2, #39	; 0x27
    13c6:	5c9b      	ldrb	r3, [r3, r2]
    13c8:	2b00      	cmp	r3, #0
    13ca:	d014      	beq.n	13f6 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    13cc:	683b      	ldr	r3, [r7, #0]
    13ce:	6a18      	ldr	r0, [r3, #32]
    13d0:	683b      	ldr	r3, [r7, #0]
    13d2:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
    13d4:	231d      	movs	r3, #29
    13d6:	18fc      	adds	r4, r7, r3
    13d8:	231f      	movs	r3, #31
    13da:	18fb      	adds	r3, r7, r3
    13dc:	781d      	ldrb	r5, [r3, #0]
    13de:	230a      	movs	r3, #10
    13e0:	18fa      	adds	r2, r7, r3
    13e2:	231e      	movs	r3, #30
    13e4:	18fb      	adds	r3, r7, r3
    13e6:	781b      	ldrb	r3, [r3, #0]
    13e8:	9300      	str	r3, [sp, #0]
    13ea:	002b      	movs	r3, r5
    13ec:	4d55      	ldr	r5, [pc, #340]	; (1544 <_usart_set_config+0x2d0>)
    13ee:	47a8      	blx	r5
    13f0:	0003      	movs	r3, r0
    13f2:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    13f4:	e01a      	b.n	142c <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
    13f6:	683b      	ldr	r3, [r7, #0]
    13f8:	6a1d      	ldr	r5, [r3, #32]
    13fa:	693b      	ldr	r3, [r7, #16]
    13fc:	b2db      	uxtb	r3, r3
    13fe:	0018      	movs	r0, r3
    1400:	4b4e      	ldr	r3, [pc, #312]	; (153c <_usart_set_config+0x2c8>)
    1402:	4798      	blx	r3
				status_code =
    1404:	231d      	movs	r3, #29
    1406:	18fc      	adds	r4, r7, r3
    1408:	231f      	movs	r3, #31
    140a:	18fb      	adds	r3, r7, r3
    140c:	7819      	ldrb	r1, [r3, #0]
    140e:	230a      	movs	r3, #10
    1410:	18fa      	adds	r2, r7, r3
    1412:	231e      	movs	r3, #30
    1414:	18fb      	adds	r3, r7, r3
    1416:	781b      	ldrb	r3, [r3, #0]
    1418:	9300      	str	r3, [sp, #0]
    141a:	000b      	movs	r3, r1
    141c:	0001      	movs	r1, r0
    141e:	0028      	movs	r0, r5
    1420:	4d48      	ldr	r5, [pc, #288]	; (1544 <_usart_set_config+0x2d0>)
    1422:	47a8      	blx	r5
    1424:	0003      	movs	r3, r0
    1426:	7023      	strb	r3, [r4, #0]
			break;
    1428:	e000      	b.n	142c <_usart_set_config+0x1b8>
			break;
    142a:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    142c:	231d      	movs	r3, #29
    142e:	18fb      	adds	r3, r7, r3
    1430:	781b      	ldrb	r3, [r3, #0]
    1432:	2b00      	cmp	r3, #0
    1434:	d003      	beq.n	143e <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
    1436:	231d      	movs	r3, #29
    1438:	18fb      	adds	r3, r7, r3
    143a:	781b      	ldrb	r3, [r3, #0]
    143c:	e077      	b.n	152e <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    143e:	683b      	ldr	r3, [r7, #0]
    1440:	7e5b      	ldrb	r3, [r3, #25]
    1442:	2b00      	cmp	r3, #0
    1444:	d003      	beq.n	144e <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    1446:	683b      	ldr	r3, [r7, #0]
    1448:	7e9a      	ldrb	r2, [r3, #26]
    144a:	69bb      	ldr	r3, [r7, #24]
    144c:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    144e:	687b      	ldr	r3, [r7, #4]
    1450:	0018      	movs	r0, r3
    1452:	4b3d      	ldr	r3, [pc, #244]	; (1548 <_usart_set_config+0x2d4>)
    1454:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    1456:	230a      	movs	r3, #10
    1458:	18fb      	adds	r3, r7, r3
    145a:	881a      	ldrh	r2, [r3, #0]
    145c:	69bb      	ldr	r3, [r7, #24]
    145e:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    1460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1462:	68fb      	ldr	r3, [r7, #12]
    1464:	4313      	orrs	r3, r2
    1466:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    1468:	683b      	ldr	r3, [r7, #0]
    146a:	2227      	movs	r2, #39	; 0x27
    146c:	5c9b      	ldrb	r3, [r3, r2]
    146e:	2201      	movs	r2, #1
    1470:	4053      	eors	r3, r2
    1472:	b2db      	uxtb	r3, r3
    1474:	2b00      	cmp	r3, #0
    1476:	d003      	beq.n	1480 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    1478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    147a:	2204      	movs	r2, #4
    147c:	4313      	orrs	r3, r2
    147e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1480:	683b      	ldr	r3, [r7, #0]
    1482:	7e5b      	ldrb	r3, [r3, #25]
    1484:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1486:	683b      	ldr	r3, [r7, #0]
    1488:	7f1b      	ldrb	r3, [r3, #28]
    148a:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    148c:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    148e:	683b      	ldr	r3, [r7, #0]
    1490:	7f5b      	ldrb	r3, [r3, #29]
    1492:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1494:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1496:	683b      	ldr	r3, [r7, #0]
    1498:	2124      	movs	r1, #36	; 0x24
    149a:	5c5b      	ldrb	r3, [r3, r1]
    149c:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    149e:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    14a0:	683b      	ldr	r3, [r7, #0]
    14a2:	2125      	movs	r1, #37	; 0x25
    14a4:	5c5b      	ldrb	r3, [r3, r1]
    14a6:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    14a8:	4313      	orrs	r3, r2
	ctrlb =  
    14aa:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
    14ac:	683b      	ldr	r3, [r7, #0]
    14ae:	7a9b      	ldrb	r3, [r3, #10]
    14b0:	001a      	movs	r2, r3
    14b2:	6a3b      	ldr	r3, [r7, #32]
    14b4:	4313      	orrs	r3, r2
    14b6:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
    14b8:	683b      	ldr	r3, [r7, #0]
    14ba:	7adb      	ldrb	r3, [r3, #11]
    14bc:	001a      	movs	r2, r3
    14be:	6a3b      	ldr	r3, [r7, #32]
    14c0:	4313      	orrs	r3, r2
    14c2:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    14c4:	683b      	ldr	r3, [r7, #0]
    14c6:	891b      	ldrh	r3, [r3, #8]
    14c8:	2bff      	cmp	r3, #255	; 0xff
    14ca:	d00b      	beq.n	14e4 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    14cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    14ce:	2280      	movs	r2, #128	; 0x80
    14d0:	0452      	lsls	r2, r2, #17
    14d2:	4313      	orrs	r3, r2
    14d4:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
    14d6:	683b      	ldr	r3, [r7, #0]
    14d8:	891b      	ldrh	r3, [r3, #8]
    14da:	001a      	movs	r2, r3
    14dc:	6a3b      	ldr	r3, [r7, #32]
    14de:	4313      	orrs	r3, r2
    14e0:	623b      	str	r3, [r7, #32]
    14e2:	e008      	b.n	14f6 <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    14e4:	683b      	ldr	r3, [r7, #0]
    14e6:	7edb      	ldrb	r3, [r3, #27]
    14e8:	2b00      	cmp	r3, #0
    14ea:	d004      	beq.n	14f6 <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    14ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    14ee:	2280      	movs	r2, #128	; 0x80
    14f0:	04d2      	lsls	r2, r2, #19
    14f2:	4313      	orrs	r3, r2
    14f4:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    14f6:	683b      	ldr	r3, [r7, #0]
    14f8:	222c      	movs	r2, #44	; 0x2c
    14fa:	5c9b      	ldrb	r3, [r3, r2]
    14fc:	2b00      	cmp	r3, #0
    14fe:	d103      	bne.n	1508 <_usart_set_config+0x294>
    1500:	4b12      	ldr	r3, [pc, #72]	; (154c <_usart_set_config+0x2d8>)
    1502:	4798      	blx	r3
    1504:	1e03      	subs	r3, r0, #0
    1506:	d003      	beq.n	1510 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    150a:	2280      	movs	r2, #128	; 0x80
    150c:	4313      	orrs	r3, r2
    150e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    1510:	687b      	ldr	r3, [r7, #4]
    1512:	0018      	movs	r0, r3
    1514:	4b0c      	ldr	r3, [pc, #48]	; (1548 <_usart_set_config+0x2d4>)
    1516:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    1518:	69bb      	ldr	r3, [r7, #24]
    151a:	6a3a      	ldr	r2, [r7, #32]
    151c:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    151e:	687b      	ldr	r3, [r7, #4]
    1520:	0018      	movs	r0, r3
    1522:	4b09      	ldr	r3, [pc, #36]	; (1548 <_usart_set_config+0x2d4>)
    1524:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    1526:	69bb      	ldr	r3, [r7, #24]
    1528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    152a:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
    152c:	2300      	movs	r3, #0
}
    152e:	0018      	movs	r0, r3
    1530:	46bd      	mov	sp, r7
    1532:	b00a      	add	sp, #40	; 0x28
    1534:	bdb0      	pop	{r4, r5, r7, pc}
    1536:	46c0      	nop			; (mov r8, r8)
    1538:	00001105 	.word	0x00001105
    153c:	00002019 	.word	0x00002019
    1540:	00000c7f 	.word	0x00000c7f
    1544:	00000cfd 	.word	0x00000cfd
    1548:	00001251 	.word	0x00001251
    154c:	00001211 	.word	0x00001211

00001550 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    1550:	b590      	push	{r4, r7, lr}
    1552:	b093      	sub	sp, #76	; 0x4c
    1554:	af00      	add	r7, sp, #0
    1556:	60f8      	str	r0, [r7, #12]
    1558:	60b9      	str	r1, [r7, #8]
    155a:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    155c:	2337      	movs	r3, #55	; 0x37
    155e:	18fb      	adds	r3, r7, r3
    1560:	2200      	movs	r2, #0
    1562:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    1564:	68fb      	ldr	r3, [r7, #12]
    1566:	68ba      	ldr	r2, [r7, #8]
    1568:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    156a:	68fb      	ldr	r3, [r7, #12]
    156c:	681b      	ldr	r3, [r3, #0]
    156e:	633b      	str	r3, [r7, #48]	; 0x30

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1570:	68fb      	ldr	r3, [r7, #12]
    1572:	681b      	ldr	r3, [r3, #0]
    1574:	0018      	movs	r0, r3
    1576:	4b6d      	ldr	r3, [pc, #436]	; (172c <usart_init+0x1dc>)
    1578:	4798      	blx	r3
    157a:	0003      	movs	r3, r0
    157c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t pm_index, gclk_index; 
#if (SAML22) || (SAMC20) 
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30)
	if (sercom_index == 5) {
    157e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1580:	2b05      	cmp	r3, #5
    1582:	d104      	bne.n	158e <usart_init+0x3e>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
    1584:	2301      	movs	r3, #1
    1586:	647b      	str	r3, [r7, #68]	; 0x44
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    1588:	2318      	movs	r3, #24
    158a:	643b      	str	r3, [r7, #64]	; 0x40
    158c:	e004      	b.n	1598 <usart_init+0x48>
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    158e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1590:	647b      	str	r3, [r7, #68]	; 0x44
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1594:	3312      	adds	r3, #18
    1596:	643b      	str	r3, [r7, #64]	; 0x40
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    159a:	681b      	ldr	r3, [r3, #0]
    159c:	2201      	movs	r2, #1
    159e:	4013      	ands	r3, r2
    15a0:	d001      	beq.n	15a6 <usart_init+0x56>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    15a2:	2305      	movs	r3, #5
    15a4:	e0bd      	b.n	1722 <usart_init+0x1d2>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    15a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    15a8:	681b      	ldr	r3, [r3, #0]
    15aa:	2202      	movs	r2, #2
    15ac:	4013      	ands	r3, r2
    15ae:	d001      	beq.n	15b4 <usart_init+0x64>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    15b0:	231c      	movs	r3, #28
    15b2:	e0b6      	b.n	1722 <usart_init+0x1d2>
	}

	/* Turn on module in PM */
#if (SAML21) || (SAMR30)
	if (sercom_index == 5) {
    15b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    15b6:	2b05      	cmp	r3, #5
    15b8:	d108      	bne.n	15cc <usart_init+0x7c>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
    15ba:	2201      	movs	r2, #1
    15bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    15be:	409a      	lsls	r2, r3
    15c0:	0013      	movs	r3, r2
    15c2:	0019      	movs	r1, r3
    15c4:	2003      	movs	r0, #3
    15c6:	4b5a      	ldr	r3, [pc, #360]	; (1730 <usart_init+0x1e0>)
    15c8:	4798      	blx	r3
    15ca:	e007      	b.n	15dc <usart_init+0x8c>
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
    15cc:	2201      	movs	r2, #1
    15ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    15d0:	409a      	lsls	r2, r3
    15d2:	0013      	movs	r3, r2
    15d4:	0019      	movs	r1, r3
    15d6:	2002      	movs	r0, #2
    15d8:	4b55      	ldr	r3, [pc, #340]	; (1730 <usart_init+0x1e0>)
    15da:	4798      	blx	r3
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    15dc:	2328      	movs	r3, #40	; 0x28
    15de:	18fb      	adds	r3, r7, r3
    15e0:	0018      	movs	r0, r3
    15e2:	4b54      	ldr	r3, [pc, #336]	; (1734 <usart_init+0x1e4>)
    15e4:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    15e6:	687b      	ldr	r3, [r7, #4]
    15e8:	222d      	movs	r2, #45	; 0x2d
    15ea:	5c9a      	ldrb	r2, [r3, r2]
    15ec:	2328      	movs	r3, #40	; 0x28
    15ee:	18fb      	adds	r3, r7, r3
    15f0:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    15f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    15f4:	b2db      	uxtb	r3, r3
    15f6:	2228      	movs	r2, #40	; 0x28
    15f8:	18ba      	adds	r2, r7, r2
    15fa:	0011      	movs	r1, r2
    15fc:	0018      	movs	r0, r3
    15fe:	4b4e      	ldr	r3, [pc, #312]	; (1738 <usart_init+0x1e8>)
    1600:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1602:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1604:	b2db      	uxtb	r3, r3
    1606:	0018      	movs	r0, r3
    1608:	4b4c      	ldr	r3, [pc, #304]	; (173c <usart_init+0x1ec>)
    160a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    160c:	687b      	ldr	r3, [r7, #4]
    160e:	222d      	movs	r2, #45	; 0x2d
    1610:	5c9b      	ldrb	r3, [r3, r2]
    1612:	2100      	movs	r1, #0
    1614:	0018      	movs	r0, r3
    1616:	4b4a      	ldr	r3, [pc, #296]	; (1740 <usart_init+0x1f0>)
    1618:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    161a:	687b      	ldr	r3, [r7, #4]
    161c:	7ada      	ldrb	r2, [r3, #11]
    161e:	68fb      	ldr	r3, [r7, #12]
    1620:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    1622:	687b      	ldr	r3, [r7, #4]
    1624:	2224      	movs	r2, #36	; 0x24
    1626:	5c9a      	ldrb	r2, [r3, r2]
    1628:	68fb      	ldr	r3, [r7, #12]
    162a:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    162c:	687b      	ldr	r3, [r7, #4]
    162e:	2225      	movs	r2, #37	; 0x25
    1630:	5c9a      	ldrb	r2, [r3, r2]
    1632:	68fb      	ldr	r3, [r7, #12]
    1634:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    1636:	687b      	ldr	r3, [r7, #4]
    1638:	7eda      	ldrb	r2, [r3, #27]
    163a:	68fb      	ldr	r3, [r7, #12]
    163c:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    163e:	687b      	ldr	r3, [r7, #4]
    1640:	7f1a      	ldrb	r2, [r3, #28]
    1642:	68fb      	ldr	r3, [r7, #12]
    1644:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    1646:	2337      	movs	r3, #55	; 0x37
    1648:	18fc      	adds	r4, r7, r3
    164a:	687a      	ldr	r2, [r7, #4]
    164c:	68fb      	ldr	r3, [r7, #12]
    164e:	0011      	movs	r1, r2
    1650:	0018      	movs	r0, r3
    1652:	4b3c      	ldr	r3, [pc, #240]	; (1744 <usart_init+0x1f4>)
    1654:	4798      	blx	r3
    1656:	0003      	movs	r3, r0
    1658:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    165a:	2337      	movs	r3, #55	; 0x37
    165c:	18fb      	adds	r3, r7, r3
    165e:	781b      	ldrb	r3, [r3, #0]
    1660:	2b00      	cmp	r3, #0
    1662:	d003      	beq.n	166c <usart_init+0x11c>
		return status_code;
    1664:	2337      	movs	r3, #55	; 0x37
    1666:	18fb      	adds	r3, r7, r3
    1668:	781b      	ldrb	r3, [r3, #0]
    166a:	e05a      	b.n	1722 <usart_init+0x1d2>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    166c:	2324      	movs	r3, #36	; 0x24
    166e:	18fb      	adds	r3, r7, r3
    1670:	0018      	movs	r0, r3
    1672:	4b35      	ldr	r3, [pc, #212]	; (1748 <usart_init+0x1f8>)
    1674:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1676:	2324      	movs	r3, #36	; 0x24
    1678:	18fb      	adds	r3, r7, r3
    167a:	2200      	movs	r2, #0
    167c:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    167e:	2324      	movs	r3, #36	; 0x24
    1680:	18fb      	adds	r3, r7, r3
    1682:	2200      	movs	r2, #0
    1684:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    1686:	687b      	ldr	r3, [r7, #4]
    1688:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    168a:	2314      	movs	r3, #20
    168c:	18fb      	adds	r3, r7, r3
    168e:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    1690:	687b      	ldr	r3, [r7, #4]
    1692:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    1694:	2314      	movs	r3, #20
    1696:	18fb      	adds	r3, r7, r3
    1698:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    169a:	687b      	ldr	r3, [r7, #4]
    169c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
    169e:	2314      	movs	r3, #20
    16a0:	18fb      	adds	r3, r7, r3
    16a2:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    16a4:	687b      	ldr	r3, [r7, #4]
    16a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
    16a8:	2314      	movs	r3, #20
    16aa:	18fb      	adds	r3, r7, r3
    16ac:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    16ae:	233f      	movs	r3, #63	; 0x3f
    16b0:	18fb      	adds	r3, r7, r3
    16b2:	2200      	movs	r2, #0
    16b4:	701a      	strb	r2, [r3, #0]
    16b6:	e02c      	b.n	1712 <usart_init+0x1c2>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    16b8:	233f      	movs	r3, #63	; 0x3f
    16ba:	18fb      	adds	r3, r7, r3
    16bc:	781a      	ldrb	r2, [r3, #0]
    16be:	2314      	movs	r3, #20
    16c0:	18fb      	adds	r3, r7, r3
    16c2:	0092      	lsls	r2, r2, #2
    16c4:	58d3      	ldr	r3, [r2, r3]
    16c6:	63bb      	str	r3, [r7, #56]	; 0x38

		if (current_pinmux == PINMUX_DEFAULT) {
    16c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    16ca:	2b00      	cmp	r3, #0
    16cc:	d109      	bne.n	16e2 <usart_init+0x192>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    16ce:	233f      	movs	r3, #63	; 0x3f
    16d0:	18fb      	adds	r3, r7, r3
    16d2:	781a      	ldrb	r2, [r3, #0]
    16d4:	68bb      	ldr	r3, [r7, #8]
    16d6:	0011      	movs	r1, r2
    16d8:	0018      	movs	r0, r3
    16da:	4b1c      	ldr	r3, [pc, #112]	; (174c <usart_init+0x1fc>)
    16dc:	4798      	blx	r3
    16de:	0003      	movs	r3, r0
    16e0:	63bb      	str	r3, [r7, #56]	; 0x38
		}

		if (current_pinmux != PINMUX_UNUSED) {
    16e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    16e4:	3301      	adds	r3, #1
    16e6:	d00d      	beq.n	1704 <usart_init+0x1b4>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    16e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    16ea:	b2da      	uxtb	r2, r3
    16ec:	2324      	movs	r3, #36	; 0x24
    16ee:	18fb      	adds	r3, r7, r3
    16f0:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    16f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    16f4:	0c1b      	lsrs	r3, r3, #16
    16f6:	b2db      	uxtb	r3, r3
    16f8:	2224      	movs	r2, #36	; 0x24
    16fa:	18ba      	adds	r2, r7, r2
    16fc:	0011      	movs	r1, r2
    16fe:	0018      	movs	r0, r3
    1700:	4b13      	ldr	r3, [pc, #76]	; (1750 <usart_init+0x200>)
    1702:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    1704:	233f      	movs	r3, #63	; 0x3f
    1706:	18fb      	adds	r3, r7, r3
    1708:	781a      	ldrb	r2, [r3, #0]
    170a:	233f      	movs	r3, #63	; 0x3f
    170c:	18fb      	adds	r3, r7, r3
    170e:	3201      	adds	r2, #1
    1710:	701a      	strb	r2, [r3, #0]
    1712:	233f      	movs	r3, #63	; 0x3f
    1714:	18fb      	adds	r3, r7, r3
    1716:	781b      	ldrb	r3, [r3, #0]
    1718:	2b03      	cmp	r3, #3
    171a:	d9cd      	bls.n	16b8 <usart_init+0x168>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
    171c:	2337      	movs	r3, #55	; 0x37
    171e:	18fb      	adds	r3, r7, r3
    1720:	781b      	ldrb	r3, [r3, #0]
}
    1722:	0018      	movs	r0, r3
    1724:	46bd      	mov	sp, r7
    1726:	b013      	add	sp, #76	; 0x4c
    1728:	bd90      	pop	{r4, r7, pc}
    172a:	46c0      	nop			; (mov r8, r8)
    172c:	00001105 	.word	0x00001105
    1730:	0000116d 	.word	0x0000116d
    1734:	00001155 	.word	0x00001155
    1738:	00001f29 	.word	0x00001f29
    173c:	00001f69 	.word	0x00001f69
    1740:	00000ebd 	.word	0x00000ebd
    1744:	00001275 	.word	0x00001275
    1748:	000011e9 	.word	0x000011e9
    174c:	00000f49 	.word	0x00000f49
    1750:	000021dd 	.word	0x000021dd

00001754 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    1754:	b580      	push	{r7, lr}
    1756:	b084      	sub	sp, #16
    1758:	af00      	add	r7, sp, #0
    175a:	6078      	str	r0, [r7, #4]
    175c:	000a      	movs	r2, r1
    175e:	1cbb      	adds	r3, r7, #2
    1760:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1762:	687b      	ldr	r3, [r7, #4]
    1764:	681b      	ldr	r3, [r3, #0]
    1766:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1768:	687b      	ldr	r3, [r7, #4]
    176a:	79db      	ldrb	r3, [r3, #7]
    176c:	2201      	movs	r2, #1
    176e:	4053      	eors	r3, r2
    1770:	b2db      	uxtb	r3, r3
    1772:	2b00      	cmp	r3, #0
    1774:	d001      	beq.n	177a <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
    1776:	231c      	movs	r3, #28
    1778:	e019      	b.n	17ae <usart_write_wait+0x5a>
		return STATUS_BUSY;
	}

#else
	/* Check if USART is ready for new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE)) {
    177a:	68fb      	ldr	r3, [r7, #12]
    177c:	7e1b      	ldrb	r3, [r3, #24]
    177e:	b2db      	uxtb	r3, r3
    1780:	001a      	movs	r2, r3
    1782:	2301      	movs	r3, #1
    1784:	4013      	ands	r3, r2
    1786:	d101      	bne.n	178c <usart_write_wait+0x38>
		/* Return error code */
		return STATUS_BUSY;
    1788:	2305      	movs	r3, #5
    178a:	e010      	b.n	17ae <usart_write_wait+0x5a>
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    178c:	687b      	ldr	r3, [r7, #4]
    178e:	0018      	movs	r0, r3
    1790:	4b09      	ldr	r3, [pc, #36]	; (17b8 <usart_write_wait+0x64>)
    1792:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    1794:	68fb      	ldr	r3, [r7, #12]
    1796:	1cba      	adds	r2, r7, #2
    1798:	8812      	ldrh	r2, [r2, #0]
    179a:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    179c:	46c0      	nop			; (mov r8, r8)
    179e:	68fb      	ldr	r3, [r7, #12]
    17a0:	7e1b      	ldrb	r3, [r3, #24]
    17a2:	b2db      	uxtb	r3, r3
    17a4:	001a      	movs	r2, r3
    17a6:	2302      	movs	r3, #2
    17a8:	4013      	ands	r3, r2
    17aa:	d0f8      	beq.n	179e <usart_write_wait+0x4a>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    17ac:	2300      	movs	r3, #0
}
    17ae:	0018      	movs	r0, r3
    17b0:	46bd      	mov	sp, r7
    17b2:	b004      	add	sp, #16
    17b4:	bd80      	pop	{r7, pc}
    17b6:	46c0      	nop			; (mov r8, r8)
    17b8:	00001251 	.word	0x00001251

000017bc <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    17bc:	b580      	push	{r7, lr}
    17be:	b084      	sub	sp, #16
    17c0:	af00      	add	r7, sp, #0
    17c2:	6078      	str	r0, [r7, #4]
    17c4:	6039      	str	r1, [r7, #0]

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    17c6:	687b      	ldr	r3, [r7, #4]
    17c8:	681b      	ldr	r3, [r3, #0]
    17ca:	60fb      	str	r3, [r7, #12]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    17cc:	687b      	ldr	r3, [r7, #4]
    17ce:	799b      	ldrb	r3, [r3, #6]
    17d0:	2201      	movs	r2, #1
    17d2:	4053      	eors	r3, r2
    17d4:	b2db      	uxtb	r3, r3
    17d6:	2b00      	cmp	r3, #0
    17d8:	d001      	beq.n	17de <usart_read_wait+0x22>
		return STATUS_ERR_DENIED;
    17da:	231c      	movs	r3, #28
    17dc:	e057      	b.n	188e <usart_read_wait+0xd2>
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    17de:	68fb      	ldr	r3, [r7, #12]
    17e0:	7e1b      	ldrb	r3, [r3, #24]
    17e2:	b2db      	uxtb	r3, r3
    17e4:	001a      	movs	r2, r3
    17e6:	2304      	movs	r3, #4
    17e8:	4013      	ands	r3, r2
    17ea:	d101      	bne.n	17f0 <usart_read_wait+0x34>
		/* Return error code */
		return STATUS_BUSY;
    17ec:	2305      	movs	r3, #5
    17ee:	e04e      	b.n	188e <usart_read_wait+0xd2>
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    17f0:	687b      	ldr	r3, [r7, #4]
    17f2:	0018      	movs	r0, r3
    17f4:	4b28      	ldr	r3, [pc, #160]	; (1898 <usart_read_wait+0xdc>)
    17f6:	4798      	blx	r3

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    17f8:	68fb      	ldr	r3, [r7, #12]
    17fa:	8b5b      	ldrh	r3, [r3, #26]
    17fc:	b29b      	uxth	r3, r3
    17fe:	b2da      	uxtb	r2, r3
    1800:	230b      	movs	r3, #11
    1802:	18fb      	adds	r3, r7, r3
    1804:	213f      	movs	r1, #63	; 0x3f
    1806:	400a      	ands	r2, r1
    1808:	701a      	strb	r2, [r3, #0]

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    180a:	230b      	movs	r3, #11
    180c:	18fb      	adds	r3, r7, r3
    180e:	781b      	ldrb	r3, [r3, #0]
    1810:	2b00      	cmp	r3, #0
    1812:	d036      	beq.n	1882 <usart_read_wait+0xc6>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    1814:	230b      	movs	r3, #11
    1816:	18fb      	adds	r3, r7, r3
    1818:	781b      	ldrb	r3, [r3, #0]
    181a:	2202      	movs	r2, #2
    181c:	4013      	ands	r3, r2
    181e:	d004      	beq.n	182a <usart_read_wait+0x6e>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1820:	68fb      	ldr	r3, [r7, #12]
    1822:	2202      	movs	r2, #2
    1824:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
    1826:	231a      	movs	r3, #26
    1828:	e031      	b.n	188e <usart_read_wait+0xd2>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    182a:	230b      	movs	r3, #11
    182c:	18fb      	adds	r3, r7, r3
    182e:	781b      	ldrb	r3, [r3, #0]
    1830:	2204      	movs	r2, #4
    1832:	4013      	ands	r3, r2
    1834:	d004      	beq.n	1840 <usart_read_wait+0x84>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1836:	68fb      	ldr	r3, [r7, #12]
    1838:	2204      	movs	r2, #4
    183a:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
    183c:	231e      	movs	r3, #30
    183e:	e026      	b.n	188e <usart_read_wait+0xd2>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1840:	230b      	movs	r3, #11
    1842:	18fb      	adds	r3, r7, r3
    1844:	781b      	ldrb	r3, [r3, #0]
    1846:	2201      	movs	r2, #1
    1848:	4013      	ands	r3, r2
    184a:	d004      	beq.n	1856 <usart_read_wait+0x9a>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    184c:	68fb      	ldr	r3, [r7, #12]
    184e:	2201      	movs	r2, #1
    1850:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
    1852:	2313      	movs	r3, #19
    1854:	e01b      	b.n	188e <usart_read_wait+0xd2>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    1856:	230b      	movs	r3, #11
    1858:	18fb      	adds	r3, r7, r3
    185a:	781b      	ldrb	r3, [r3, #0]
    185c:	2210      	movs	r2, #16
    185e:	4013      	ands	r3, r2
    1860:	d004      	beq.n	186c <usart_read_wait+0xb0>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1862:	68fb      	ldr	r3, [r7, #12]
    1864:	2210      	movs	r2, #16
    1866:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
    1868:	2342      	movs	r3, #66	; 0x42
    186a:	e010      	b.n	188e <usart_read_wait+0xd2>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    186c:	230b      	movs	r3, #11
    186e:	18fb      	adds	r3, r7, r3
    1870:	781b      	ldrb	r3, [r3, #0]
    1872:	2220      	movs	r2, #32
    1874:	4013      	ands	r3, r2
    1876:	d004      	beq.n	1882 <usart_read_wait+0xc6>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1878:	68fb      	ldr	r3, [r7, #12]
    187a:	2220      	movs	r2, #32
    187c:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
    187e:	2341      	movs	r3, #65	; 0x41
    1880:	e005      	b.n	188e <usart_read_wait+0xd2>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    1882:	68fb      	ldr	r3, [r7, #12]
    1884:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    1886:	b29a      	uxth	r2, r3
    1888:	683b      	ldr	r3, [r7, #0]
    188a:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
    188c:	2300      	movs	r3, #0
}
    188e:	0018      	movs	r0, r3
    1890:	46bd      	mov	sp, r7
    1892:	b004      	add	sp, #16
    1894:	bd80      	pop	{r7, pc}
    1896:	46c0      	nop			; (mov r8, r8)
    1898:	00001251 	.word	0x00001251

0000189c <system_gclk_gen_get_config_defaults>:
{
    189c:	b580      	push	{r7, lr}
    189e:	b082      	sub	sp, #8
    18a0:	af00      	add	r7, sp, #0
    18a2:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    18a4:	687b      	ldr	r3, [r7, #4]
    18a6:	2201      	movs	r2, #1
    18a8:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    18aa:	687b      	ldr	r3, [r7, #4]
    18ac:	2200      	movs	r2, #0
    18ae:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    18b0:	687b      	ldr	r3, [r7, #4]
    18b2:	2206      	movs	r2, #6
    18b4:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    18b6:	687b      	ldr	r3, [r7, #4]
    18b8:	2200      	movs	r2, #0
    18ba:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    18bc:	687b      	ldr	r3, [r7, #4]
    18be:	2200      	movs	r2, #0
    18c0:	725a      	strb	r2, [r3, #9]
}
    18c2:	46c0      	nop			; (mov r8, r8)
    18c4:	46bd      	mov	sp, r7
    18c6:	b002      	add	sp, #8
    18c8:	bd80      	pop	{r7, pc}
	...

000018cc <system_main_clock_set_failure_detect>:
{
    18cc:	b580      	push	{r7, lr}
    18ce:	b082      	sub	sp, #8
    18d0:	af00      	add	r7, sp, #0
    18d2:	0002      	movs	r2, r0
    18d4:	1dfb      	adds	r3, r7, #7
    18d6:	701a      	strb	r2, [r3, #0]
	if (enable) {
    18d8:	1dfb      	adds	r3, r7, #7
    18da:	781b      	ldrb	r3, [r3, #0]
    18dc:	2b00      	cmp	r3, #0
    18de:	d008      	beq.n	18f2 <system_main_clock_set_failure_detect+0x26>
		MCLK->CTRLA.reg |=  MCLK_CTRLA_CFDEN;
    18e0:	4a0a      	ldr	r2, [pc, #40]	; (190c <system_main_clock_set_failure_detect+0x40>)
    18e2:	4b0a      	ldr	r3, [pc, #40]	; (190c <system_main_clock_set_failure_detect+0x40>)
    18e4:	781b      	ldrb	r3, [r3, #0]
    18e6:	b2db      	uxtb	r3, r3
    18e8:	2104      	movs	r1, #4
    18ea:	430b      	orrs	r3, r1
    18ec:	b2db      	uxtb	r3, r3
    18ee:	7013      	strb	r3, [r2, #0]
}
    18f0:	e007      	b.n	1902 <system_main_clock_set_failure_detect+0x36>
		MCLK->CTRLA.reg &= ~MCLK_CTRLA_CFDEN;
    18f2:	4a06      	ldr	r2, [pc, #24]	; (190c <system_main_clock_set_failure_detect+0x40>)
    18f4:	4b05      	ldr	r3, [pc, #20]	; (190c <system_main_clock_set_failure_detect+0x40>)
    18f6:	781b      	ldrb	r3, [r3, #0]
    18f8:	b2db      	uxtb	r3, r3
    18fa:	2104      	movs	r1, #4
    18fc:	438b      	bics	r3, r1
    18fe:	b2db      	uxtb	r3, r3
    1900:	7013      	strb	r3, [r2, #0]
}
    1902:	46c0      	nop			; (mov r8, r8)
    1904:	46bd      	mov	sp, r7
    1906:	b002      	add	sp, #8
    1908:	bd80      	pop	{r7, pc}
    190a:	46c0      	nop			; (mov r8, r8)
    190c:	40000400 	.word	0x40000400

00001910 <system_cpu_clock_set_divider>:
{
    1910:	b580      	push	{r7, lr}
    1912:	b082      	sub	sp, #8
    1914:	af00      	add	r7, sp, #0
    1916:	0002      	movs	r2, r0
    1918:	1dfb      	adds	r3, r7, #7
    191a:	701a      	strb	r2, [r3, #0]
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    191c:	4a05      	ldr	r2, [pc, #20]	; (1934 <system_cpu_clock_set_divider+0x24>)
    191e:	1dfb      	adds	r3, r7, #7
    1920:	781b      	ldrb	r3, [r3, #0]
    1922:	2101      	movs	r1, #1
    1924:	4099      	lsls	r1, r3
    1926:	000b      	movs	r3, r1
    1928:	b2db      	uxtb	r3, r3
    192a:	7113      	strb	r3, [r2, #4]
}
    192c:	46c0      	nop			; (mov r8, r8)
    192e:	46bd      	mov	sp, r7
    1930:	b002      	add	sp, #8
    1932:	bd80      	pop	{r7, pc}
    1934:	40000400 	.word	0x40000400

00001938 <system_low_power_clock_set_divider>:
{
    1938:	b580      	push	{r7, lr}
    193a:	b082      	sub	sp, #8
    193c:	af00      	add	r7, sp, #0
    193e:	0002      	movs	r2, r0
    1940:	1dfb      	adds	r3, r7, #7
    1942:	701a      	strb	r2, [r3, #0]
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
    1944:	4a05      	ldr	r2, [pc, #20]	; (195c <system_low_power_clock_set_divider+0x24>)
    1946:	1dfb      	adds	r3, r7, #7
    1948:	781b      	ldrb	r3, [r3, #0]
    194a:	2101      	movs	r1, #1
    194c:	4099      	lsls	r1, r3
    194e:	000b      	movs	r3, r1
    1950:	b2db      	uxtb	r3, r3
    1952:	7153      	strb	r3, [r2, #5]
}
    1954:	46c0      	nop			; (mov r8, r8)
    1956:	46bd      	mov	sp, r7
    1958:	b002      	add	sp, #8
    195a:	bd80      	pop	{r7, pc}
    195c:	40000400 	.word	0x40000400

00001960 <system_backup_clock_set_divider>:
{
    1960:	b580      	push	{r7, lr}
    1962:	b082      	sub	sp, #8
    1964:	af00      	add	r7, sp, #0
    1966:	0002      	movs	r2, r0
    1968:	1dfb      	adds	r3, r7, #7
    196a:	701a      	strb	r2, [r3, #0]
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
    196c:	4a05      	ldr	r2, [pc, #20]	; (1984 <system_backup_clock_set_divider+0x24>)
    196e:	1dfb      	adds	r3, r7, #7
    1970:	781b      	ldrb	r3, [r3, #0]
    1972:	2101      	movs	r1, #1
    1974:	4099      	lsls	r1, r3
    1976:	000b      	movs	r3, r1
    1978:	b2db      	uxtb	r3, r3
    197a:	7193      	strb	r3, [r2, #6]
}
    197c:	46c0      	nop			; (mov r8, r8)
    197e:	46bd      	mov	sp, r7
    1980:	b002      	add	sp, #8
    1982:	bd80      	pop	{r7, pc}
    1984:	40000400 	.word	0x40000400

00001988 <system_cpu_clock_get_hz>:
{
    1988:	b580      	push	{r7, lr}
    198a:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
    198c:	2000      	movs	r0, #0
    198e:	4b07      	ldr	r3, [pc, #28]	; (19ac <system_cpu_clock_get_hz+0x24>)
    1990:	4798      	blx	r3
    1992:	0002      	movs	r2, r0
    1994:	4b06      	ldr	r3, [pc, #24]	; (19b0 <system_cpu_clock_get_hz+0x28>)
    1996:	791b      	ldrb	r3, [r3, #4]
    1998:	b2db      	uxtb	r3, r3
    199a:	0019      	movs	r1, r3
    199c:	4b05      	ldr	r3, [pc, #20]	; (19b4 <system_cpu_clock_get_hz+0x2c>)
    199e:	0010      	movs	r0, r2
    19a0:	4798      	blx	r3
    19a2:	0003      	movs	r3, r0
}
    19a4:	0018      	movs	r0, r3
    19a6:	46bd      	mov	sp, r7
    19a8:	bd80      	pop	{r7, pc}
    19aa:	46c0      	nop			; (mov r8, r8)
    19ac:	00001e69 	.word	0x00001e69
    19b0:	40000400 	.word	0x40000400
    19b4:	000027d9 	.word	0x000027d9

000019b8 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    19b8:	b580      	push	{r7, lr}
    19ba:	b082      	sub	sp, #8
    19bc:	af00      	add	r7, sp, #0
    19be:	0002      	movs	r2, r0
    19c0:	1dfb      	adds	r3, r7, #7
    19c2:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    19c4:	4a08      	ldr	r2, [pc, #32]	; (19e8 <system_flash_set_waitstates+0x30>)
    19c6:	1dfb      	adds	r3, r7, #7
    19c8:	781b      	ldrb	r3, [r3, #0]
    19ca:	210f      	movs	r1, #15
    19cc:	400b      	ands	r3, r1
    19ce:	b2d9      	uxtb	r1, r3
    19d0:	6853      	ldr	r3, [r2, #4]
    19d2:	200f      	movs	r0, #15
    19d4:	4001      	ands	r1, r0
    19d6:	0049      	lsls	r1, r1, #1
    19d8:	201e      	movs	r0, #30
    19da:	4383      	bics	r3, r0
    19dc:	430b      	orrs	r3, r1
    19de:	6053      	str	r3, [r2, #4]
}
    19e0:	46c0      	nop			; (mov r8, r8)
    19e2:	46bd      	mov	sp, r7
    19e4:	b002      	add	sp, #8
    19e6:	bd80      	pop	{r7, pc}
    19e8:	41004000 	.word	0x41004000

000019ec <system_switch_performance_level>:
 * \retval STATUS_ERR_INVALID_ARG  Invalid parameter
 * \retval STATUS_OK               Successfully
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{
    19ec:	b580      	push	{r7, lr}
    19ee:	b082      	sub	sp, #8
    19f0:	af00      	add	r7, sp, #0
    19f2:	0002      	movs	r2, r0
    19f4:	1dfb      	adds	r3, r7, #7
    19f6:	701a      	strb	r2, [r3, #0]

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    19f8:	2380      	movs	r3, #128	; 0x80
    19fa:	05db      	lsls	r3, r3, #23
    19fc:	789b      	ldrb	r3, [r3, #2]
    19fe:	b2db      	uxtb	r3, r3
    1a00:	1dfa      	adds	r2, r7, #7
    1a02:	7812      	ldrb	r2, [r2, #0]
    1a04:	429a      	cmp	r2, r3
    1a06:	d101      	bne.n	1a0c <system_switch_performance_level+0x20>
		return STATUS_OK;
    1a08:	2300      	movs	r3, #0
    1a0a:	e010      	b.n	1a2e <system_switch_performance_level+0x42>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    1a0c:	2380      	movs	r3, #128	; 0x80
    1a0e:	05db      	lsls	r3, r3, #23
    1a10:	2201      	movs	r2, #1
    1a12:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    1a14:	2380      	movs	r3, #128	; 0x80
    1a16:	05db      	lsls	r3, r3, #23
    1a18:	1dfa      	adds	r2, r7, #7
    1a1a:	7812      	ldrb	r2, [r2, #0]
    1a1c:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    1a1e:	46c0      	nop			; (mov r8, r8)
    1a20:	2380      	movs	r3, #128	; 0x80
    1a22:	05db      	lsls	r3, r3, #23
    1a24:	799b      	ldrb	r3, [r3, #6]
    1a26:	b2db      	uxtb	r3, r3
    1a28:	2b00      	cmp	r3, #0
    1a2a:	d0f9      	beq.n	1a20 <system_switch_performance_level+0x34>
		;
	}
	return STATUS_OK;
    1a2c:	2300      	movs	r3, #0
}
    1a2e:	0018      	movs	r0, r3
    1a30:	46bd      	mov	sp, r7
    1a32:	b002      	add	sp, #8
    1a34:	bd80      	pop	{r7, pc}
	...

00001a38 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    1a38:	b580      	push	{r7, lr}
    1a3a:	af00      	add	r7, sp, #0
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    1a3c:	46c0      	nop			; (mov r8, r8)
    1a3e:	4b04      	ldr	r3, [pc, #16]	; (1a50 <_system_dfll_wait_for_sync+0x18>)
    1a40:	68da      	ldr	r2, [r3, #12]
    1a42:	2380      	movs	r3, #128	; 0x80
    1a44:	005b      	lsls	r3, r3, #1
    1a46:	4013      	ands	r3, r2
    1a48:	d0f9      	beq.n	1a3e <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    1a4a:	46c0      	nop			; (mov r8, r8)
    1a4c:	46bd      	mov	sp, r7
    1a4e:	bd80      	pop	{r7, pc}
    1a50:	40000c00 	.word	0x40000c00

00001a54 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1a54:	b580      	push	{r7, lr}
    1a56:	b082      	sub	sp, #8
    1a58:	af00      	add	r7, sp, #0
    1a5a:	0002      	movs	r2, r0
    1a5c:	1dfb      	adds	r3, r7, #7
    1a5e:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    1a60:	1dfb      	adds	r3, r7, #7
    1a62:	781b      	ldrb	r3, [r3, #0]
    1a64:	2b08      	cmp	r3, #8
    1a66:	d841      	bhi.n	1aec <system_clock_source_get_hz+0x98>
    1a68:	009a      	lsls	r2, r3, #2
    1a6a:	4b23      	ldr	r3, [pc, #140]	; (1af8 <system_clock_source_get_hz+0xa4>)
    1a6c:	18d3      	adds	r3, r2, r3
    1a6e:	681b      	ldr	r3, [r3, #0]
    1a70:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    1a72:	4b22      	ldr	r3, [pc, #136]	; (1afc <system_clock_source_get_hz+0xa8>)
    1a74:	691b      	ldr	r3, [r3, #16]
    1a76:	e03a      	b.n	1aee <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC16M:
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
    1a78:	4b21      	ldr	r3, [pc, #132]	; (1b00 <system_clock_source_get_hz+0xac>)
    1a7a:	7d1b      	ldrb	r3, [r3, #20]
    1a7c:	071b      	lsls	r3, r3, #28
    1a7e:	0f9b      	lsrs	r3, r3, #30
    1a80:	b2db      	uxtb	r3, r3
    1a82:	3301      	adds	r3, #1
    1a84:	001a      	movs	r2, r3
    1a86:	4b1f      	ldr	r3, [pc, #124]	; (1b04 <system_clock_source_get_hz+0xb0>)
    1a88:	4353      	muls	r3, r2
    1a8a:	e030      	b.n	1aee <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    1a8c:	2380      	movs	r3, #128	; 0x80
    1a8e:	021b      	lsls	r3, r3, #8
    1a90:	e02d      	b.n	1aee <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    1a92:	2380      	movs	r3, #128	; 0x80
    1a94:	021b      	lsls	r3, r3, #8
    1a96:	e02a      	b.n	1aee <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    1a98:	4b18      	ldr	r3, [pc, #96]	; (1afc <system_clock_source_get_hz+0xa8>)
    1a9a:	695b      	ldr	r3, [r3, #20]
    1a9c:	e027      	b.n	1aee <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    1a9e:	4b17      	ldr	r3, [pc, #92]	; (1afc <system_clock_source_get_hz+0xa8>)
    1aa0:	681b      	ldr	r3, [r3, #0]
    1aa2:	2202      	movs	r2, #2
    1aa4:	4013      	ands	r3, r2
    1aa6:	d101      	bne.n	1aac <system_clock_source_get_hz+0x58>
			return 0;
    1aa8:	2300      	movs	r3, #0
    1aaa:	e020      	b.n	1aee <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    1aac:	4b16      	ldr	r3, [pc, #88]	; (1b08 <system_clock_source_get_hz+0xb4>)
    1aae:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
    1ab0:	4b12      	ldr	r3, [pc, #72]	; (1afc <system_clock_source_get_hz+0xa8>)
    1ab2:	681b      	ldr	r3, [r3, #0]
    1ab4:	2204      	movs	r2, #4
    1ab6:	4013      	ands	r3, r2
    1ab8:	d009      	beq.n	1ace <system_clock_source_get_hz+0x7a>
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    1aba:	2000      	movs	r0, #0
    1abc:	4b13      	ldr	r3, [pc, #76]	; (1b0c <system_clock_source_get_hz+0xb8>)
    1abe:	4798      	blx	r3
    1ac0:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    1ac2:	4b0e      	ldr	r3, [pc, #56]	; (1afc <system_clock_source_get_hz+0xa8>)
    1ac4:	689b      	ldr	r3, [r3, #8]
    1ac6:	041b      	lsls	r3, r3, #16
    1ac8:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    1aca:	4353      	muls	r3, r2
    1acc:	e00f      	b.n	1aee <system_clock_source_get_hz+0x9a>
		}

		return 48000000UL;
    1ace:	4b10      	ldr	r3, [pc, #64]	; (1b10 <system_clock_source_get_hz+0xbc>)
    1ad0:	e00d      	b.n	1aee <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    1ad2:	4a0b      	ldr	r2, [pc, #44]	; (1b00 <system_clock_source_get_hz+0xac>)
    1ad4:	2328      	movs	r3, #40	; 0x28
    1ad6:	5cd3      	ldrb	r3, [r2, r3]
    1ad8:	b2db      	uxtb	r3, r3
    1ada:	001a      	movs	r2, r3
    1adc:	2302      	movs	r3, #2
    1ade:	4013      	ands	r3, r2
    1ae0:	d101      	bne.n	1ae6 <system_clock_source_get_hz+0x92>
			return 0;
    1ae2:	2300      	movs	r3, #0
    1ae4:	e003      	b.n	1aee <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
    1ae6:	4b05      	ldr	r3, [pc, #20]	; (1afc <system_clock_source_get_hz+0xa8>)
    1ae8:	68db      	ldr	r3, [r3, #12]
    1aea:	e000      	b.n	1aee <system_clock_source_get_hz+0x9a>

	default:
		return 0;
    1aec:	2300      	movs	r3, #0
	}
}
    1aee:	0018      	movs	r0, r3
    1af0:	46bd      	mov	sp, r7
    1af2:	b002      	add	sp, #8
    1af4:	bd80      	pop	{r7, pc}
    1af6:	46c0      	nop			; (mov r8, r8)
    1af8:	00003a80 	.word	0x00003a80
    1afc:	20000490 	.word	0x20000490
    1b00:	40000c00 	.word	0x40000c00
    1b04:	003d0900 	.word	0x003d0900
    1b08:	00001a39 	.word	0x00001a39
    1b0c:	00002019 	.word	0x00002019
    1b10:	02dc6c00 	.word	0x02dc6c00

00001b14 <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1b14:	b580      	push	{r7, lr}
    1b16:	b0a0      	sub	sp, #128	; 0x80
    1b18:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
    1b1a:	4b26      	ldr	r3, [pc, #152]	; (1bb4 <system_clock_init+0xa0>)
    1b1c:	2280      	movs	r2, #128	; 0x80
    1b1e:	0052      	lsls	r2, r2, #1
    1b20:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
    1b22:	4b25      	ldr	r3, [pc, #148]	; (1bb8 <system_clock_init+0xa4>)
    1b24:	2203      	movs	r2, #3
    1b26:	609a      	str	r2, [r3, #8]

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    1b28:	2000      	movs	r0, #0
    1b2a:	4b24      	ldr	r3, [pc, #144]	; (1bbc <system_clock_init+0xa8>)
    1b2c:	4798      	blx	r3

	/*  Switch to PL2 to be sure configuration of GCLK0 is safe */
	system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_2);
    1b2e:	2002      	movs	r0, #2
    1b30:	4b23      	ldr	r3, [pc, #140]	; (1bc0 <system_clock_init+0xac>)
    1b32:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
#endif

	/* OSC16M */
	if (CONF_CLOCK_OSC16M_FREQ_SEL == SYSTEM_OSC16M_4M){
		OSCCTRL->OSC16MCTRL.bit.ONDEMAND = CONF_CLOCK_OSC16M_ON_DEMAND ;
    1b34:	4a1f      	ldr	r2, [pc, #124]	; (1bb4 <system_clock_init+0xa0>)
    1b36:	7d13      	ldrb	r3, [r2, #20]
    1b38:	2180      	movs	r1, #128	; 0x80
    1b3a:	4249      	negs	r1, r1
    1b3c:	430b      	orrs	r3, r1
    1b3e:	7513      	strb	r3, [r2, #20]
		OSCCTRL->OSC16MCTRL.bit.RUNSTDBY = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
    1b40:	4a1c      	ldr	r2, [pc, #112]	; (1bb4 <system_clock_init+0xa0>)
    1b42:	7d13      	ldrb	r3, [r2, #20]
    1b44:	2140      	movs	r1, #64	; 0x40
    1b46:	438b      	bics	r3, r1
    1b48:	7513      	strb	r3, [r2, #20]
	system_clock_source_dfll_set_config(&dfll_conf);
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1b4a:	4b1e      	ldr	r3, [pc, #120]	; (1bc4 <system_clock_init+0xb0>)
    1b4c:	4798      	blx	r3
	}

#  endif

	/* CPU and BUS clocks */
	system_backup_clock_set_divider(CONF_CLOCK_BACKUP_DIVIDER);
    1b4e:	2000      	movs	r0, #0
    1b50:	4b1d      	ldr	r3, [pc, #116]	; (1bc8 <system_clock_init+0xb4>)
    1b52:	4798      	blx	r3
	system_low_power_clock_set_divider(CONF_CLOCK_LOW_POWER_DIVIDER);
    1b54:	2000      	movs	r0, #0
    1b56:	4b1d      	ldr	r3, [pc, #116]	; (1bcc <system_clock_init+0xb8>)
    1b58:	4798      	blx	r3
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    1b5a:	2000      	movs	r0, #0
    1b5c:	4b1c      	ldr	r3, [pc, #112]	; (1bd0 <system_clock_init+0xbc>)
    1b5e:	4798      	blx	r3
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);
    1b60:	2000      	movs	r0, #0
    1b62:	4b1c      	ldr	r3, [pc, #112]	; (1bd4 <system_clock_init+0xc0>)
    1b64:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1b66:	1d3b      	adds	r3, r7, #4
    1b68:	0018      	movs	r0, r3
    1b6a:	4b1b      	ldr	r3, [pc, #108]	; (1bd8 <system_clock_init+0xc4>)
    1b6c:	4798      	blx	r3
    1b6e:	1d3b      	adds	r3, r7, #4
    1b70:	2206      	movs	r2, #6
    1b72:	701a      	strb	r2, [r3, #0]
    1b74:	1d3b      	adds	r3, r7, #4
    1b76:	2201      	movs	r2, #1
    1b78:	605a      	str	r2, [r3, #4]
    1b7a:	1d3b      	adds	r3, r7, #4
    1b7c:	2200      	movs	r2, #0
    1b7e:	721a      	strb	r2, [r3, #8]
    1b80:	1d3b      	adds	r3, r7, #4
    1b82:	2200      	movs	r2, #0
    1b84:	725a      	strb	r2, [r3, #9]
    1b86:	1d3b      	adds	r3, r7, #4
    1b88:	0019      	movs	r1, r3
    1b8a:	2000      	movs	r0, #0
    1b8c:	4b13      	ldr	r3, [pc, #76]	; (1bdc <system_clock_init+0xc8>)
    1b8e:	4798      	blx	r3
    1b90:	2000      	movs	r0, #0
    1b92:	4b13      	ldr	r3, [pc, #76]	; (1be0 <system_clock_init+0xcc>)
    1b94:	4798      	blx	r3
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
    1b96:	4b13      	ldr	r3, [pc, #76]	; (1be4 <system_clock_init+0xd0>)
    1b98:	4798      	blx	r3
    1b9a:	0003      	movs	r3, r0
    1b9c:	67fb      	str	r3, [r7, #124]	; 0x7c
	if (cpu_freq <= 12000000) {
    1b9e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    1ba0:	4a11      	ldr	r2, [pc, #68]	; (1be8 <system_clock_init+0xd4>)
    1ba2:	4293      	cmp	r3, r2
    1ba4:	d802      	bhi.n	1bac <system_clock_init+0x98>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
    1ba6:	2000      	movs	r0, #0
    1ba8:	4b05      	ldr	r3, [pc, #20]	; (1bc0 <system_clock_init+0xac>)
    1baa:	4798      	blx	r3
	}
}
    1bac:	46c0      	nop			; (mov r8, r8)
    1bae:	46bd      	mov	sp, r7
    1bb0:	b020      	add	sp, #128	; 0x80
    1bb2:	bd80      	pop	{r7, pc}
    1bb4:	40000c00 	.word	0x40000c00
    1bb8:	40001400 	.word	0x40001400
    1bbc:	000019b9 	.word	0x000019b9
    1bc0:	000019ed 	.word	0x000019ed
    1bc4:	00001ccd 	.word	0x00001ccd
    1bc8:	00001961 	.word	0x00001961
    1bcc:	00001939 	.word	0x00001939
    1bd0:	00001911 	.word	0x00001911
    1bd4:	000018cd 	.word	0x000018cd
    1bd8:	0000189d 	.word	0x0000189d
    1bdc:	00001cfd 	.word	0x00001cfd
    1be0:	00001e0d 	.word	0x00001e0d
    1be4:	00001989 	.word	0x00001989
    1be8:	00b71b00 	.word	0x00b71b00

00001bec <system_apb_clock_set_mask>:
{
    1bec:	b580      	push	{r7, lr}
    1bee:	b082      	sub	sp, #8
    1bf0:	af00      	add	r7, sp, #0
    1bf2:	0002      	movs	r2, r0
    1bf4:	6039      	str	r1, [r7, #0]
    1bf6:	1dfb      	adds	r3, r7, #7
    1bf8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    1bfa:	1dfb      	adds	r3, r7, #7
    1bfc:	781b      	ldrb	r3, [r3, #0]
    1bfe:	2b04      	cmp	r3, #4
    1c00:	d827      	bhi.n	1c52 <system_apb_clock_set_mask+0x66>
    1c02:	009a      	lsls	r2, r3, #2
    1c04:	4b16      	ldr	r3, [pc, #88]	; (1c60 <system_apb_clock_set_mask+0x74>)
    1c06:	18d3      	adds	r3, r2, r3
    1c08:	681b      	ldr	r3, [r3, #0]
    1c0a:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
    1c0c:	4b15      	ldr	r3, [pc, #84]	; (1c64 <system_apb_clock_set_mask+0x78>)
    1c0e:	4a15      	ldr	r2, [pc, #84]	; (1c64 <system_apb_clock_set_mask+0x78>)
    1c10:	6951      	ldr	r1, [r2, #20]
    1c12:	683a      	ldr	r2, [r7, #0]
    1c14:	430a      	orrs	r2, r1
    1c16:	615a      	str	r2, [r3, #20]
			break;
    1c18:	e01d      	b.n	1c56 <system_apb_clock_set_mask+0x6a>
			MCLK->APBBMASK.reg |= mask;
    1c1a:	4b12      	ldr	r3, [pc, #72]	; (1c64 <system_apb_clock_set_mask+0x78>)
    1c1c:	4a11      	ldr	r2, [pc, #68]	; (1c64 <system_apb_clock_set_mask+0x78>)
    1c1e:	6991      	ldr	r1, [r2, #24]
    1c20:	683a      	ldr	r2, [r7, #0]
    1c22:	430a      	orrs	r2, r1
    1c24:	619a      	str	r2, [r3, #24]
			break;
    1c26:	e016      	b.n	1c56 <system_apb_clock_set_mask+0x6a>
			MCLK->APBCMASK.reg |= mask;
    1c28:	4b0e      	ldr	r3, [pc, #56]	; (1c64 <system_apb_clock_set_mask+0x78>)
    1c2a:	4a0e      	ldr	r2, [pc, #56]	; (1c64 <system_apb_clock_set_mask+0x78>)
    1c2c:	69d1      	ldr	r1, [r2, #28]
    1c2e:	683a      	ldr	r2, [r7, #0]
    1c30:	430a      	orrs	r2, r1
    1c32:	61da      	str	r2, [r3, #28]
			break;
    1c34:	e00f      	b.n	1c56 <system_apb_clock_set_mask+0x6a>
			MCLK->APBDMASK.reg |= mask;
    1c36:	4b0b      	ldr	r3, [pc, #44]	; (1c64 <system_apb_clock_set_mask+0x78>)
    1c38:	4a0a      	ldr	r2, [pc, #40]	; (1c64 <system_apb_clock_set_mask+0x78>)
    1c3a:	6a11      	ldr	r1, [r2, #32]
    1c3c:	683a      	ldr	r2, [r7, #0]
    1c3e:	430a      	orrs	r2, r1
    1c40:	621a      	str	r2, [r3, #32]
			break;
    1c42:	e008      	b.n	1c56 <system_apb_clock_set_mask+0x6a>
			MCLK->APBEMASK.reg |= mask;
    1c44:	4b07      	ldr	r3, [pc, #28]	; (1c64 <system_apb_clock_set_mask+0x78>)
    1c46:	4a07      	ldr	r2, [pc, #28]	; (1c64 <system_apb_clock_set_mask+0x78>)
    1c48:	6a51      	ldr	r1, [r2, #36]	; 0x24
    1c4a:	683a      	ldr	r2, [r7, #0]
    1c4c:	430a      	orrs	r2, r1
    1c4e:	625a      	str	r2, [r3, #36]	; 0x24
			break;
    1c50:	e001      	b.n	1c56 <system_apb_clock_set_mask+0x6a>
			return STATUS_ERR_INVALID_ARG;
    1c52:	2317      	movs	r3, #23
    1c54:	e000      	b.n	1c58 <system_apb_clock_set_mask+0x6c>
	return STATUS_OK;
    1c56:	2300      	movs	r3, #0
}
    1c58:	0018      	movs	r0, r3
    1c5a:	46bd      	mov	sp, r7
    1c5c:	b002      	add	sp, #8
    1c5e:	bd80      	pop	{r7, pc}
    1c60:	00003aa4 	.word	0x00003aa4
    1c64:	40000400 	.word	0x40000400

00001c68 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    1c68:	b580      	push	{r7, lr}
    1c6a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    1c6c:	4b02      	ldr	r3, [pc, #8]	; (1c78 <system_interrupt_enter_critical_section+0x10>)
    1c6e:	4798      	blx	r3
}
    1c70:	46c0      	nop			; (mov r8, r8)
    1c72:	46bd      	mov	sp, r7
    1c74:	bd80      	pop	{r7, pc}
    1c76:	46c0      	nop			; (mov r8, r8)
    1c78:	00000921 	.word	0x00000921

00001c7c <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    1c7c:	b580      	push	{r7, lr}
    1c7e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    1c80:	4b02      	ldr	r3, [pc, #8]	; (1c8c <system_interrupt_leave_critical_section+0x10>)
    1c82:	4798      	blx	r3
}
    1c84:	46c0      	nop			; (mov r8, r8)
    1c86:	46bd      	mov	sp, r7
    1c88:	bd80      	pop	{r7, pc}
    1c8a:	46c0      	nop			; (mov r8, r8)
    1c8c:	00000975 	.word	0x00000975

00001c90 <system_gclk_is_syncing>:
  *
  * \retval false if the module has completed synchronization
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{
    1c90:	b580      	push	{r7, lr}
    1c92:	b082      	sub	sp, #8
    1c94:	af00      	add	r7, sp, #0
    1c96:	0002      	movs	r2, r0
    1c98:	1dfb      	adds	r3, r7, #7
    1c9a:	701a      	strb	r2, [r3, #0]

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    1c9c:	4b09      	ldr	r3, [pc, #36]	; (1cc4 <system_gclk_is_syncing+0x34>)
    1c9e:	685b      	ldr	r3, [r3, #4]
    1ca0:	1dfa      	adds	r2, r7, #7
    1ca2:	7812      	ldrb	r2, [r2, #0]
    1ca4:	2101      	movs	r1, #1
    1ca6:	4091      	lsls	r1, r2
    1ca8:	000a      	movs	r2, r1
    1caa:	0092      	lsls	r2, r2, #2
    1cac:	4013      	ands	r3, r2
    1cae:	4a06      	ldr	r2, [pc, #24]	; (1cc8 <system_gclk_is_syncing+0x38>)
    1cb0:	4013      	ands	r3, r2
    1cb2:	d001      	beq.n	1cb8 <system_gclk_is_syncing+0x28>
		 return true;
    1cb4:	2301      	movs	r3, #1
    1cb6:	e000      	b.n	1cba <system_gclk_is_syncing+0x2a>
	}

	 return false;
    1cb8:	2300      	movs	r3, #0
}
    1cba:	0018      	movs	r0, r3
    1cbc:	46bd      	mov	sp, r7
    1cbe:	b002      	add	sp, #8
    1cc0:	bd80      	pop	{r7, pc}
    1cc2:	46c0      	nop			; (mov r8, r8)
    1cc4:	40001800 	.word	0x40001800
    1cc8:	000007fc 	.word	0x000007fc

00001ccc <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    1ccc:	b580      	push	{r7, lr}
    1cce:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);
    1cd0:	2140      	movs	r1, #64	; 0x40
    1cd2:	2000      	movs	r0, #0
    1cd4:	4b07      	ldr	r3, [pc, #28]	; (1cf4 <system_gclk_init+0x28>)
    1cd6:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    1cd8:	4b07      	ldr	r3, [pc, #28]	; (1cf8 <system_gclk_init+0x2c>)
    1cda:	2201      	movs	r2, #1
    1cdc:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    1cde:	46c0      	nop			; (mov r8, r8)
    1ce0:	4b05      	ldr	r3, [pc, #20]	; (1cf8 <system_gclk_init+0x2c>)
    1ce2:	781b      	ldrb	r3, [r3, #0]
    1ce4:	b2db      	uxtb	r3, r3
    1ce6:	001a      	movs	r2, r3
    1ce8:	2301      	movs	r3, #1
    1cea:	4013      	ands	r3, r2
    1cec:	d1f8      	bne.n	1ce0 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    1cee:	46c0      	nop			; (mov r8, r8)
    1cf0:	46bd      	mov	sp, r7
    1cf2:	bd80      	pop	{r7, pc}
    1cf4:	00001bed 	.word	0x00001bed
    1cf8:	40001800 	.word	0x40001800

00001cfc <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1cfc:	b580      	push	{r7, lr}
    1cfe:	b086      	sub	sp, #24
    1d00:	af00      	add	r7, sp, #0
    1d02:	0002      	movs	r2, r0
    1d04:	6039      	str	r1, [r7, #0]
    1d06:	1dfb      	adds	r3, r7, #7
    1d08:	701a      	strb	r2, [r3, #0]
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1d0a:	683b      	ldr	r3, [r7, #0]
    1d0c:	781b      	ldrb	r3, [r3, #0]
    1d0e:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1d10:	683b      	ldr	r3, [r7, #0]
    1d12:	785b      	ldrb	r3, [r3, #1]
    1d14:	2b00      	cmp	r3, #0
    1d16:	d004      	beq.n	1d22 <system_gclk_gen_set_config+0x26>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1d18:	697b      	ldr	r3, [r7, #20]
    1d1a:	2280      	movs	r2, #128	; 0x80
    1d1c:	00d2      	lsls	r2, r2, #3
    1d1e:	4313      	orrs	r3, r2
    1d20:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1d22:	683b      	ldr	r3, [r7, #0]
    1d24:	7a5b      	ldrb	r3, [r3, #9]
    1d26:	2b00      	cmp	r3, #0
    1d28:	d004      	beq.n	1d34 <system_gclk_gen_set_config+0x38>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1d2a:	697b      	ldr	r3, [r7, #20]
    1d2c:	2280      	movs	r2, #128	; 0x80
    1d2e:	0112      	lsls	r2, r2, #4
    1d30:	4313      	orrs	r3, r2
    1d32:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1d34:	683b      	ldr	r3, [r7, #0]
    1d36:	685b      	ldr	r3, [r3, #4]
    1d38:	2b01      	cmp	r3, #1
    1d3a:	d92c      	bls.n	1d96 <system_gclk_gen_set_config+0x9a>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1d3c:	683b      	ldr	r3, [r7, #0]
    1d3e:	685a      	ldr	r2, [r3, #4]
    1d40:	683b      	ldr	r3, [r7, #0]
    1d42:	685b      	ldr	r3, [r3, #4]
    1d44:	3b01      	subs	r3, #1
    1d46:	4013      	ands	r3, r2
    1d48:	d11a      	bne.n	1d80 <system_gclk_gen_set_config+0x84>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    1d4a:	2300      	movs	r3, #0
    1d4c:	613b      	str	r3, [r7, #16]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1d4e:	2302      	movs	r3, #2
    1d50:	60fb      	str	r3, [r7, #12]
    1d52:	e005      	b.n	1d60 <system_gclk_gen_set_config+0x64>
						mask <<= 1) {
				div2_count++;
    1d54:	693b      	ldr	r3, [r7, #16]
    1d56:	3301      	adds	r3, #1
    1d58:	613b      	str	r3, [r7, #16]
						mask <<= 1) {
    1d5a:	68fb      	ldr	r3, [r7, #12]
    1d5c:	005b      	lsls	r3, r3, #1
    1d5e:	60fb      	str	r3, [r7, #12]
			for (mask = (1UL << 1); mask < config->division_factor;
    1d60:	683b      	ldr	r3, [r7, #0]
    1d62:	685a      	ldr	r2, [r3, #4]
    1d64:	68fb      	ldr	r3, [r7, #12]
    1d66:	429a      	cmp	r2, r3
    1d68:	d8f4      	bhi.n	1d54 <system_gclk_gen_set_config+0x58>
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    1d6a:	693b      	ldr	r3, [r7, #16]
    1d6c:	041b      	lsls	r3, r3, #16
    1d6e:	697a      	ldr	r2, [r7, #20]
    1d70:	4313      	orrs	r3, r2
    1d72:	617b      	str	r3, [r7, #20]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1d74:	697b      	ldr	r3, [r7, #20]
    1d76:	2280      	movs	r2, #128	; 0x80
    1d78:	0152      	lsls	r2, r2, #5
    1d7a:	4313      	orrs	r3, r2
    1d7c:	617b      	str	r3, [r7, #20]
    1d7e:	e00a      	b.n	1d96 <system_gclk_gen_set_config+0x9a>
		} else {
			/* Set integer division factor */

			new_genctrl_config  |=
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    1d80:	683b      	ldr	r3, [r7, #0]
    1d82:	685b      	ldr	r3, [r3, #4]
    1d84:	041b      	lsls	r3, r3, #16
			new_genctrl_config  |=
    1d86:	697a      	ldr	r2, [r7, #20]
    1d88:	4313      	orrs	r3, r2
    1d8a:	617b      	str	r3, [r7, #20]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1d8c:	697b      	ldr	r3, [r7, #20]
    1d8e:	2280      	movs	r2, #128	; 0x80
    1d90:	0092      	lsls	r2, r2, #2
    1d92:	4313      	orrs	r3, r2
    1d94:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1d96:	683b      	ldr	r3, [r7, #0]
    1d98:	7a1b      	ldrb	r3, [r3, #8]
    1d9a:	2b00      	cmp	r3, #0
    1d9c:	d004      	beq.n	1da8 <system_gclk_gen_set_config+0xac>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1d9e:	697b      	ldr	r3, [r7, #20]
    1da0:	2280      	movs	r2, #128	; 0x80
    1da2:	0192      	lsls	r2, r2, #6
    1da4:	4313      	orrs	r3, r2
    1da6:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing(generator)) {
    1da8:	46c0      	nop			; (mov r8, r8)
    1daa:	1dfb      	adds	r3, r7, #7
    1dac:	781b      	ldrb	r3, [r3, #0]
    1dae:	0018      	movs	r0, r3
    1db0:	4b12      	ldr	r3, [pc, #72]	; (1dfc <system_gclk_gen_set_config+0x100>)
    1db2:	4798      	blx	r3
    1db4:	1e03      	subs	r3, r0, #0
    1db6:	d1f8      	bne.n	1daa <system_gclk_gen_set_config+0xae>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    1db8:	4b11      	ldr	r3, [pc, #68]	; (1e00 <system_gclk_gen_set_config+0x104>)
    1dba:	4798      	blx	r3

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    1dbc:	4811      	ldr	r0, [pc, #68]	; (1e04 <system_gclk_gen_set_config+0x108>)
    1dbe:	1dfb      	adds	r3, r7, #7
    1dc0:	781b      	ldrb	r3, [r3, #0]
    1dc2:	4910      	ldr	r1, [pc, #64]	; (1e04 <system_gclk_gen_set_config+0x108>)
    1dc4:	1dfa      	adds	r2, r7, #7
    1dc6:	7812      	ldrb	r2, [r2, #0]
    1dc8:	3208      	adds	r2, #8
    1dca:	0092      	lsls	r2, r2, #2
    1dcc:	5851      	ldr	r1, [r2, r1]
    1dce:	2280      	movs	r2, #128	; 0x80
    1dd0:	0052      	lsls	r2, r2, #1
    1dd2:	4011      	ands	r1, r2
    1dd4:	697a      	ldr	r2, [r7, #20]
    1dd6:	430a      	orrs	r2, r1
    1dd8:	3308      	adds	r3, #8
    1dda:	009b      	lsls	r3, r3, #2
    1ddc:	501a      	str	r2, [r3, r0]

	while (system_gclk_is_syncing(generator)) {
    1dde:	46c0      	nop			; (mov r8, r8)
    1de0:	1dfb      	adds	r3, r7, #7
    1de2:	781b      	ldrb	r3, [r3, #0]
    1de4:	0018      	movs	r0, r3
    1de6:	4b05      	ldr	r3, [pc, #20]	; (1dfc <system_gclk_gen_set_config+0x100>)
    1de8:	4798      	blx	r3
    1dea:	1e03      	subs	r3, r0, #0
    1dec:	d1f8      	bne.n	1de0 <system_gclk_gen_set_config+0xe4>
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
    1dee:	4b06      	ldr	r3, [pc, #24]	; (1e08 <system_gclk_gen_set_config+0x10c>)
    1df0:	4798      	blx	r3
}
    1df2:	46c0      	nop			; (mov r8, r8)
    1df4:	46bd      	mov	sp, r7
    1df6:	b006      	add	sp, #24
    1df8:	bd80      	pop	{r7, pc}
    1dfa:	46c0      	nop			; (mov r8, r8)
    1dfc:	00001c91 	.word	0x00001c91
    1e00:	00001c69 	.word	0x00001c69
    1e04:	40001800 	.word	0x40001800
    1e08:	00001c7d 	.word	0x00001c7d

00001e0c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1e0c:	b580      	push	{r7, lr}
    1e0e:	b082      	sub	sp, #8
    1e10:	af00      	add	r7, sp, #0
    1e12:	0002      	movs	r2, r0
    1e14:	1dfb      	adds	r3, r7, #7
    1e16:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing(generator)) {
    1e18:	46c0      	nop			; (mov r8, r8)
    1e1a:	1dfb      	adds	r3, r7, #7
    1e1c:	781b      	ldrb	r3, [r3, #0]
    1e1e:	0018      	movs	r0, r3
    1e20:	4b0d      	ldr	r3, [pc, #52]	; (1e58 <system_gclk_gen_enable+0x4c>)
    1e22:	4798      	blx	r3
    1e24:	1e03      	subs	r3, r0, #0
    1e26:	d1f8      	bne.n	1e1a <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    1e28:	4b0c      	ldr	r3, [pc, #48]	; (1e5c <system_gclk_gen_enable+0x50>)
    1e2a:	4798      	blx	r3

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    1e2c:	480c      	ldr	r0, [pc, #48]	; (1e60 <system_gclk_gen_enable+0x54>)
    1e2e:	1dfb      	adds	r3, r7, #7
    1e30:	781b      	ldrb	r3, [r3, #0]
    1e32:	490b      	ldr	r1, [pc, #44]	; (1e60 <system_gclk_gen_enable+0x54>)
    1e34:	1dfa      	adds	r2, r7, #7
    1e36:	7812      	ldrb	r2, [r2, #0]
    1e38:	3208      	adds	r2, #8
    1e3a:	0092      	lsls	r2, r2, #2
    1e3c:	5852      	ldr	r2, [r2, r1]
    1e3e:	2180      	movs	r1, #128	; 0x80
    1e40:	0049      	lsls	r1, r1, #1
    1e42:	430a      	orrs	r2, r1
    1e44:	3308      	adds	r3, #8
    1e46:	009b      	lsls	r3, r3, #2
    1e48:	501a      	str	r2, [r3, r0]

	system_interrupt_leave_critical_section();
    1e4a:	4b06      	ldr	r3, [pc, #24]	; (1e64 <system_gclk_gen_enable+0x58>)
    1e4c:	4798      	blx	r3
}
    1e4e:	46c0      	nop			; (mov r8, r8)
    1e50:	46bd      	mov	sp, r7
    1e52:	b002      	add	sp, #8
    1e54:	bd80      	pop	{r7, pc}
    1e56:	46c0      	nop			; (mov r8, r8)
    1e58:	00001c91 	.word	0x00001c91
    1e5c:	00001c69 	.word	0x00001c69
    1e60:	40001800 	.word	0x40001800
    1e64:	00001c7d 	.word	0x00001c7d

00001e68 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1e68:	b580      	push	{r7, lr}
    1e6a:	b086      	sub	sp, #24
    1e6c:	af00      	add	r7, sp, #0
    1e6e:	0002      	movs	r2, r0
    1e70:	1dfb      	adds	r3, r7, #7
    1e72:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing(generator)) {
    1e74:	46c0      	nop			; (mov r8, r8)
    1e76:	1dfb      	adds	r3, r7, #7
    1e78:	781b      	ldrb	r3, [r3, #0]
    1e7a:	0018      	movs	r0, r3
    1e7c:	4b24      	ldr	r3, [pc, #144]	; (1f10 <system_gclk_gen_get_hz+0xa8>)
    1e7e:	4798      	blx	r3
    1e80:	1e03      	subs	r3, r0, #0
    1e82:	d1f8      	bne.n	1e76 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    1e84:	4b23      	ldr	r3, [pc, #140]	; (1f14 <system_gclk_gen_get_hz+0xac>)
    1e86:	4798      	blx	r3

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    1e88:	4a23      	ldr	r2, [pc, #140]	; (1f18 <system_gclk_gen_get_hz+0xb0>)
    1e8a:	1dfb      	adds	r3, r7, #7
    1e8c:	781b      	ldrb	r3, [r3, #0]
    1e8e:	3308      	adds	r3, #8
    1e90:	009b      	lsls	r3, r3, #2
    1e92:	589b      	ldr	r3, [r3, r2]
    1e94:	06db      	lsls	r3, r3, #27
    1e96:	0edb      	lsrs	r3, r3, #27
    1e98:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1e9a:	0018      	movs	r0, r3
    1e9c:	4b1f      	ldr	r3, [pc, #124]	; (1f1c <system_gclk_gen_get_hz+0xb4>)
    1e9e:	4798      	blx	r3
    1ea0:	0003      	movs	r3, r0
    1ea2:	617b      	str	r3, [r7, #20]

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    1ea4:	4a1c      	ldr	r2, [pc, #112]	; (1f18 <system_gclk_gen_get_hz+0xb0>)
    1ea6:	1dfb      	adds	r3, r7, #7
    1ea8:	781b      	ldrb	r3, [r3, #0]
    1eaa:	3308      	adds	r3, #8
    1eac:	009b      	lsls	r3, r3, #2
    1eae:	589b      	ldr	r3, [r3, r2]
    1eb0:	04db      	lsls	r3, r3, #19
    1eb2:	0fdb      	lsrs	r3, r3, #31
    1eb4:	b2da      	uxtb	r2, r3
    1eb6:	2313      	movs	r3, #19
    1eb8:	18fb      	adds	r3, r7, r3
    1eba:	701a      	strb	r2, [r3, #0]
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    1ebc:	4a16      	ldr	r2, [pc, #88]	; (1f18 <system_gclk_gen_get_hz+0xb0>)
    1ebe:	1dfb      	adds	r3, r7, #7
    1ec0:	781b      	ldrb	r3, [r3, #0]
    1ec2:	3308      	adds	r3, #8
    1ec4:	009b      	lsls	r3, r3, #2
    1ec6:	589b      	ldr	r3, [r3, r2]
    1ec8:	0c1b      	lsrs	r3, r3, #16
    1eca:	b29b      	uxth	r3, r3
    1ecc:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    1ece:	4b14      	ldr	r3, [pc, #80]	; (1f20 <system_gclk_gen_get_hz+0xb8>)
    1ed0:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1ed2:	2313      	movs	r3, #19
    1ed4:	18fb      	adds	r3, r7, r3
    1ed6:	781b      	ldrb	r3, [r3, #0]
    1ed8:	2b00      	cmp	r3, #0
    1eda:	d109      	bne.n	1ef0 <system_gclk_gen_get_hz+0x88>
    1edc:	68fb      	ldr	r3, [r7, #12]
    1ede:	2b01      	cmp	r3, #1
    1ee0:	d906      	bls.n	1ef0 <system_gclk_gen_get_hz+0x88>
		gen_input_hz /= divider;
    1ee2:	4b10      	ldr	r3, [pc, #64]	; (1f24 <system_gclk_gen_get_hz+0xbc>)
    1ee4:	68f9      	ldr	r1, [r7, #12]
    1ee6:	6978      	ldr	r0, [r7, #20]
    1ee8:	4798      	blx	r3
    1eea:	0003      	movs	r3, r0
    1eec:	617b      	str	r3, [r7, #20]
    1eee:	e00a      	b.n	1f06 <system_gclk_gen_get_hz+0x9e>
	} else if (divsel) {
    1ef0:	2313      	movs	r3, #19
    1ef2:	18fb      	adds	r3, r7, r3
    1ef4:	781b      	ldrb	r3, [r3, #0]
    1ef6:	2b00      	cmp	r3, #0
    1ef8:	d005      	beq.n	1f06 <system_gclk_gen_get_hz+0x9e>
		gen_input_hz >>= (divider+1);
    1efa:	68fb      	ldr	r3, [r7, #12]
    1efc:	3301      	adds	r3, #1
    1efe:	697a      	ldr	r2, [r7, #20]
    1f00:	40da      	lsrs	r2, r3
    1f02:	0013      	movs	r3, r2
    1f04:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    1f06:	697b      	ldr	r3, [r7, #20]
}
    1f08:	0018      	movs	r0, r3
    1f0a:	46bd      	mov	sp, r7
    1f0c:	b006      	add	sp, #24
    1f0e:	bd80      	pop	{r7, pc}
    1f10:	00001c91 	.word	0x00001c91
    1f14:	00001c69 	.word	0x00001c69
    1f18:	40001800 	.word	0x40001800
    1f1c:	00001a55 	.word	0x00001a55
    1f20:	00001c7d 	.word	0x00001c7d
    1f24:	000027d9 	.word	0x000027d9

00001f28 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    1f28:	b580      	push	{r7, lr}
    1f2a:	b082      	sub	sp, #8
    1f2c:	af00      	add	r7, sp, #0
    1f2e:	0002      	movs	r2, r0
    1f30:	6039      	str	r1, [r7, #0]
    1f32:	1dfb      	adds	r3, r7, #7
    1f34:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    1f36:	1dfb      	adds	r3, r7, #7
    1f38:	781b      	ldrb	r3, [r3, #0]
    1f3a:	0018      	movs	r0, r3
    1f3c:	4b08      	ldr	r3, [pc, #32]	; (1f60 <system_gclk_chan_set_config+0x38>)
    1f3e:	4798      	blx	r3

	/* Configure the peripheral channel */
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    1f40:	4908      	ldr	r1, [pc, #32]	; (1f64 <system_gclk_chan_set_config+0x3c>)
    1f42:	1dfb      	adds	r3, r7, #7
    1f44:	781b      	ldrb	r3, [r3, #0]
    1f46:	683a      	ldr	r2, [r7, #0]
    1f48:	7812      	ldrb	r2, [r2, #0]
    1f4a:	0010      	movs	r0, r2
    1f4c:	220f      	movs	r2, #15
    1f4e:	4002      	ands	r2, r0
    1f50:	3320      	adds	r3, #32
    1f52:	009b      	lsls	r3, r3, #2
    1f54:	505a      	str	r2, [r3, r1]


}
    1f56:	46c0      	nop			; (mov r8, r8)
    1f58:	46bd      	mov	sp, r7
    1f5a:	b002      	add	sp, #8
    1f5c:	bd80      	pop	{r7, pc}
    1f5e:	46c0      	nop			; (mov r8, r8)
    1f60:	00001fc1 	.word	0x00001fc1
    1f64:	40001800 	.word	0x40001800

00001f68 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1f68:	b580      	push	{r7, lr}
    1f6a:	b082      	sub	sp, #8
    1f6c:	af00      	add	r7, sp, #0
    1f6e:	0002      	movs	r2, r0
    1f70:	1dfb      	adds	r3, r7, #7
    1f72:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    1f74:	4b0f      	ldr	r3, [pc, #60]	; (1fb4 <system_gclk_chan_enable+0x4c>)
    1f76:	4798      	blx	r3

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    1f78:	490f      	ldr	r1, [pc, #60]	; (1fb8 <system_gclk_chan_enable+0x50>)
    1f7a:	1dfb      	adds	r3, r7, #7
    1f7c:	781b      	ldrb	r3, [r3, #0]
    1f7e:	480e      	ldr	r0, [pc, #56]	; (1fb8 <system_gclk_chan_enable+0x50>)
    1f80:	1dfa      	adds	r2, r7, #7
    1f82:	7812      	ldrb	r2, [r2, #0]
    1f84:	3220      	adds	r2, #32
    1f86:	0092      	lsls	r2, r2, #2
    1f88:	5812      	ldr	r2, [r2, r0]
    1f8a:	2040      	movs	r0, #64	; 0x40
    1f8c:	4302      	orrs	r2, r0
    1f8e:	3320      	adds	r3, #32
    1f90:	009b      	lsls	r3, r3, #2
    1f92:	505a      	str	r2, [r3, r1]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    1f94:	46c0      	nop			; (mov r8, r8)
    1f96:	4a08      	ldr	r2, [pc, #32]	; (1fb8 <system_gclk_chan_enable+0x50>)
    1f98:	1dfb      	adds	r3, r7, #7
    1f9a:	781b      	ldrb	r3, [r3, #0]
    1f9c:	3320      	adds	r3, #32
    1f9e:	009b      	lsls	r3, r3, #2
    1fa0:	589b      	ldr	r3, [r3, r2]
    1fa2:	2240      	movs	r2, #64	; 0x40
    1fa4:	4013      	ands	r3, r2
    1fa6:	d0f6      	beq.n	1f96 <system_gclk_chan_enable+0x2e>
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
    1fa8:	4b04      	ldr	r3, [pc, #16]	; (1fbc <system_gclk_chan_enable+0x54>)
    1faa:	4798      	blx	r3
}
    1fac:	46c0      	nop			; (mov r8, r8)
    1fae:	46bd      	mov	sp, r7
    1fb0:	b002      	add	sp, #8
    1fb2:	bd80      	pop	{r7, pc}
    1fb4:	00001c69 	.word	0x00001c69
    1fb8:	40001800 	.word	0x40001800
    1fbc:	00001c7d 	.word	0x00001c7d

00001fc0 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1fc0:	b580      	push	{r7, lr}
    1fc2:	b082      	sub	sp, #8
    1fc4:	af00      	add	r7, sp, #0
    1fc6:	0002      	movs	r2, r0
    1fc8:	1dfb      	adds	r3, r7, #7
    1fca:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    1fcc:	4b0f      	ldr	r3, [pc, #60]	; (200c <STACK_SIZE+0xc>)
    1fce:	4798      	blx	r3

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    1fd0:	490f      	ldr	r1, [pc, #60]	; (2010 <STACK_SIZE+0x10>)
    1fd2:	1dfb      	adds	r3, r7, #7
    1fd4:	781b      	ldrb	r3, [r3, #0]
    1fd6:	480e      	ldr	r0, [pc, #56]	; (2010 <STACK_SIZE+0x10>)
    1fd8:	1dfa      	adds	r2, r7, #7
    1fda:	7812      	ldrb	r2, [r2, #0]
    1fdc:	3220      	adds	r2, #32
    1fde:	0092      	lsls	r2, r2, #2
    1fe0:	5812      	ldr	r2, [r2, r0]
    1fe2:	2040      	movs	r0, #64	; 0x40
    1fe4:	4382      	bics	r2, r0
    1fe6:	3320      	adds	r3, #32
    1fe8:	009b      	lsls	r3, r3, #2
    1fea:	505a      	str	r2, [r3, r1]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    1fec:	46c0      	nop			; (mov r8, r8)
    1fee:	4a08      	ldr	r2, [pc, #32]	; (2010 <STACK_SIZE+0x10>)
    1ff0:	1dfb      	adds	r3, r7, #7
    1ff2:	781b      	ldrb	r3, [r3, #0]
    1ff4:	3320      	adds	r3, #32
    1ff6:	009b      	lsls	r3, r3, #2
    1ff8:	589b      	ldr	r3, [r3, r2]
    1ffa:	2240      	movs	r2, #64	; 0x40
    1ffc:	4013      	ands	r3, r2
    1ffe:	d1f6      	bne.n	1fee <system_gclk_chan_disable+0x2e>
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
    2000:	4b04      	ldr	r3, [pc, #16]	; (2014 <STACK_SIZE+0x14>)
    2002:	4798      	blx	r3
}
    2004:	46c0      	nop			; (mov r8, r8)
    2006:	46bd      	mov	sp, r7
    2008:	b002      	add	sp, #8
    200a:	bd80      	pop	{r7, pc}
    200c:	00001c69 	.word	0x00001c69
    2010:	40001800 	.word	0x40001800
    2014:	00001c7d 	.word	0x00001c7d

00002018 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    2018:	b580      	push	{r7, lr}
    201a:	b084      	sub	sp, #16
    201c:	af00      	add	r7, sp, #0
    201e:	0002      	movs	r2, r0
    2020:	1dfb      	adds	r3, r7, #7
    2022:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    2024:	4b0d      	ldr	r3, [pc, #52]	; (205c <system_gclk_chan_get_hz+0x44>)
    2026:	4798      	blx	r3
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    2028:	4a0d      	ldr	r2, [pc, #52]	; (2060 <system_gclk_chan_get_hz+0x48>)
    202a:	1dfb      	adds	r3, r7, #7
    202c:	781b      	ldrb	r3, [r3, #0]
    202e:	3320      	adds	r3, #32
    2030:	009b      	lsls	r3, r3, #2
    2032:	589b      	ldr	r3, [r3, r2]
    2034:	071b      	lsls	r3, r3, #28
    2036:	0f1b      	lsrs	r3, r3, #28
    2038:	b2da      	uxtb	r2, r3
    203a:	230f      	movs	r3, #15
    203c:	18fb      	adds	r3, r7, r3
    203e:	701a      	strb	r2, [r3, #0]
	system_interrupt_leave_critical_section();
    2040:	4b08      	ldr	r3, [pc, #32]	; (2064 <system_gclk_chan_get_hz+0x4c>)
    2042:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    2044:	230f      	movs	r3, #15
    2046:	18fb      	adds	r3, r7, r3
    2048:	781b      	ldrb	r3, [r3, #0]
    204a:	0018      	movs	r0, r3
    204c:	4b06      	ldr	r3, [pc, #24]	; (2068 <system_gclk_chan_get_hz+0x50>)
    204e:	4798      	blx	r3
    2050:	0003      	movs	r3, r0
}
    2052:	0018      	movs	r0, r3
    2054:	46bd      	mov	sp, r7
    2056:	b004      	add	sp, #16
    2058:	bd80      	pop	{r7, pc}
    205a:	46c0      	nop			; (mov r8, r8)
    205c:	00001c69 	.word	0x00001c69
    2060:	40001800 	.word	0x40001800
    2064:	00001c7d 	.word	0x00001c7d
    2068:	00001e69 	.word	0x00001e69

0000206c <system_pinmux_get_group_from_gpio_pin>:
{
    206c:	b580      	push	{r7, lr}
    206e:	b084      	sub	sp, #16
    2070:	af00      	add	r7, sp, #0
    2072:	0002      	movs	r2, r0
    2074:	1dfb      	adds	r3, r7, #7
    2076:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    2078:	230f      	movs	r3, #15
    207a:	18fb      	adds	r3, r7, r3
    207c:	1dfa      	adds	r2, r7, #7
    207e:	7812      	ldrb	r2, [r2, #0]
    2080:	09d2      	lsrs	r2, r2, #7
    2082:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    2084:	230e      	movs	r3, #14
    2086:	18fb      	adds	r3, r7, r3
    2088:	1dfa      	adds	r2, r7, #7
    208a:	7812      	ldrb	r2, [r2, #0]
    208c:	0952      	lsrs	r2, r2, #5
    208e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    2090:	4b0d      	ldr	r3, [pc, #52]	; (20c8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    2092:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    2094:	230f      	movs	r3, #15
    2096:	18fb      	adds	r3, r7, r3
    2098:	781b      	ldrb	r3, [r3, #0]
    209a:	2b00      	cmp	r3, #0
    209c:	d10f      	bne.n	20be <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    209e:	230f      	movs	r3, #15
    20a0:	18fb      	adds	r3, r7, r3
    20a2:	781b      	ldrb	r3, [r3, #0]
    20a4:	009b      	lsls	r3, r3, #2
    20a6:	2210      	movs	r2, #16
    20a8:	4694      	mov	ip, r2
    20aa:	44bc      	add	ip, r7
    20ac:	4463      	add	r3, ip
    20ae:	3b08      	subs	r3, #8
    20b0:	681a      	ldr	r2, [r3, #0]
    20b2:	230e      	movs	r3, #14
    20b4:	18fb      	adds	r3, r7, r3
    20b6:	781b      	ldrb	r3, [r3, #0]
    20b8:	01db      	lsls	r3, r3, #7
    20ba:	18d3      	adds	r3, r2, r3
    20bc:	e000      	b.n	20c0 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    20be:	2300      	movs	r3, #0
}
    20c0:	0018      	movs	r0, r3
    20c2:	46bd      	mov	sp, r7
    20c4:	b004      	add	sp, #16
    20c6:	bd80      	pop	{r7, pc}
    20c8:	40002800 	.word	0x40002800

000020cc <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    20cc:	b580      	push	{r7, lr}
    20ce:	b088      	sub	sp, #32
    20d0:	af00      	add	r7, sp, #0
    20d2:	60f8      	str	r0, [r7, #12]
    20d4:	60b9      	str	r1, [r7, #8]
    20d6:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    20d8:	2300      	movs	r3, #0
    20da:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    20dc:	687b      	ldr	r3, [r7, #4]
    20de:	78db      	ldrb	r3, [r3, #3]
    20e0:	2201      	movs	r2, #1
    20e2:	4053      	eors	r3, r2
    20e4:	b2db      	uxtb	r3, r3
    20e6:	2b00      	cmp	r3, #0
    20e8:	d035      	beq.n	2156 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    20ea:	687b      	ldr	r3, [r7, #4]
    20ec:	781b      	ldrb	r3, [r3, #0]
    20ee:	2b80      	cmp	r3, #128	; 0x80
    20f0:	d00b      	beq.n	210a <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    20f2:	69fb      	ldr	r3, [r7, #28]
    20f4:	2280      	movs	r2, #128	; 0x80
    20f6:	0252      	lsls	r2, r2, #9
    20f8:	4313      	orrs	r3, r2
    20fa:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    20fc:	687b      	ldr	r3, [r7, #4]
    20fe:	781b      	ldrb	r3, [r3, #0]
    2100:	061b      	lsls	r3, r3, #24
    2102:	001a      	movs	r2, r3
    2104:	69fb      	ldr	r3, [r7, #28]
    2106:	4313      	orrs	r3, r2
    2108:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    210a:	687b      	ldr	r3, [r7, #4]
    210c:	785b      	ldrb	r3, [r3, #1]
    210e:	2b00      	cmp	r3, #0
    2110:	d003      	beq.n	211a <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    2112:	687b      	ldr	r3, [r7, #4]
    2114:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    2116:	2b02      	cmp	r3, #2
    2118:	d110      	bne.n	213c <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    211a:	69fb      	ldr	r3, [r7, #28]
    211c:	2280      	movs	r2, #128	; 0x80
    211e:	0292      	lsls	r2, r2, #10
    2120:	4313      	orrs	r3, r2
    2122:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    2124:	687b      	ldr	r3, [r7, #4]
    2126:	789b      	ldrb	r3, [r3, #2]
    2128:	2b00      	cmp	r3, #0
    212a:	d004      	beq.n	2136 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    212c:	69fb      	ldr	r3, [r7, #28]
    212e:	2280      	movs	r2, #128	; 0x80
    2130:	02d2      	lsls	r2, r2, #11
    2132:	4313      	orrs	r3, r2
    2134:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    2136:	68fb      	ldr	r3, [r7, #12]
    2138:	68ba      	ldr	r2, [r7, #8]
    213a:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    213c:	687b      	ldr	r3, [r7, #4]
    213e:	785b      	ldrb	r3, [r3, #1]
    2140:	2b01      	cmp	r3, #1
    2142:	d003      	beq.n	214c <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    2144:	687b      	ldr	r3, [r7, #4]
    2146:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2148:	2b02      	cmp	r3, #2
    214a:	d107      	bne.n	215c <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    214c:	69fb      	ldr	r3, [r7, #28]
    214e:	4a22      	ldr	r2, [pc, #136]	; (21d8 <_system_pinmux_config+0x10c>)
    2150:	4013      	ands	r3, r2
    2152:	61fb      	str	r3, [r7, #28]
    2154:	e002      	b.n	215c <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    2156:	68fb      	ldr	r3, [r7, #12]
    2158:	68ba      	ldr	r2, [r7, #8]
    215a:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    215c:	68bb      	ldr	r3, [r7, #8]
    215e:	041b      	lsls	r3, r3, #16
    2160:	0c1b      	lsrs	r3, r3, #16
    2162:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2164:	68bb      	ldr	r3, [r7, #8]
    2166:	0c1b      	lsrs	r3, r3, #16
    2168:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    216a:	69ba      	ldr	r2, [r7, #24]
    216c:	69fb      	ldr	r3, [r7, #28]
    216e:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2170:	22a0      	movs	r2, #160	; 0xa0
    2172:	05d2      	lsls	r2, r2, #23
    2174:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2176:	68fb      	ldr	r3, [r7, #12]
    2178:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    217a:	697a      	ldr	r2, [r7, #20]
    217c:	69fb      	ldr	r3, [r7, #28]
    217e:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2180:	22d0      	movs	r2, #208	; 0xd0
    2182:	0612      	lsls	r2, r2, #24
    2184:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2186:	68fb      	ldr	r3, [r7, #12]
    2188:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    218a:	687b      	ldr	r3, [r7, #4]
    218c:	78db      	ldrb	r3, [r3, #3]
    218e:	2201      	movs	r2, #1
    2190:	4053      	eors	r3, r2
    2192:	b2db      	uxtb	r3, r3
    2194:	2b00      	cmp	r3, #0
    2196:	d01a      	beq.n	21ce <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    2198:	69fa      	ldr	r2, [r7, #28]
    219a:	2380      	movs	r3, #128	; 0x80
    219c:	02db      	lsls	r3, r3, #11
    219e:	4013      	ands	r3, r2
    21a0:	d00a      	beq.n	21b8 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    21a2:	687b      	ldr	r3, [r7, #4]
    21a4:	789b      	ldrb	r3, [r3, #2]
    21a6:	2b01      	cmp	r3, #1
    21a8:	d103      	bne.n	21b2 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    21aa:	68fb      	ldr	r3, [r7, #12]
    21ac:	68ba      	ldr	r2, [r7, #8]
    21ae:	619a      	str	r2, [r3, #24]
    21b0:	e002      	b.n	21b8 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    21b2:	68fb      	ldr	r3, [r7, #12]
    21b4:	68ba      	ldr	r2, [r7, #8]
    21b6:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    21b8:	687b      	ldr	r3, [r7, #4]
    21ba:	785b      	ldrb	r3, [r3, #1]
    21bc:	2b01      	cmp	r3, #1
    21be:	d003      	beq.n	21c8 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    21c0:	687b      	ldr	r3, [r7, #4]
    21c2:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    21c4:	2b02      	cmp	r3, #2
    21c6:	d102      	bne.n	21ce <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    21c8:	68fb      	ldr	r3, [r7, #12]
    21ca:	68ba      	ldr	r2, [r7, #8]
    21cc:	609a      	str	r2, [r3, #8]
		}
	}
}
    21ce:	46c0      	nop			; (mov r8, r8)
    21d0:	46bd      	mov	sp, r7
    21d2:	b008      	add	sp, #32
    21d4:	bd80      	pop	{r7, pc}
    21d6:	46c0      	nop			; (mov r8, r8)
    21d8:	fffbffff 	.word	0xfffbffff

000021dc <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    21dc:	b580      	push	{r7, lr}
    21de:	b084      	sub	sp, #16
    21e0:	af00      	add	r7, sp, #0
    21e2:	0002      	movs	r2, r0
    21e4:	6039      	str	r1, [r7, #0]
    21e6:	1dfb      	adds	r3, r7, #7
    21e8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    21ea:	1dfb      	adds	r3, r7, #7
    21ec:	781b      	ldrb	r3, [r3, #0]
    21ee:	0018      	movs	r0, r3
    21f0:	4b0a      	ldr	r3, [pc, #40]	; (221c <system_pinmux_pin_set_config+0x40>)
    21f2:	4798      	blx	r3
    21f4:	0003      	movs	r3, r0
    21f6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    21f8:	1dfb      	adds	r3, r7, #7
    21fa:	781b      	ldrb	r3, [r3, #0]
    21fc:	221f      	movs	r2, #31
    21fe:	4013      	ands	r3, r2
    2200:	2201      	movs	r2, #1
    2202:	409a      	lsls	r2, r3
    2204:	0013      	movs	r3, r2
    2206:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    2208:	683a      	ldr	r2, [r7, #0]
    220a:	68b9      	ldr	r1, [r7, #8]
    220c:	68fb      	ldr	r3, [r7, #12]
    220e:	0018      	movs	r0, r3
    2210:	4b03      	ldr	r3, [pc, #12]	; (2220 <system_pinmux_pin_set_config+0x44>)
    2212:	4798      	blx	r3
}
    2214:	46c0      	nop			; (mov r8, r8)
    2216:	46bd      	mov	sp, r7
    2218:	b004      	add	sp, #16
    221a:	bd80      	pop	{r7, pc}
    221c:	0000206d 	.word	0x0000206d
    2220:	000020cd 	.word	0x000020cd

00002224 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    2224:	b580      	push	{r7, lr}
    2226:	af00      	add	r7, sp, #0
	return;
    2228:	46c0      	nop			; (mov r8, r8)
}
    222a:	46bd      	mov	sp, r7
    222c:	bd80      	pop	{r7, pc}
	...

00002230 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    2230:	b580      	push	{r7, lr}
    2232:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    2234:	4b06      	ldr	r3, [pc, #24]	; (2250 <system_init+0x20>)
    2236:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    2238:	4b06      	ldr	r3, [pc, #24]	; (2254 <system_init+0x24>)
    223a:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    223c:	4b06      	ldr	r3, [pc, #24]	; (2258 <system_init+0x28>)
    223e:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    2240:	4b06      	ldr	r3, [pc, #24]	; (225c <system_init+0x2c>)
    2242:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    2244:	4b06      	ldr	r3, [pc, #24]	; (2260 <system_init+0x30>)
    2246:	4798      	blx	r3
}
    2248:	46c0      	nop			; (mov r8, r8)
    224a:	46bd      	mov	sp, r7
    224c:	bd80      	pop	{r7, pc}
    224e:	46c0      	nop			; (mov r8, r8)
    2250:	00001b15 	.word	0x00001b15
    2254:	00000ab1 	.word	0x00000ab1
    2258:	00002225 	.word	0x00002225
    225c:	00002225 	.word	0x00002225
    2260:	00002225 	.word	0x00002225

00002264 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    2264:	b580      	push	{r7, lr}
    2266:	b082      	sub	sp, #8
    2268:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    226a:	4b19      	ldr	r3, [pc, #100]	; (22d0 <Reset_Handler+0x6c>)
    226c:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    226e:	4b19      	ldr	r3, [pc, #100]	; (22d4 <Reset_Handler+0x70>)
    2270:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    2272:	687a      	ldr	r2, [r7, #4]
    2274:	683b      	ldr	r3, [r7, #0]
    2276:	429a      	cmp	r2, r3
    2278:	d00c      	beq.n	2294 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    227a:	e007      	b.n	228c <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    227c:	683b      	ldr	r3, [r7, #0]
    227e:	1d1a      	adds	r2, r3, #4
    2280:	603a      	str	r2, [r7, #0]
    2282:	687a      	ldr	r2, [r7, #4]
    2284:	1d11      	adds	r1, r2, #4
    2286:	6079      	str	r1, [r7, #4]
    2288:	6812      	ldr	r2, [r2, #0]
    228a:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    228c:	683a      	ldr	r2, [r7, #0]
    228e:	4b12      	ldr	r3, [pc, #72]	; (22d8 <Reset_Handler+0x74>)
    2290:	429a      	cmp	r2, r3
    2292:	d3f3      	bcc.n	227c <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    2294:	4b11      	ldr	r3, [pc, #68]	; (22dc <Reset_Handler+0x78>)
    2296:	603b      	str	r3, [r7, #0]
    2298:	e004      	b.n	22a4 <Reset_Handler+0x40>
                *pDest++ = 0;
    229a:	683b      	ldr	r3, [r7, #0]
    229c:	1d1a      	adds	r2, r3, #4
    229e:	603a      	str	r2, [r7, #0]
    22a0:	2200      	movs	r2, #0
    22a2:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    22a4:	683a      	ldr	r2, [r7, #0]
    22a6:	4b0e      	ldr	r3, [pc, #56]	; (22e0 <Reset_Handler+0x7c>)
    22a8:	429a      	cmp	r2, r3
    22aa:	d3f6      	bcc.n	229a <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    22ac:	4b0d      	ldr	r3, [pc, #52]	; (22e4 <Reset_Handler+0x80>)
    22ae:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    22b0:	4b0d      	ldr	r3, [pc, #52]	; (22e8 <Reset_Handler+0x84>)
    22b2:	687a      	ldr	r2, [r7, #4]
    22b4:	21ff      	movs	r1, #255	; 0xff
    22b6:	438a      	bics	r2, r1
    22b8:	609a      	str	r2, [r3, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    22ba:	4a0c      	ldr	r2, [pc, #48]	; (22ec <Reset_Handler+0x88>)
    22bc:	6853      	ldr	r3, [r2, #4]
    22be:	2180      	movs	r1, #128	; 0x80
    22c0:	430b      	orrs	r3, r1
    22c2:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    22c4:	4b0a      	ldr	r3, [pc, #40]	; (22f0 <Reset_Handler+0x8c>)
    22c6:	4798      	blx	r3

        /* Branch to main function */
        main();
    22c8:	4b0a      	ldr	r3, [pc, #40]	; (22f4 <Reset_Handler+0x90>)
    22ca:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    22cc:	e7fe      	b.n	22cc <Reset_Handler+0x68>
    22ce:	46c0      	nop			; (mov r8, r8)
    22d0:	00003bb8 	.word	0x00003bb8
    22d4:	20000000 	.word	0x20000000
    22d8:	20000468 	.word	0x20000468
    22dc:	20000468 	.word	0x20000468
    22e0:	200004d0 	.word	0x200004d0
    22e4:	00000000 	.word	0x00000000
    22e8:	e000ed00 	.word	0xe000ed00
    22ec:	41004000 	.word	0x41004000
    22f0:	00002945 	.word	0x00002945
    22f4:	00002711 	.word	0x00002711

000022f8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    22f8:	b580      	push	{r7, lr}
    22fa:	af00      	add	r7, sp, #0
        while (1) {
    22fc:	e7fe      	b.n	22fc <Dummy_Handler+0x4>
	...

00002300 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    2300:	b580      	push	{r7, lr}
    2302:	b086      	sub	sp, #24
    2304:	af00      	add	r7, sp, #0
    2306:	60f8      	str	r0, [r7, #12]
    2308:	60b9      	str	r1, [r7, #8]
    230a:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    230c:	2300      	movs	r3, #0
    230e:	617b      	str	r3, [r7, #20]

	if (file != 0) {
    2310:	68fb      	ldr	r3, [r7, #12]
    2312:	2b00      	cmp	r3, #0
    2314:	d012      	beq.n	233c <_read+0x3c>
		return -1;
    2316:	2301      	movs	r3, #1
    2318:	425b      	negs	r3, r3
    231a:	e013      	b.n	2344 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
    231c:	4b0b      	ldr	r3, [pc, #44]	; (234c <_read+0x4c>)
    231e:	681a      	ldr	r2, [r3, #0]
    2320:	4b0b      	ldr	r3, [pc, #44]	; (2350 <_read+0x50>)
    2322:	681b      	ldr	r3, [r3, #0]
    2324:	68b9      	ldr	r1, [r7, #8]
    2326:	0018      	movs	r0, r3
    2328:	4790      	blx	r2
		ptr++;
    232a:	68bb      	ldr	r3, [r7, #8]
    232c:	3301      	adds	r3, #1
    232e:	60bb      	str	r3, [r7, #8]
		nChars++;
    2330:	697b      	ldr	r3, [r7, #20]
    2332:	3301      	adds	r3, #1
    2334:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
    2336:	687b      	ldr	r3, [r7, #4]
    2338:	3b01      	subs	r3, #1
    233a:	607b      	str	r3, [r7, #4]
    233c:	687b      	ldr	r3, [r7, #4]
    233e:	2b00      	cmp	r3, #0
    2340:	dcec      	bgt.n	231c <_read+0x1c>
	}
	return nChars;
    2342:	697b      	ldr	r3, [r7, #20]
}
    2344:	0018      	movs	r0, r3
    2346:	46bd      	mov	sp, r7
    2348:	b006      	add	sp, #24
    234a:	bd80      	pop	{r7, pc}
    234c:	200004b4 	.word	0x200004b4
    2350:	200004bc 	.word	0x200004bc

00002354 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    2354:	b580      	push	{r7, lr}
    2356:	b086      	sub	sp, #24
    2358:	af00      	add	r7, sp, #0
    235a:	60f8      	str	r0, [r7, #12]
    235c:	60b9      	str	r1, [r7, #8]
    235e:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    2360:	2300      	movs	r3, #0
    2362:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
    2364:	68fb      	ldr	r3, [r7, #12]
    2366:	2b01      	cmp	r3, #1
    2368:	d01d      	beq.n	23a6 <_write+0x52>
    236a:	68fb      	ldr	r3, [r7, #12]
    236c:	2b02      	cmp	r3, #2
    236e:	d01a      	beq.n	23a6 <_write+0x52>
    2370:	68fb      	ldr	r3, [r7, #12]
    2372:	2b03      	cmp	r3, #3
    2374:	d017      	beq.n	23a6 <_write+0x52>
		return -1;
    2376:	2301      	movs	r3, #1
    2378:	425b      	negs	r3, r3
    237a:	e018      	b.n	23ae <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
    237c:	4b0e      	ldr	r3, [pc, #56]	; (23b8 <_write+0x64>)
    237e:	681a      	ldr	r2, [r3, #0]
    2380:	4b0e      	ldr	r3, [pc, #56]	; (23bc <_write+0x68>)
    2382:	6818      	ldr	r0, [r3, #0]
    2384:	68bb      	ldr	r3, [r7, #8]
    2386:	1c59      	adds	r1, r3, #1
    2388:	60b9      	str	r1, [r7, #8]
    238a:	781b      	ldrb	r3, [r3, #0]
    238c:	0019      	movs	r1, r3
    238e:	4790      	blx	r2
    2390:	1e03      	subs	r3, r0, #0
    2392:	da02      	bge.n	239a <_write+0x46>
			return -1;
    2394:	2301      	movs	r3, #1
    2396:	425b      	negs	r3, r3
    2398:	e009      	b.n	23ae <_write+0x5a>
		}
		++nChars;
    239a:	697b      	ldr	r3, [r7, #20]
    239c:	3301      	adds	r3, #1
    239e:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
    23a0:	687b      	ldr	r3, [r7, #4]
    23a2:	3b01      	subs	r3, #1
    23a4:	607b      	str	r3, [r7, #4]
    23a6:	687b      	ldr	r3, [r7, #4]
    23a8:	2b00      	cmp	r3, #0
    23aa:	d1e7      	bne.n	237c <_write+0x28>
	}
	return nChars;
    23ac:	697b      	ldr	r3, [r7, #20]
}
    23ae:	0018      	movs	r0, r3
    23b0:	46bd      	mov	sp, r7
    23b2:	b006      	add	sp, #24
    23b4:	bd80      	pop	{r7, pc}
    23b6:	46c0      	nop			; (mov r8, r8)
    23b8:	200004b8 	.word	0x200004b8
    23bc:	200004bc 	.word	0x200004bc

000023c0 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    23c0:	b580      	push	{r7, lr}
    23c2:	b084      	sub	sp, #16
    23c4:	af00      	add	r7, sp, #0
    23c6:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    23c8:	4b0a      	ldr	r3, [pc, #40]	; (23f4 <_sbrk+0x34>)
    23ca:	681b      	ldr	r3, [r3, #0]
    23cc:	2b00      	cmp	r3, #0
    23ce:	d102      	bne.n	23d6 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    23d0:	4b08      	ldr	r3, [pc, #32]	; (23f4 <_sbrk+0x34>)
    23d2:	4a09      	ldr	r2, [pc, #36]	; (23f8 <_sbrk+0x38>)
    23d4:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    23d6:	4b07      	ldr	r3, [pc, #28]	; (23f4 <_sbrk+0x34>)
    23d8:	681b      	ldr	r3, [r3, #0]
    23da:	60fb      	str	r3, [r7, #12]

	heap += incr;
    23dc:	4b05      	ldr	r3, [pc, #20]	; (23f4 <_sbrk+0x34>)
    23de:	681a      	ldr	r2, [r3, #0]
    23e0:	687b      	ldr	r3, [r7, #4]
    23e2:	18d2      	adds	r2, r2, r3
    23e4:	4b03      	ldr	r3, [pc, #12]	; (23f4 <_sbrk+0x34>)
    23e6:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    23e8:	68fb      	ldr	r3, [r7, #12]
}
    23ea:	0018      	movs	r0, r3
    23ec:	46bd      	mov	sp, r7
    23ee:	b004      	add	sp, #16
    23f0:	bd80      	pop	{r7, pc}
    23f2:	46c0      	nop			; (mov r8, r8)
    23f4:	200004a8 	.word	0x200004a8
    23f8:	200024d0 	.word	0x200024d0

000023fc <_close>:
{
	return -1;
}

extern int _close(int file)
{
    23fc:	b580      	push	{r7, lr}
    23fe:	b082      	sub	sp, #8
    2400:	af00      	add	r7, sp, #0
    2402:	6078      	str	r0, [r7, #4]
	return -1;
    2404:	2301      	movs	r3, #1
    2406:	425b      	negs	r3, r3
}
    2408:	0018      	movs	r0, r3
    240a:	46bd      	mov	sp, r7
    240c:	b002      	add	sp, #8
    240e:	bd80      	pop	{r7, pc}

00002410 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
    2410:	b580      	push	{r7, lr}
    2412:	b082      	sub	sp, #8
    2414:	af00      	add	r7, sp, #0
    2416:	6078      	str	r0, [r7, #4]
    2418:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
    241a:	683b      	ldr	r3, [r7, #0]
    241c:	2280      	movs	r2, #128	; 0x80
    241e:	0192      	lsls	r2, r2, #6
    2420:	605a      	str	r2, [r3, #4]

	return 0;
    2422:	2300      	movs	r3, #0
}
    2424:	0018      	movs	r0, r3
    2426:	46bd      	mov	sp, r7
    2428:	b002      	add	sp, #8
    242a:	bd80      	pop	{r7, pc}

0000242c <_isatty>:

extern int _isatty(int file)
{
    242c:	b580      	push	{r7, lr}
    242e:	b082      	sub	sp, #8
    2430:	af00      	add	r7, sp, #0
    2432:	6078      	str	r0, [r7, #4]
	return 1;
    2434:	2301      	movs	r3, #1
}
    2436:	0018      	movs	r0, r3
    2438:	46bd      	mov	sp, r7
    243a:	b002      	add	sp, #8
    243c:	bd80      	pop	{r7, pc}

0000243e <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
    243e:	b580      	push	{r7, lr}
    2440:	b084      	sub	sp, #16
    2442:	af00      	add	r7, sp, #0
    2444:	60f8      	str	r0, [r7, #12]
    2446:	60b9      	str	r1, [r7, #8]
    2448:	607a      	str	r2, [r7, #4]
	return 0;
    244a:	2300      	movs	r3, #0
}
    244c:	0018      	movs	r0, r3
    244e:	46bd      	mov	sp, r7
    2450:	b004      	add	sp, #16
    2452:	bd80      	pop	{r7, pc}

00002454 <usart_is_syncing>:
{
    2454:	b580      	push	{r7, lr}
    2456:	b084      	sub	sp, #16
    2458:	af00      	add	r7, sp, #0
    245a:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    245c:	687b      	ldr	r3, [r7, #4]
    245e:	681b      	ldr	r3, [r3, #0]
    2460:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    2462:	68fb      	ldr	r3, [r7, #12]
    2464:	69db      	ldr	r3, [r3, #28]
    2466:	1e5a      	subs	r2, r3, #1
    2468:	4193      	sbcs	r3, r2
    246a:	b2db      	uxtb	r3, r3
}
    246c:	0018      	movs	r0, r3
    246e:	46bd      	mov	sp, r7
    2470:	b004      	add	sp, #16
    2472:	bd80      	pop	{r7, pc}

00002474 <_usart_wait_for_sync>:
{
    2474:	b580      	push	{r7, lr}
    2476:	b082      	sub	sp, #8
    2478:	af00      	add	r7, sp, #0
    247a:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    247c:	46c0      	nop			; (mov r8, r8)
    247e:	687b      	ldr	r3, [r7, #4]
    2480:	0018      	movs	r0, r3
    2482:	4b04      	ldr	r3, [pc, #16]	; (2494 <_usart_wait_for_sync+0x20>)
    2484:	4798      	blx	r3
    2486:	1e03      	subs	r3, r0, #0
    2488:	d1f9      	bne.n	247e <_usart_wait_for_sync+0xa>
}
    248a:	46c0      	nop			; (mov r8, r8)
    248c:	46bd      	mov	sp, r7
    248e:	b002      	add	sp, #8
    2490:	bd80      	pop	{r7, pc}
    2492:	46c0      	nop			; (mov r8, r8)
    2494:	00002455 	.word	0x00002455

00002498 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    2498:	b580      	push	{r7, lr}
    249a:	b082      	sub	sp, #8
    249c:	af00      	add	r7, sp, #0
    249e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    24a0:	687b      	ldr	r3, [r7, #4]
    24a2:	2280      	movs	r2, #128	; 0x80
    24a4:	05d2      	lsls	r2, r2, #23
    24a6:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    24a8:	687b      	ldr	r3, [r7, #4]
    24aa:	2200      	movs	r2, #0
    24ac:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    24ae:	687b      	ldr	r3, [r7, #4]
    24b0:	22ff      	movs	r2, #255	; 0xff
    24b2:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    24b4:	687b      	ldr	r3, [r7, #4]
    24b6:	2200      	movs	r2, #0
    24b8:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    24ba:	687b      	ldr	r3, [r7, #4]
    24bc:	2200      	movs	r2, #0
    24be:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    24c0:	687b      	ldr	r3, [r7, #4]
    24c2:	2296      	movs	r2, #150	; 0x96
    24c4:	0192      	lsls	r2, r2, #6
    24c6:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    24c8:	687b      	ldr	r3, [r7, #4]
    24ca:	2224      	movs	r2, #36	; 0x24
    24cc:	2101      	movs	r1, #1
    24ce:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
    24d0:	687b      	ldr	r3, [r7, #4]
    24d2:	2225      	movs	r2, #37	; 0x25
    24d4:	2101      	movs	r1, #1
    24d6:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
    24d8:	687b      	ldr	r3, [r7, #4]
    24da:	2226      	movs	r2, #38	; 0x26
    24dc:	2100      	movs	r1, #0
    24de:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
    24e0:	687b      	ldr	r3, [r7, #4]
    24e2:	2227      	movs	r2, #39	; 0x27
    24e4:	2100      	movs	r1, #0
    24e6:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
    24e8:	687b      	ldr	r3, [r7, #4]
    24ea:	2200      	movs	r2, #0
    24ec:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    24ee:	687b      	ldr	r3, [r7, #4]
    24f0:	2288      	movs	r2, #136	; 0x88
    24f2:	0352      	lsls	r2, r2, #13
    24f4:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    24f6:	687b      	ldr	r3, [r7, #4]
    24f8:	222c      	movs	r2, #44	; 0x2c
    24fa:	2100      	movs	r1, #0
    24fc:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
    24fe:	687b      	ldr	r3, [r7, #4]
    2500:	222d      	movs	r2, #45	; 0x2d
    2502:	2100      	movs	r1, #0
    2504:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    2506:	687b      	ldr	r3, [r7, #4]
    2508:	2200      	movs	r2, #0
    250a:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    250c:	687b      	ldr	r3, [r7, #4]
    250e:	2200      	movs	r2, #0
    2510:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    2512:	687b      	ldr	r3, [r7, #4]
    2514:	2200      	movs	r2, #0
    2516:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    2518:	687b      	ldr	r3, [r7, #4]
    251a:	2200      	movs	r2, #0
    251c:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    251e:	687b      	ldr	r3, [r7, #4]
    2520:	2200      	movs	r2, #0
    2522:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    2524:	687b      	ldr	r3, [r7, #4]
    2526:	2200      	movs	r2, #0
    2528:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    252a:	687b      	ldr	r3, [r7, #4]
    252c:	2200      	movs	r2, #0
    252e:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    2530:	687b      	ldr	r3, [r7, #4]
    2532:	2200      	movs	r2, #0
    2534:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    2536:	687b      	ldr	r3, [r7, #4]
    2538:	2200      	movs	r2, #0
    253a:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    253c:	687b      	ldr	r3, [r7, #4]
    253e:	2200      	movs	r2, #0
    2540:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
    2542:	687b      	ldr	r3, [r7, #4]
    2544:	2213      	movs	r2, #19
    2546:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    2548:	687b      	ldr	r3, [r7, #4]
    254a:	2200      	movs	r2, #0
    254c:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
    254e:	46c0      	nop			; (mov r8, r8)
    2550:	46bd      	mov	sp, r7
    2552:	b002      	add	sp, #8
    2554:	bd80      	pop	{r7, pc}
	...

00002558 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    2558:	b580      	push	{r7, lr}
    255a:	b084      	sub	sp, #16
    255c:	af00      	add	r7, sp, #0
    255e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2560:	687b      	ldr	r3, [r7, #4]
    2562:	681b      	ldr	r3, [r3, #0]
    2564:	60fb      	str	r3, [r7, #12]
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    2566:	687b      	ldr	r3, [r7, #4]
    2568:	0018      	movs	r0, r3
    256a:	4b06      	ldr	r3, [pc, #24]	; (2584 <usart_enable+0x2c>)
    256c:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    256e:	68fb      	ldr	r3, [r7, #12]
    2570:	681b      	ldr	r3, [r3, #0]
    2572:	2202      	movs	r2, #2
    2574:	431a      	orrs	r2, r3
    2576:	68fb      	ldr	r3, [r7, #12]
    2578:	601a      	str	r2, [r3, #0]
}
    257a:	46c0      	nop			; (mov r8, r8)
    257c:	46bd      	mov	sp, r7
    257e:	b004      	add	sp, #16
    2580:	bd80      	pop	{r7, pc}
    2582:	46c0      	nop			; (mov r8, r8)
    2584:	00002475 	.word	0x00002475

00002588 <usart_serial_init>:
 */
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    2588:	b580      	push	{r7, lr}
    258a:	b084      	sub	sp, #16
    258c:	af00      	add	r7, sp, #0
    258e:	60f8      	str	r0, [r7, #12]
    2590:	60b9      	str	r1, [r7, #8]
    2592:	607a      	str	r2, [r7, #4]
	if (usart_init(module, hw, config) == STATUS_OK) {
    2594:	687a      	ldr	r2, [r7, #4]
    2596:	68b9      	ldr	r1, [r7, #8]
    2598:	68fb      	ldr	r3, [r7, #12]
    259a:	0018      	movs	r0, r3
    259c:	4b05      	ldr	r3, [pc, #20]	; (25b4 <usart_serial_init+0x2c>)
    259e:	4798      	blx	r3
    25a0:	1e03      	subs	r3, r0, #0
    25a2:	d101      	bne.n	25a8 <usart_serial_init+0x20>
		return true;
    25a4:	2301      	movs	r3, #1
    25a6:	e000      	b.n	25aa <usart_serial_init+0x22>
	}
	else {
		return false;
    25a8:	2300      	movs	r3, #0
	}
}
    25aa:	0018      	movs	r0, r3
    25ac:	46bd      	mov	sp, r7
    25ae:	b004      	add	sp, #16
    25b0:	bd80      	pop	{r7, pc}
    25b2:	46c0      	nop			; (mov r8, r8)
    25b4:	00001551 	.word	0x00001551

000025b8 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    25b8:	b580      	push	{r7, lr}
    25ba:	b082      	sub	sp, #8
    25bc:	af00      	add	r7, sp, #0
    25be:	6078      	str	r0, [r7, #4]
    25c0:	000a      	movs	r2, r1
    25c2:	1cfb      	adds	r3, r7, #3
    25c4:	701a      	strb	r2, [r3, #0]
	while(STATUS_OK !=usart_write_wait(module, c));
    25c6:	46c0      	nop			; (mov r8, r8)
    25c8:	1cfb      	adds	r3, r7, #3
    25ca:	781b      	ldrb	r3, [r3, #0]
    25cc:	b29a      	uxth	r2, r3
    25ce:	687b      	ldr	r3, [r7, #4]
    25d0:	0011      	movs	r1, r2
    25d2:	0018      	movs	r0, r3
    25d4:	4b04      	ldr	r3, [pc, #16]	; (25e8 <usart_serial_putchar+0x30>)
    25d6:	4798      	blx	r3
    25d8:	1e03      	subs	r3, r0, #0
    25da:	d1f5      	bne.n	25c8 <usart_serial_putchar+0x10>

	return STATUS_OK;
    25dc:	2300      	movs	r3, #0
}
    25de:	0018      	movs	r0, r3
    25e0:	46bd      	mov	sp, r7
    25e2:	b002      	add	sp, #8
    25e4:	bd80      	pop	{r7, pc}
    25e6:	46c0      	nop			; (mov r8, r8)
    25e8:	00001755 	.word	0x00001755

000025ec <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    25ec:	b580      	push	{r7, lr}
    25ee:	b084      	sub	sp, #16
    25f0:	af00      	add	r7, sp, #0
    25f2:	6078      	str	r0, [r7, #4]
    25f4:	6039      	str	r1, [r7, #0]
	uint16_t temp = 0;
    25f6:	230e      	movs	r3, #14
    25f8:	18fb      	adds	r3, r7, r3
    25fa:	2200      	movs	r2, #0
    25fc:	801a      	strh	r2, [r3, #0]

	while(STATUS_OK != usart_read_wait(module, &temp));
    25fe:	46c0      	nop			; (mov r8, r8)
    2600:	230e      	movs	r3, #14
    2602:	18fa      	adds	r2, r7, r3
    2604:	687b      	ldr	r3, [r7, #4]
    2606:	0011      	movs	r1, r2
    2608:	0018      	movs	r0, r3
    260a:	4b07      	ldr	r3, [pc, #28]	; (2628 <usart_serial_getchar+0x3c>)
    260c:	4798      	blx	r3
    260e:	1e03      	subs	r3, r0, #0
    2610:	d1f6      	bne.n	2600 <usart_serial_getchar+0x14>

	*c = temp;
    2612:	230e      	movs	r3, #14
    2614:	18fb      	adds	r3, r7, r3
    2616:	881b      	ldrh	r3, [r3, #0]
    2618:	b2da      	uxtb	r2, r3
    261a:	683b      	ldr	r3, [r7, #0]
    261c:	701a      	strb	r2, [r3, #0]
}
    261e:	46c0      	nop			; (mov r8, r8)
    2620:	46bd      	mov	sp, r7
    2622:	b004      	add	sp, #16
    2624:	bd80      	pop	{r7, pc}
    2626:	46c0      	nop			; (mov r8, r8)
    2628:	000017bd 	.word	0x000017bd

0000262c <stdio_serial_init>:
 */
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    262c:	b580      	push	{r7, lr}
    262e:	b084      	sub	sp, #16
    2630:	af00      	add	r7, sp, #0
    2632:	60f8      	str	r0, [r7, #12]
    2634:	60b9      	str	r1, [r7, #8]
    2636:	607a      	str	r2, [r7, #4]
	stdio_base = (void *)module;
    2638:	4b10      	ldr	r3, [pc, #64]	; (267c <stdio_serial_init+0x50>)
    263a:	68fa      	ldr	r2, [r7, #12]
    263c:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    263e:	4b10      	ldr	r3, [pc, #64]	; (2680 <stdio_serial_init+0x54>)
    2640:	4a10      	ldr	r2, [pc, #64]	; (2684 <stdio_serial_init+0x58>)
    2642:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    2644:	4b10      	ldr	r3, [pc, #64]	; (2688 <stdio_serial_init+0x5c>)
    2646:	4a11      	ldr	r2, [pc, #68]	; (268c <stdio_serial_init+0x60>)
    2648:	601a      	str	r2, [r3, #0]

	usart_serial_init(module, hw, config);
    264a:	687a      	ldr	r2, [r7, #4]
    264c:	68b9      	ldr	r1, [r7, #8]
    264e:	68fb      	ldr	r3, [r7, #12]
    2650:	0018      	movs	r0, r3
    2652:	4b0f      	ldr	r3, [pc, #60]	; (2690 <stdio_serial_init+0x64>)
    2654:	4798      	blx	r3
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    2656:	4b0f      	ldr	r3, [pc, #60]	; (2694 <stdio_serial_init+0x68>)
    2658:	681b      	ldr	r3, [r3, #0]
    265a:	689b      	ldr	r3, [r3, #8]
    265c:	2100      	movs	r1, #0
    265e:	0018      	movs	r0, r3
    2660:	4b0d      	ldr	r3, [pc, #52]	; (2698 <stdio_serial_init+0x6c>)
    2662:	4798      	blx	r3
	setbuf(stdin, NULL);
    2664:	4b0b      	ldr	r3, [pc, #44]	; (2694 <stdio_serial_init+0x68>)
    2666:	681b      	ldr	r3, [r3, #0]
    2668:	685b      	ldr	r3, [r3, #4]
    266a:	2100      	movs	r1, #0
    266c:	0018      	movs	r0, r3
    266e:	4b0a      	ldr	r3, [pc, #40]	; (2698 <stdio_serial_init+0x6c>)
    2670:	4798      	blx	r3
	// Note: Already the case in IAR's Normal DLIB default configuration
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
}
    2672:	46c0      	nop			; (mov r8, r8)
    2674:	46bd      	mov	sp, r7
    2676:	b004      	add	sp, #16
    2678:	bd80      	pop	{r7, pc}
    267a:	46c0      	nop			; (mov r8, r8)
    267c:	200004bc 	.word	0x200004bc
    2680:	200004b8 	.word	0x200004b8
    2684:	000025b9 	.word	0x000025b9
    2688:	200004b4 	.word	0x200004b4
    268c:	000025ed 	.word	0x000025ed
    2690:	00002589 	.word	0x00002589
    2694:	20000404 	.word	0x20000404
    2698:	00002aa5 	.word	0x00002aa5

0000269c <debug_serial_init>:
 *  Author: YURI
 */ 
#include "Debug_Serial_Init.h"

void debug_serial_init()
{
    269c:	b580      	push	{r7, lr}
    269e:	b090      	sub	sp, #64	; 0x40
    26a0:	af00      	add	r7, sp, #0
	struct usart_config config_usart;

	usart_get_config_defaults(&config_usart);
    26a2:	003b      	movs	r3, r7
    26a4:	0018      	movs	r0, r3
    26a6:	4b13      	ldr	r3, [pc, #76]	; (26f4 <debug_serial_init+0x58>)
    26a8:	4798      	blx	r3
	config_usart.baudrate    = 9600;
    26aa:	003b      	movs	r3, r7
    26ac:	2296      	movs	r2, #150	; 0x96
    26ae:	0192      	lsls	r2, r2, #6
    26b0:	621a      	str	r2, [r3, #32]
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    26b2:	003b      	movs	r3, r7
    26b4:	2280      	movs	r2, #128	; 0x80
    26b6:	0352      	lsls	r2, r2, #13
    26b8:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    26ba:	003b      	movs	r3, r7
    26bc:	4a0e      	ldr	r2, [pc, #56]	; (26f8 <debug_serial_init+0x5c>)
    26be:	631a      	str	r2, [r3, #48]	; 0x30
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    26c0:	003b      	movs	r3, r7
    26c2:	4a0e      	ldr	r2, [pc, #56]	; (26fc <debug_serial_init+0x60>)
    26c4:	635a      	str	r2, [r3, #52]	; 0x34
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    26c6:	003b      	movs	r3, r7
    26c8:	2201      	movs	r2, #1
    26ca:	4252      	negs	r2, r2
    26cc:	639a      	str	r2, [r3, #56]	; 0x38
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    26ce:	003b      	movs	r3, r7
    26d0:	2201      	movs	r2, #1
    26d2:	4252      	negs	r2, r2
    26d4:	63da      	str	r2, [r3, #60]	; 0x3c

	stdio_serial_init(&usart_instance, EDBG_CDC_MODULE, &config_usart);
    26d6:	003a      	movs	r2, r7
    26d8:	4909      	ldr	r1, [pc, #36]	; (2700 <debug_serial_init+0x64>)
    26da:	4b0a      	ldr	r3, [pc, #40]	; (2704 <debug_serial_init+0x68>)
    26dc:	0018      	movs	r0, r3
    26de:	4b0a      	ldr	r3, [pc, #40]	; (2708 <debug_serial_init+0x6c>)
    26e0:	4798      	blx	r3
	
	usart_enable(&usart_instance);
    26e2:	4b08      	ldr	r3, [pc, #32]	; (2704 <debug_serial_init+0x68>)
    26e4:	0018      	movs	r0, r3
    26e6:	4b09      	ldr	r3, [pc, #36]	; (270c <debug_serial_init+0x70>)
    26e8:	4798      	blx	r3
    26ea:	46c0      	nop			; (mov r8, r8)
    26ec:	46bd      	mov	sp, r7
    26ee:	b010      	add	sp, #64	; 0x40
    26f0:	bd80      	pop	{r7, pc}
    26f2:	46c0      	nop			; (mov r8, r8)
    26f4:	00002499 	.word	0x00002499
    26f8:	00160002 	.word	0x00160002
    26fc:	00170002 	.word	0x00170002
    2700:	42000c00 	.word	0x42000c00
    2704:	200004c0 	.word	0x200004c0
    2708:	0000262d 	.word	0x0000262d
    270c:	00002559 	.word	0x00002559

00002710 <main>:
#include "aes/aes.h"



int main (void)
{
    2710:	b590      	push	{r4, r7, lr}
    2712:	b08b      	sub	sp, #44	; 0x2c
    2714:	af00      	add	r7, sp, #0
	system_init();
    2716:	4b26      	ldr	r3, [pc, #152]	; (27b0 <main+0xa0>)
    2718:	4798      	blx	r3
	debug_serial_init();
    271a:	4b26      	ldr	r3, [pc, #152]	; (27b4 <main+0xa4>)
    271c:	4798      	blx	r3
	printf("AES Lib test \r\n\r\n");
    271e:	4b26      	ldr	r3, [pc, #152]	; (27b8 <main+0xa8>)
    2720:	0018      	movs	r0, r3
    2722:	4b26      	ldr	r3, [pc, #152]	; (27bc <main+0xac>)
    2724:	4798      	blx	r3
	
	unsigned char message[16] = {
    2726:	2310      	movs	r3, #16
    2728:	18fb      	adds	r3, r7, r3
    272a:	4a25      	ldr	r2, [pc, #148]	; (27c0 <main+0xb0>)
    272c:	ca13      	ldmia	r2!, {r0, r1, r4}
    272e:	c313      	stmia	r3!, {r0, r1, r4}
    2730:	6812      	ldr	r2, [r2, #0]
    2732:	601a      	str	r2, [r3, #0]
		0x04, 0x05, 0x06, 0x07,
		0x08, 0x09, 0x0A, 0x0B,
		0x0C, 0x0D, 0x0E, 0x0F
		};
	
	unsigned char key[16] = {
    2734:	003b      	movs	r3, r7
    2736:	4a22      	ldr	r2, [pc, #136]	; (27c0 <main+0xb0>)
    2738:	ca13      	ldmia	r2!, {r0, r1, r4}
    273a:	c313      	stmia	r3!, {r0, r1, r4}
    273c:	6812      	ldr	r2, [r2, #0]
    273e:	601a      	str	r2, [r3, #0]
		0x04, 0x05, 0x06, 0x07,
		0x08, 0x09, 0x0A, 0x0B,
		0x0C, 0x0D, 0x0E, 0x0F
		};

	printf("Message is \r\n");
    2740:	4b20      	ldr	r3, [pc, #128]	; (27c4 <main+0xb4>)
    2742:	0018      	movs	r0, r3
    2744:	4b1d      	ldr	r3, [pc, #116]	; (27bc <main+0xac>)
    2746:	4798      	blx	r3
	for (int i=0; i<16; i++)
    2748:	2300      	movs	r3, #0
    274a:	627b      	str	r3, [r7, #36]	; 0x24
    274c:	e00d      	b.n	276a <main+0x5a>
	{
		printf("%02x \r\n", message[i]);
    274e:	2310      	movs	r3, #16
    2750:	18fa      	adds	r2, r7, r3
    2752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2754:	18d3      	adds	r3, r2, r3
    2756:	781b      	ldrb	r3, [r3, #0]
    2758:	001a      	movs	r2, r3
    275a:	4b1b      	ldr	r3, [pc, #108]	; (27c8 <main+0xb8>)
    275c:	0011      	movs	r1, r2
    275e:	0018      	movs	r0, r3
    2760:	4b1a      	ldr	r3, [pc, #104]	; (27cc <main+0xbc>)
    2762:	4798      	blx	r3
	for (int i=0; i<16; i++)
    2764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2766:	3301      	adds	r3, #1
    2768:	627b      	str	r3, [r7, #36]	; 0x24
    276a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    276c:	2b0f      	cmp	r3, #15
    276e:	ddee      	ble.n	274e <main+0x3e>
	}

	aes_encrypt(message, key);
    2770:	003a      	movs	r2, r7
    2772:	2310      	movs	r3, #16
    2774:	18fb      	adds	r3, r7, r3
    2776:	0011      	movs	r1, r2
    2778:	0018      	movs	r0, r3
    277a:	4b15      	ldr	r3, [pc, #84]	; (27d0 <main+0xc0>)
    277c:	4798      	blx	r3
	
	printf("Cipher is \r\n");
    277e:	4b15      	ldr	r3, [pc, #84]	; (27d4 <main+0xc4>)
    2780:	0018      	movs	r0, r3
    2782:	4b0e      	ldr	r3, [pc, #56]	; (27bc <main+0xac>)
    2784:	4798      	blx	r3
	
	for (int i=0; i<16; i++)
    2786:	2300      	movs	r3, #0
    2788:	623b      	str	r3, [r7, #32]
    278a:	e00d      	b.n	27a8 <main+0x98>
	{
		printf("%02x \r\n", message[i]);
    278c:	2310      	movs	r3, #16
    278e:	18fa      	adds	r2, r7, r3
    2790:	6a3b      	ldr	r3, [r7, #32]
    2792:	18d3      	adds	r3, r2, r3
    2794:	781b      	ldrb	r3, [r3, #0]
    2796:	001a      	movs	r2, r3
    2798:	4b0b      	ldr	r3, [pc, #44]	; (27c8 <main+0xb8>)
    279a:	0011      	movs	r1, r2
    279c:	0018      	movs	r0, r3
    279e:	4b0b      	ldr	r3, [pc, #44]	; (27cc <main+0xbc>)
    27a0:	4798      	blx	r3
	for (int i=0; i<16; i++)
    27a2:	6a3b      	ldr	r3, [r7, #32]
    27a4:	3301      	adds	r3, #1
    27a6:	623b      	str	r3, [r7, #32]
    27a8:	6a3b      	ldr	r3, [r7, #32]
    27aa:	2b0f      	cmp	r3, #15
    27ac:	ddee      	ble.n	278c <main+0x7c>
	}	
	
	
	while(1);
    27ae:	e7fe      	b.n	27ae <main+0x9e>
    27b0:	00002231 	.word	0x00002231
    27b4:	0000269d 	.word	0x0000269d
    27b8:	00003ab8 	.word	0x00003ab8
    27bc:	00002a91 	.word	0x00002a91
    27c0:	00003af0 	.word	0x00003af0
    27c4:	00003acc 	.word	0x00003acc
    27c8:	00003adc 	.word	0x00003adc
    27cc:	0000299d 	.word	0x0000299d
    27d0:	000007d1 	.word	0x000007d1
    27d4:	00003ae4 	.word	0x00003ae4

000027d8 <__udivsi3>:
    27d8:	2200      	movs	r2, #0
    27da:	0843      	lsrs	r3, r0, #1
    27dc:	428b      	cmp	r3, r1
    27de:	d374      	bcc.n	28ca <__udivsi3+0xf2>
    27e0:	0903      	lsrs	r3, r0, #4
    27e2:	428b      	cmp	r3, r1
    27e4:	d35f      	bcc.n	28a6 <__udivsi3+0xce>
    27e6:	0a03      	lsrs	r3, r0, #8
    27e8:	428b      	cmp	r3, r1
    27ea:	d344      	bcc.n	2876 <__udivsi3+0x9e>
    27ec:	0b03      	lsrs	r3, r0, #12
    27ee:	428b      	cmp	r3, r1
    27f0:	d328      	bcc.n	2844 <__udivsi3+0x6c>
    27f2:	0c03      	lsrs	r3, r0, #16
    27f4:	428b      	cmp	r3, r1
    27f6:	d30d      	bcc.n	2814 <__udivsi3+0x3c>
    27f8:	22ff      	movs	r2, #255	; 0xff
    27fa:	0209      	lsls	r1, r1, #8
    27fc:	ba12      	rev	r2, r2
    27fe:	0c03      	lsrs	r3, r0, #16
    2800:	428b      	cmp	r3, r1
    2802:	d302      	bcc.n	280a <__udivsi3+0x32>
    2804:	1212      	asrs	r2, r2, #8
    2806:	0209      	lsls	r1, r1, #8
    2808:	d065      	beq.n	28d6 <__udivsi3+0xfe>
    280a:	0b03      	lsrs	r3, r0, #12
    280c:	428b      	cmp	r3, r1
    280e:	d319      	bcc.n	2844 <__udivsi3+0x6c>
    2810:	e000      	b.n	2814 <__udivsi3+0x3c>
    2812:	0a09      	lsrs	r1, r1, #8
    2814:	0bc3      	lsrs	r3, r0, #15
    2816:	428b      	cmp	r3, r1
    2818:	d301      	bcc.n	281e <__udivsi3+0x46>
    281a:	03cb      	lsls	r3, r1, #15
    281c:	1ac0      	subs	r0, r0, r3
    281e:	4152      	adcs	r2, r2
    2820:	0b83      	lsrs	r3, r0, #14
    2822:	428b      	cmp	r3, r1
    2824:	d301      	bcc.n	282a <__udivsi3+0x52>
    2826:	038b      	lsls	r3, r1, #14
    2828:	1ac0      	subs	r0, r0, r3
    282a:	4152      	adcs	r2, r2
    282c:	0b43      	lsrs	r3, r0, #13
    282e:	428b      	cmp	r3, r1
    2830:	d301      	bcc.n	2836 <__udivsi3+0x5e>
    2832:	034b      	lsls	r3, r1, #13
    2834:	1ac0      	subs	r0, r0, r3
    2836:	4152      	adcs	r2, r2
    2838:	0b03      	lsrs	r3, r0, #12
    283a:	428b      	cmp	r3, r1
    283c:	d301      	bcc.n	2842 <__udivsi3+0x6a>
    283e:	030b      	lsls	r3, r1, #12
    2840:	1ac0      	subs	r0, r0, r3
    2842:	4152      	adcs	r2, r2
    2844:	0ac3      	lsrs	r3, r0, #11
    2846:	428b      	cmp	r3, r1
    2848:	d301      	bcc.n	284e <__udivsi3+0x76>
    284a:	02cb      	lsls	r3, r1, #11
    284c:	1ac0      	subs	r0, r0, r3
    284e:	4152      	adcs	r2, r2
    2850:	0a83      	lsrs	r3, r0, #10
    2852:	428b      	cmp	r3, r1
    2854:	d301      	bcc.n	285a <__udivsi3+0x82>
    2856:	028b      	lsls	r3, r1, #10
    2858:	1ac0      	subs	r0, r0, r3
    285a:	4152      	adcs	r2, r2
    285c:	0a43      	lsrs	r3, r0, #9
    285e:	428b      	cmp	r3, r1
    2860:	d301      	bcc.n	2866 <__udivsi3+0x8e>
    2862:	024b      	lsls	r3, r1, #9
    2864:	1ac0      	subs	r0, r0, r3
    2866:	4152      	adcs	r2, r2
    2868:	0a03      	lsrs	r3, r0, #8
    286a:	428b      	cmp	r3, r1
    286c:	d301      	bcc.n	2872 <__udivsi3+0x9a>
    286e:	020b      	lsls	r3, r1, #8
    2870:	1ac0      	subs	r0, r0, r3
    2872:	4152      	adcs	r2, r2
    2874:	d2cd      	bcs.n	2812 <__udivsi3+0x3a>
    2876:	09c3      	lsrs	r3, r0, #7
    2878:	428b      	cmp	r3, r1
    287a:	d301      	bcc.n	2880 <__udivsi3+0xa8>
    287c:	01cb      	lsls	r3, r1, #7
    287e:	1ac0      	subs	r0, r0, r3
    2880:	4152      	adcs	r2, r2
    2882:	0983      	lsrs	r3, r0, #6
    2884:	428b      	cmp	r3, r1
    2886:	d301      	bcc.n	288c <__udivsi3+0xb4>
    2888:	018b      	lsls	r3, r1, #6
    288a:	1ac0      	subs	r0, r0, r3
    288c:	4152      	adcs	r2, r2
    288e:	0943      	lsrs	r3, r0, #5
    2890:	428b      	cmp	r3, r1
    2892:	d301      	bcc.n	2898 <__udivsi3+0xc0>
    2894:	014b      	lsls	r3, r1, #5
    2896:	1ac0      	subs	r0, r0, r3
    2898:	4152      	adcs	r2, r2
    289a:	0903      	lsrs	r3, r0, #4
    289c:	428b      	cmp	r3, r1
    289e:	d301      	bcc.n	28a4 <__udivsi3+0xcc>
    28a0:	010b      	lsls	r3, r1, #4
    28a2:	1ac0      	subs	r0, r0, r3
    28a4:	4152      	adcs	r2, r2
    28a6:	08c3      	lsrs	r3, r0, #3
    28a8:	428b      	cmp	r3, r1
    28aa:	d301      	bcc.n	28b0 <__udivsi3+0xd8>
    28ac:	00cb      	lsls	r3, r1, #3
    28ae:	1ac0      	subs	r0, r0, r3
    28b0:	4152      	adcs	r2, r2
    28b2:	0883      	lsrs	r3, r0, #2
    28b4:	428b      	cmp	r3, r1
    28b6:	d301      	bcc.n	28bc <__udivsi3+0xe4>
    28b8:	008b      	lsls	r3, r1, #2
    28ba:	1ac0      	subs	r0, r0, r3
    28bc:	4152      	adcs	r2, r2
    28be:	0843      	lsrs	r3, r0, #1
    28c0:	428b      	cmp	r3, r1
    28c2:	d301      	bcc.n	28c8 <__udivsi3+0xf0>
    28c4:	004b      	lsls	r3, r1, #1
    28c6:	1ac0      	subs	r0, r0, r3
    28c8:	4152      	adcs	r2, r2
    28ca:	1a41      	subs	r1, r0, r1
    28cc:	d200      	bcs.n	28d0 <__udivsi3+0xf8>
    28ce:	4601      	mov	r1, r0
    28d0:	4152      	adcs	r2, r2
    28d2:	4610      	mov	r0, r2
    28d4:	4770      	bx	lr
    28d6:	e7ff      	b.n	28d8 <__udivsi3+0x100>
    28d8:	b501      	push	{r0, lr}
    28da:	2000      	movs	r0, #0
    28dc:	f000 f806 	bl	28ec <__aeabi_idiv0>
    28e0:	bd02      	pop	{r1, pc}
    28e2:	46c0      	nop			; (mov r8, r8)

000028e4 <__aeabi_uidivmod>:
    28e4:	2900      	cmp	r1, #0
    28e6:	d0f7      	beq.n	28d8 <__udivsi3+0x100>
    28e8:	e776      	b.n	27d8 <__udivsi3>
    28ea:	4770      	bx	lr

000028ec <__aeabi_idiv0>:
    28ec:	4770      	bx	lr
    28ee:	46c0      	nop			; (mov r8, r8)

000028f0 <__aeabi_lmul>:
    28f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    28f2:	46ce      	mov	lr, r9
    28f4:	4647      	mov	r7, r8
    28f6:	0415      	lsls	r5, r2, #16
    28f8:	0c2d      	lsrs	r5, r5, #16
    28fa:	002e      	movs	r6, r5
    28fc:	b580      	push	{r7, lr}
    28fe:	0407      	lsls	r7, r0, #16
    2900:	0c14      	lsrs	r4, r2, #16
    2902:	0c3f      	lsrs	r7, r7, #16
    2904:	4699      	mov	r9, r3
    2906:	0c03      	lsrs	r3, r0, #16
    2908:	437e      	muls	r6, r7
    290a:	435d      	muls	r5, r3
    290c:	4367      	muls	r7, r4
    290e:	4363      	muls	r3, r4
    2910:	197f      	adds	r7, r7, r5
    2912:	0c34      	lsrs	r4, r6, #16
    2914:	19e4      	adds	r4, r4, r7
    2916:	469c      	mov	ip, r3
    2918:	42a5      	cmp	r5, r4
    291a:	d903      	bls.n	2924 <__aeabi_lmul+0x34>
    291c:	2380      	movs	r3, #128	; 0x80
    291e:	025b      	lsls	r3, r3, #9
    2920:	4698      	mov	r8, r3
    2922:	44c4      	add	ip, r8
    2924:	464b      	mov	r3, r9
    2926:	4351      	muls	r1, r2
    2928:	4343      	muls	r3, r0
    292a:	0436      	lsls	r6, r6, #16
    292c:	0c36      	lsrs	r6, r6, #16
    292e:	0c25      	lsrs	r5, r4, #16
    2930:	0424      	lsls	r4, r4, #16
    2932:	4465      	add	r5, ip
    2934:	19a4      	adds	r4, r4, r6
    2936:	1859      	adds	r1, r3, r1
    2938:	1949      	adds	r1, r1, r5
    293a:	0020      	movs	r0, r4
    293c:	bc0c      	pop	{r2, r3}
    293e:	4690      	mov	r8, r2
    2940:	4699      	mov	r9, r3
    2942:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002944 <__libc_init_array>:
    2944:	b570      	push	{r4, r5, r6, lr}
    2946:	2600      	movs	r6, #0
    2948:	4d0c      	ldr	r5, [pc, #48]	; (297c <__libc_init_array+0x38>)
    294a:	4c0d      	ldr	r4, [pc, #52]	; (2980 <__libc_init_array+0x3c>)
    294c:	1b64      	subs	r4, r4, r5
    294e:	10a4      	asrs	r4, r4, #2
    2950:	42a6      	cmp	r6, r4
    2952:	d109      	bne.n	2968 <__libc_init_array+0x24>
    2954:	2600      	movs	r6, #0
    2956:	f001 f91f 	bl	3b98 <_init>
    295a:	4d0a      	ldr	r5, [pc, #40]	; (2984 <__libc_init_array+0x40>)
    295c:	4c0a      	ldr	r4, [pc, #40]	; (2988 <__libc_init_array+0x44>)
    295e:	1b64      	subs	r4, r4, r5
    2960:	10a4      	asrs	r4, r4, #2
    2962:	42a6      	cmp	r6, r4
    2964:	d105      	bne.n	2972 <__libc_init_array+0x2e>
    2966:	bd70      	pop	{r4, r5, r6, pc}
    2968:	00b3      	lsls	r3, r6, #2
    296a:	58eb      	ldr	r3, [r5, r3]
    296c:	4798      	blx	r3
    296e:	3601      	adds	r6, #1
    2970:	e7ee      	b.n	2950 <__libc_init_array+0xc>
    2972:	00b3      	lsls	r3, r6, #2
    2974:	58eb      	ldr	r3, [r5, r3]
    2976:	4798      	blx	r3
    2978:	3601      	adds	r6, #1
    297a:	e7f2      	b.n	2962 <__libc_init_array+0x1e>
    297c:	00003ba4 	.word	0x00003ba4
    2980:	00003ba4 	.word	0x00003ba4
    2984:	00003ba4 	.word	0x00003ba4
    2988:	00003ba8 	.word	0x00003ba8

0000298c <memset>:
    298c:	0003      	movs	r3, r0
    298e:	1882      	adds	r2, r0, r2
    2990:	4293      	cmp	r3, r2
    2992:	d100      	bne.n	2996 <memset+0xa>
    2994:	4770      	bx	lr
    2996:	7019      	strb	r1, [r3, #0]
    2998:	3301      	adds	r3, #1
    299a:	e7f9      	b.n	2990 <memset+0x4>

0000299c <iprintf>:
    299c:	b40f      	push	{r0, r1, r2, r3}
    299e:	4b0b      	ldr	r3, [pc, #44]	; (29cc <iprintf+0x30>)
    29a0:	b513      	push	{r0, r1, r4, lr}
    29a2:	681c      	ldr	r4, [r3, #0]
    29a4:	2c00      	cmp	r4, #0
    29a6:	d005      	beq.n	29b4 <iprintf+0x18>
    29a8:	69a3      	ldr	r3, [r4, #24]
    29aa:	2b00      	cmp	r3, #0
    29ac:	d102      	bne.n	29b4 <iprintf+0x18>
    29ae:	0020      	movs	r0, r4
    29b0:	f000 faf2 	bl	2f98 <__sinit>
    29b4:	ab05      	add	r3, sp, #20
    29b6:	9a04      	ldr	r2, [sp, #16]
    29b8:	68a1      	ldr	r1, [r4, #8]
    29ba:	0020      	movs	r0, r4
    29bc:	9301      	str	r3, [sp, #4]
    29be:	f000 fcc7 	bl	3350 <_vfiprintf_r>
    29c2:	bc16      	pop	{r1, r2, r4}
    29c4:	bc08      	pop	{r3}
    29c6:	b004      	add	sp, #16
    29c8:	4718      	bx	r3
    29ca:	46c0      	nop			; (mov r8, r8)
    29cc:	20000404 	.word	0x20000404

000029d0 <_puts_r>:
    29d0:	b570      	push	{r4, r5, r6, lr}
    29d2:	0005      	movs	r5, r0
    29d4:	000e      	movs	r6, r1
    29d6:	2800      	cmp	r0, #0
    29d8:	d004      	beq.n	29e4 <_puts_r+0x14>
    29da:	6983      	ldr	r3, [r0, #24]
    29dc:	2b00      	cmp	r3, #0
    29de:	d101      	bne.n	29e4 <_puts_r+0x14>
    29e0:	f000 fada 	bl	2f98 <__sinit>
    29e4:	69ab      	ldr	r3, [r5, #24]
    29e6:	68ac      	ldr	r4, [r5, #8]
    29e8:	2b00      	cmp	r3, #0
    29ea:	d102      	bne.n	29f2 <_puts_r+0x22>
    29ec:	0028      	movs	r0, r5
    29ee:	f000 fad3 	bl	2f98 <__sinit>
    29f2:	4b24      	ldr	r3, [pc, #144]	; (2a84 <_puts_r+0xb4>)
    29f4:	429c      	cmp	r4, r3
    29f6:	d10f      	bne.n	2a18 <_puts_r+0x48>
    29f8:	686c      	ldr	r4, [r5, #4]
    29fa:	89a3      	ldrh	r3, [r4, #12]
    29fc:	071b      	lsls	r3, r3, #28
    29fe:	d502      	bpl.n	2a06 <_puts_r+0x36>
    2a00:	6923      	ldr	r3, [r4, #16]
    2a02:	2b00      	cmp	r3, #0
    2a04:	d120      	bne.n	2a48 <_puts_r+0x78>
    2a06:	0021      	movs	r1, r4
    2a08:	0028      	movs	r0, r5
    2a0a:	f000 f957 	bl	2cbc <__swsetup_r>
    2a0e:	2800      	cmp	r0, #0
    2a10:	d01a      	beq.n	2a48 <_puts_r+0x78>
    2a12:	2001      	movs	r0, #1
    2a14:	4240      	negs	r0, r0
    2a16:	bd70      	pop	{r4, r5, r6, pc}
    2a18:	4b1b      	ldr	r3, [pc, #108]	; (2a88 <_puts_r+0xb8>)
    2a1a:	429c      	cmp	r4, r3
    2a1c:	d101      	bne.n	2a22 <_puts_r+0x52>
    2a1e:	68ac      	ldr	r4, [r5, #8]
    2a20:	e7eb      	b.n	29fa <_puts_r+0x2a>
    2a22:	4b1a      	ldr	r3, [pc, #104]	; (2a8c <_puts_r+0xbc>)
    2a24:	429c      	cmp	r4, r3
    2a26:	d1e8      	bne.n	29fa <_puts_r+0x2a>
    2a28:	68ec      	ldr	r4, [r5, #12]
    2a2a:	e7e6      	b.n	29fa <_puts_r+0x2a>
    2a2c:	3b01      	subs	r3, #1
    2a2e:	3601      	adds	r6, #1
    2a30:	60a3      	str	r3, [r4, #8]
    2a32:	2b00      	cmp	r3, #0
    2a34:	da04      	bge.n	2a40 <_puts_r+0x70>
    2a36:	69a2      	ldr	r2, [r4, #24]
    2a38:	4293      	cmp	r3, r2
    2a3a:	db16      	blt.n	2a6a <_puts_r+0x9a>
    2a3c:	290a      	cmp	r1, #10
    2a3e:	d014      	beq.n	2a6a <_puts_r+0x9a>
    2a40:	6823      	ldr	r3, [r4, #0]
    2a42:	1c5a      	adds	r2, r3, #1
    2a44:	6022      	str	r2, [r4, #0]
    2a46:	7019      	strb	r1, [r3, #0]
    2a48:	7831      	ldrb	r1, [r6, #0]
    2a4a:	68a3      	ldr	r3, [r4, #8]
    2a4c:	2900      	cmp	r1, #0
    2a4e:	d1ed      	bne.n	2a2c <_puts_r+0x5c>
    2a50:	3b01      	subs	r3, #1
    2a52:	60a3      	str	r3, [r4, #8]
    2a54:	2b00      	cmp	r3, #0
    2a56:	da0f      	bge.n	2a78 <_puts_r+0xa8>
    2a58:	0022      	movs	r2, r4
    2a5a:	310a      	adds	r1, #10
    2a5c:	0028      	movs	r0, r5
    2a5e:	f000 f8d7 	bl	2c10 <__swbuf_r>
    2a62:	1c43      	adds	r3, r0, #1
    2a64:	d0d5      	beq.n	2a12 <_puts_r+0x42>
    2a66:	200a      	movs	r0, #10
    2a68:	e7d5      	b.n	2a16 <_puts_r+0x46>
    2a6a:	0022      	movs	r2, r4
    2a6c:	0028      	movs	r0, r5
    2a6e:	f000 f8cf 	bl	2c10 <__swbuf_r>
    2a72:	1c43      	adds	r3, r0, #1
    2a74:	d1e8      	bne.n	2a48 <_puts_r+0x78>
    2a76:	e7cc      	b.n	2a12 <_puts_r+0x42>
    2a78:	200a      	movs	r0, #10
    2a7a:	6823      	ldr	r3, [r4, #0]
    2a7c:	1c5a      	adds	r2, r3, #1
    2a7e:	6022      	str	r2, [r4, #0]
    2a80:	7018      	strb	r0, [r3, #0]
    2a82:	e7c8      	b.n	2a16 <_puts_r+0x46>
    2a84:	00003b24 	.word	0x00003b24
    2a88:	00003b44 	.word	0x00003b44
    2a8c:	00003b04 	.word	0x00003b04

00002a90 <puts>:
    2a90:	b510      	push	{r4, lr}
    2a92:	4b03      	ldr	r3, [pc, #12]	; (2aa0 <puts+0x10>)
    2a94:	0001      	movs	r1, r0
    2a96:	6818      	ldr	r0, [r3, #0]
    2a98:	f7ff ff9a 	bl	29d0 <_puts_r>
    2a9c:	bd10      	pop	{r4, pc}
    2a9e:	46c0      	nop			; (mov r8, r8)
    2aa0:	20000404 	.word	0x20000404

00002aa4 <setbuf>:
    2aa4:	424a      	negs	r2, r1
    2aa6:	414a      	adcs	r2, r1
    2aa8:	2380      	movs	r3, #128	; 0x80
    2aaa:	b510      	push	{r4, lr}
    2aac:	0052      	lsls	r2, r2, #1
    2aae:	00db      	lsls	r3, r3, #3
    2ab0:	f000 f802 	bl	2ab8 <setvbuf>
    2ab4:	bd10      	pop	{r4, pc}
	...

00002ab8 <setvbuf>:
    2ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2aba:	001d      	movs	r5, r3
    2abc:	4b4f      	ldr	r3, [pc, #316]	; (2bfc <setvbuf+0x144>)
    2abe:	b085      	sub	sp, #20
    2ac0:	681e      	ldr	r6, [r3, #0]
    2ac2:	0004      	movs	r4, r0
    2ac4:	000f      	movs	r7, r1
    2ac6:	9200      	str	r2, [sp, #0]
    2ac8:	2e00      	cmp	r6, #0
    2aca:	d005      	beq.n	2ad8 <setvbuf+0x20>
    2acc:	69b3      	ldr	r3, [r6, #24]
    2ace:	2b00      	cmp	r3, #0
    2ad0:	d102      	bne.n	2ad8 <setvbuf+0x20>
    2ad2:	0030      	movs	r0, r6
    2ad4:	f000 fa60 	bl	2f98 <__sinit>
    2ad8:	4b49      	ldr	r3, [pc, #292]	; (2c00 <setvbuf+0x148>)
    2ada:	429c      	cmp	r4, r3
    2adc:	d150      	bne.n	2b80 <setvbuf+0xc8>
    2ade:	6874      	ldr	r4, [r6, #4]
    2ae0:	9b00      	ldr	r3, [sp, #0]
    2ae2:	2b02      	cmp	r3, #2
    2ae4:	d005      	beq.n	2af2 <setvbuf+0x3a>
    2ae6:	2b01      	cmp	r3, #1
    2ae8:	d900      	bls.n	2aec <setvbuf+0x34>
    2aea:	e084      	b.n	2bf6 <setvbuf+0x13e>
    2aec:	2d00      	cmp	r5, #0
    2aee:	da00      	bge.n	2af2 <setvbuf+0x3a>
    2af0:	e081      	b.n	2bf6 <setvbuf+0x13e>
    2af2:	0021      	movs	r1, r4
    2af4:	0030      	movs	r0, r6
    2af6:	f000 f9e1 	bl	2ebc <_fflush_r>
    2afa:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2afc:	2900      	cmp	r1, #0
    2afe:	d008      	beq.n	2b12 <setvbuf+0x5a>
    2b00:	0023      	movs	r3, r4
    2b02:	3344      	adds	r3, #68	; 0x44
    2b04:	4299      	cmp	r1, r3
    2b06:	d002      	beq.n	2b0e <setvbuf+0x56>
    2b08:	0030      	movs	r0, r6
    2b0a:	f000 fb51 	bl	31b0 <_free_r>
    2b0e:	2300      	movs	r3, #0
    2b10:	6363      	str	r3, [r4, #52]	; 0x34
    2b12:	2300      	movs	r3, #0
    2b14:	61a3      	str	r3, [r4, #24]
    2b16:	6063      	str	r3, [r4, #4]
    2b18:	89a3      	ldrh	r3, [r4, #12]
    2b1a:	061b      	lsls	r3, r3, #24
    2b1c:	d503      	bpl.n	2b26 <setvbuf+0x6e>
    2b1e:	6921      	ldr	r1, [r4, #16]
    2b20:	0030      	movs	r0, r6
    2b22:	f000 fb45 	bl	31b0 <_free_r>
    2b26:	89a3      	ldrh	r3, [r4, #12]
    2b28:	4a36      	ldr	r2, [pc, #216]	; (2c04 <setvbuf+0x14c>)
    2b2a:	4013      	ands	r3, r2
    2b2c:	81a3      	strh	r3, [r4, #12]
    2b2e:	9b00      	ldr	r3, [sp, #0]
    2b30:	2b02      	cmp	r3, #2
    2b32:	d05a      	beq.n	2bea <setvbuf+0x132>
    2b34:	ab03      	add	r3, sp, #12
    2b36:	aa02      	add	r2, sp, #8
    2b38:	0021      	movs	r1, r4
    2b3a:	0030      	movs	r0, r6
    2b3c:	f000 fac2 	bl	30c4 <__swhatbuf_r>
    2b40:	89a3      	ldrh	r3, [r4, #12]
    2b42:	4318      	orrs	r0, r3
    2b44:	81a0      	strh	r0, [r4, #12]
    2b46:	2d00      	cmp	r5, #0
    2b48:	d124      	bne.n	2b94 <setvbuf+0xdc>
    2b4a:	9d02      	ldr	r5, [sp, #8]
    2b4c:	0028      	movs	r0, r5
    2b4e:	f000 fb25 	bl	319c <malloc>
    2b52:	9501      	str	r5, [sp, #4]
    2b54:	1e07      	subs	r7, r0, #0
    2b56:	d142      	bne.n	2bde <setvbuf+0x126>
    2b58:	9b02      	ldr	r3, [sp, #8]
    2b5a:	9301      	str	r3, [sp, #4]
    2b5c:	42ab      	cmp	r3, r5
    2b5e:	d139      	bne.n	2bd4 <setvbuf+0x11c>
    2b60:	2001      	movs	r0, #1
    2b62:	4240      	negs	r0, r0
    2b64:	2302      	movs	r3, #2
    2b66:	89a2      	ldrh	r2, [r4, #12]
    2b68:	4313      	orrs	r3, r2
    2b6a:	81a3      	strh	r3, [r4, #12]
    2b6c:	2300      	movs	r3, #0
    2b6e:	60a3      	str	r3, [r4, #8]
    2b70:	0023      	movs	r3, r4
    2b72:	3347      	adds	r3, #71	; 0x47
    2b74:	6023      	str	r3, [r4, #0]
    2b76:	6123      	str	r3, [r4, #16]
    2b78:	2301      	movs	r3, #1
    2b7a:	6163      	str	r3, [r4, #20]
    2b7c:	b005      	add	sp, #20
    2b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b80:	4b21      	ldr	r3, [pc, #132]	; (2c08 <setvbuf+0x150>)
    2b82:	429c      	cmp	r4, r3
    2b84:	d101      	bne.n	2b8a <setvbuf+0xd2>
    2b86:	68b4      	ldr	r4, [r6, #8]
    2b88:	e7aa      	b.n	2ae0 <setvbuf+0x28>
    2b8a:	4b20      	ldr	r3, [pc, #128]	; (2c0c <setvbuf+0x154>)
    2b8c:	429c      	cmp	r4, r3
    2b8e:	d1a7      	bne.n	2ae0 <setvbuf+0x28>
    2b90:	68f4      	ldr	r4, [r6, #12]
    2b92:	e7a5      	b.n	2ae0 <setvbuf+0x28>
    2b94:	2f00      	cmp	r7, #0
    2b96:	d0d9      	beq.n	2b4c <setvbuf+0x94>
    2b98:	69b3      	ldr	r3, [r6, #24]
    2b9a:	2b00      	cmp	r3, #0
    2b9c:	d102      	bne.n	2ba4 <setvbuf+0xec>
    2b9e:	0030      	movs	r0, r6
    2ba0:	f000 f9fa 	bl	2f98 <__sinit>
    2ba4:	9b00      	ldr	r3, [sp, #0]
    2ba6:	2b01      	cmp	r3, #1
    2ba8:	d103      	bne.n	2bb2 <setvbuf+0xfa>
    2baa:	89a3      	ldrh	r3, [r4, #12]
    2bac:	9a00      	ldr	r2, [sp, #0]
    2bae:	431a      	orrs	r2, r3
    2bb0:	81a2      	strh	r2, [r4, #12]
    2bb2:	2008      	movs	r0, #8
    2bb4:	89a3      	ldrh	r3, [r4, #12]
    2bb6:	6027      	str	r7, [r4, #0]
    2bb8:	6127      	str	r7, [r4, #16]
    2bba:	6165      	str	r5, [r4, #20]
    2bbc:	4018      	ands	r0, r3
    2bbe:	d018      	beq.n	2bf2 <setvbuf+0x13a>
    2bc0:	2001      	movs	r0, #1
    2bc2:	4018      	ands	r0, r3
    2bc4:	2300      	movs	r3, #0
    2bc6:	4298      	cmp	r0, r3
    2bc8:	d011      	beq.n	2bee <setvbuf+0x136>
    2bca:	426d      	negs	r5, r5
    2bcc:	60a3      	str	r3, [r4, #8]
    2bce:	61a5      	str	r5, [r4, #24]
    2bd0:	0018      	movs	r0, r3
    2bd2:	e7d3      	b.n	2b7c <setvbuf+0xc4>
    2bd4:	9801      	ldr	r0, [sp, #4]
    2bd6:	f000 fae1 	bl	319c <malloc>
    2bda:	1e07      	subs	r7, r0, #0
    2bdc:	d0c0      	beq.n	2b60 <setvbuf+0xa8>
    2bde:	2380      	movs	r3, #128	; 0x80
    2be0:	89a2      	ldrh	r2, [r4, #12]
    2be2:	9d01      	ldr	r5, [sp, #4]
    2be4:	4313      	orrs	r3, r2
    2be6:	81a3      	strh	r3, [r4, #12]
    2be8:	e7d6      	b.n	2b98 <setvbuf+0xe0>
    2bea:	2000      	movs	r0, #0
    2bec:	e7ba      	b.n	2b64 <setvbuf+0xac>
    2bee:	60a5      	str	r5, [r4, #8]
    2bf0:	e7c4      	b.n	2b7c <setvbuf+0xc4>
    2bf2:	60a0      	str	r0, [r4, #8]
    2bf4:	e7c2      	b.n	2b7c <setvbuf+0xc4>
    2bf6:	2001      	movs	r0, #1
    2bf8:	4240      	negs	r0, r0
    2bfa:	e7bf      	b.n	2b7c <setvbuf+0xc4>
    2bfc:	20000404 	.word	0x20000404
    2c00:	00003b24 	.word	0x00003b24
    2c04:	fffff35c 	.word	0xfffff35c
    2c08:	00003b44 	.word	0x00003b44
    2c0c:	00003b04 	.word	0x00003b04

00002c10 <__swbuf_r>:
    2c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2c12:	0005      	movs	r5, r0
    2c14:	000e      	movs	r6, r1
    2c16:	0014      	movs	r4, r2
    2c18:	2800      	cmp	r0, #0
    2c1a:	d004      	beq.n	2c26 <__swbuf_r+0x16>
    2c1c:	6983      	ldr	r3, [r0, #24]
    2c1e:	2b00      	cmp	r3, #0
    2c20:	d101      	bne.n	2c26 <__swbuf_r+0x16>
    2c22:	f000 f9b9 	bl	2f98 <__sinit>
    2c26:	4b22      	ldr	r3, [pc, #136]	; (2cb0 <__swbuf_r+0xa0>)
    2c28:	429c      	cmp	r4, r3
    2c2a:	d12d      	bne.n	2c88 <__swbuf_r+0x78>
    2c2c:	686c      	ldr	r4, [r5, #4]
    2c2e:	69a3      	ldr	r3, [r4, #24]
    2c30:	60a3      	str	r3, [r4, #8]
    2c32:	89a3      	ldrh	r3, [r4, #12]
    2c34:	071b      	lsls	r3, r3, #28
    2c36:	d531      	bpl.n	2c9c <__swbuf_r+0x8c>
    2c38:	6923      	ldr	r3, [r4, #16]
    2c3a:	2b00      	cmp	r3, #0
    2c3c:	d02e      	beq.n	2c9c <__swbuf_r+0x8c>
    2c3e:	6823      	ldr	r3, [r4, #0]
    2c40:	6922      	ldr	r2, [r4, #16]
    2c42:	b2f7      	uxtb	r7, r6
    2c44:	1a98      	subs	r0, r3, r2
    2c46:	6963      	ldr	r3, [r4, #20]
    2c48:	b2f6      	uxtb	r6, r6
    2c4a:	4298      	cmp	r0, r3
    2c4c:	db05      	blt.n	2c5a <__swbuf_r+0x4a>
    2c4e:	0021      	movs	r1, r4
    2c50:	0028      	movs	r0, r5
    2c52:	f000 f933 	bl	2ebc <_fflush_r>
    2c56:	2800      	cmp	r0, #0
    2c58:	d126      	bne.n	2ca8 <__swbuf_r+0x98>
    2c5a:	68a3      	ldr	r3, [r4, #8]
    2c5c:	3001      	adds	r0, #1
    2c5e:	3b01      	subs	r3, #1
    2c60:	60a3      	str	r3, [r4, #8]
    2c62:	6823      	ldr	r3, [r4, #0]
    2c64:	1c5a      	adds	r2, r3, #1
    2c66:	6022      	str	r2, [r4, #0]
    2c68:	701f      	strb	r7, [r3, #0]
    2c6a:	6963      	ldr	r3, [r4, #20]
    2c6c:	4298      	cmp	r0, r3
    2c6e:	d004      	beq.n	2c7a <__swbuf_r+0x6a>
    2c70:	89a3      	ldrh	r3, [r4, #12]
    2c72:	07db      	lsls	r3, r3, #31
    2c74:	d51a      	bpl.n	2cac <__swbuf_r+0x9c>
    2c76:	2e0a      	cmp	r6, #10
    2c78:	d118      	bne.n	2cac <__swbuf_r+0x9c>
    2c7a:	0021      	movs	r1, r4
    2c7c:	0028      	movs	r0, r5
    2c7e:	f000 f91d 	bl	2ebc <_fflush_r>
    2c82:	2800      	cmp	r0, #0
    2c84:	d012      	beq.n	2cac <__swbuf_r+0x9c>
    2c86:	e00f      	b.n	2ca8 <__swbuf_r+0x98>
    2c88:	4b0a      	ldr	r3, [pc, #40]	; (2cb4 <__swbuf_r+0xa4>)
    2c8a:	429c      	cmp	r4, r3
    2c8c:	d101      	bne.n	2c92 <__swbuf_r+0x82>
    2c8e:	68ac      	ldr	r4, [r5, #8]
    2c90:	e7cd      	b.n	2c2e <__swbuf_r+0x1e>
    2c92:	4b09      	ldr	r3, [pc, #36]	; (2cb8 <__swbuf_r+0xa8>)
    2c94:	429c      	cmp	r4, r3
    2c96:	d1ca      	bne.n	2c2e <__swbuf_r+0x1e>
    2c98:	68ec      	ldr	r4, [r5, #12]
    2c9a:	e7c8      	b.n	2c2e <__swbuf_r+0x1e>
    2c9c:	0021      	movs	r1, r4
    2c9e:	0028      	movs	r0, r5
    2ca0:	f000 f80c 	bl	2cbc <__swsetup_r>
    2ca4:	2800      	cmp	r0, #0
    2ca6:	d0ca      	beq.n	2c3e <__swbuf_r+0x2e>
    2ca8:	2601      	movs	r6, #1
    2caa:	4276      	negs	r6, r6
    2cac:	0030      	movs	r0, r6
    2cae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2cb0:	00003b24 	.word	0x00003b24
    2cb4:	00003b44 	.word	0x00003b44
    2cb8:	00003b04 	.word	0x00003b04

00002cbc <__swsetup_r>:
    2cbc:	4b36      	ldr	r3, [pc, #216]	; (2d98 <__swsetup_r+0xdc>)
    2cbe:	b570      	push	{r4, r5, r6, lr}
    2cc0:	681d      	ldr	r5, [r3, #0]
    2cc2:	0006      	movs	r6, r0
    2cc4:	000c      	movs	r4, r1
    2cc6:	2d00      	cmp	r5, #0
    2cc8:	d005      	beq.n	2cd6 <__swsetup_r+0x1a>
    2cca:	69ab      	ldr	r3, [r5, #24]
    2ccc:	2b00      	cmp	r3, #0
    2cce:	d102      	bne.n	2cd6 <__swsetup_r+0x1a>
    2cd0:	0028      	movs	r0, r5
    2cd2:	f000 f961 	bl	2f98 <__sinit>
    2cd6:	4b31      	ldr	r3, [pc, #196]	; (2d9c <__swsetup_r+0xe0>)
    2cd8:	429c      	cmp	r4, r3
    2cda:	d10f      	bne.n	2cfc <__swsetup_r+0x40>
    2cdc:	686c      	ldr	r4, [r5, #4]
    2cde:	230c      	movs	r3, #12
    2ce0:	5ee2      	ldrsh	r2, [r4, r3]
    2ce2:	b293      	uxth	r3, r2
    2ce4:	0719      	lsls	r1, r3, #28
    2ce6:	d42d      	bmi.n	2d44 <__swsetup_r+0x88>
    2ce8:	06d9      	lsls	r1, r3, #27
    2cea:	d411      	bmi.n	2d10 <__swsetup_r+0x54>
    2cec:	2309      	movs	r3, #9
    2cee:	2001      	movs	r0, #1
    2cf0:	6033      	str	r3, [r6, #0]
    2cf2:	3337      	adds	r3, #55	; 0x37
    2cf4:	4313      	orrs	r3, r2
    2cf6:	81a3      	strh	r3, [r4, #12]
    2cf8:	4240      	negs	r0, r0
    2cfa:	bd70      	pop	{r4, r5, r6, pc}
    2cfc:	4b28      	ldr	r3, [pc, #160]	; (2da0 <__swsetup_r+0xe4>)
    2cfe:	429c      	cmp	r4, r3
    2d00:	d101      	bne.n	2d06 <__swsetup_r+0x4a>
    2d02:	68ac      	ldr	r4, [r5, #8]
    2d04:	e7eb      	b.n	2cde <__swsetup_r+0x22>
    2d06:	4b27      	ldr	r3, [pc, #156]	; (2da4 <__swsetup_r+0xe8>)
    2d08:	429c      	cmp	r4, r3
    2d0a:	d1e8      	bne.n	2cde <__swsetup_r+0x22>
    2d0c:	68ec      	ldr	r4, [r5, #12]
    2d0e:	e7e6      	b.n	2cde <__swsetup_r+0x22>
    2d10:	075b      	lsls	r3, r3, #29
    2d12:	d513      	bpl.n	2d3c <__swsetup_r+0x80>
    2d14:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2d16:	2900      	cmp	r1, #0
    2d18:	d008      	beq.n	2d2c <__swsetup_r+0x70>
    2d1a:	0023      	movs	r3, r4
    2d1c:	3344      	adds	r3, #68	; 0x44
    2d1e:	4299      	cmp	r1, r3
    2d20:	d002      	beq.n	2d28 <__swsetup_r+0x6c>
    2d22:	0030      	movs	r0, r6
    2d24:	f000 fa44 	bl	31b0 <_free_r>
    2d28:	2300      	movs	r3, #0
    2d2a:	6363      	str	r3, [r4, #52]	; 0x34
    2d2c:	2224      	movs	r2, #36	; 0x24
    2d2e:	89a3      	ldrh	r3, [r4, #12]
    2d30:	4393      	bics	r3, r2
    2d32:	81a3      	strh	r3, [r4, #12]
    2d34:	2300      	movs	r3, #0
    2d36:	6063      	str	r3, [r4, #4]
    2d38:	6923      	ldr	r3, [r4, #16]
    2d3a:	6023      	str	r3, [r4, #0]
    2d3c:	2308      	movs	r3, #8
    2d3e:	89a2      	ldrh	r2, [r4, #12]
    2d40:	4313      	orrs	r3, r2
    2d42:	81a3      	strh	r3, [r4, #12]
    2d44:	6923      	ldr	r3, [r4, #16]
    2d46:	2b00      	cmp	r3, #0
    2d48:	d10b      	bne.n	2d62 <__swsetup_r+0xa6>
    2d4a:	21a0      	movs	r1, #160	; 0xa0
    2d4c:	2280      	movs	r2, #128	; 0x80
    2d4e:	89a3      	ldrh	r3, [r4, #12]
    2d50:	0089      	lsls	r1, r1, #2
    2d52:	0092      	lsls	r2, r2, #2
    2d54:	400b      	ands	r3, r1
    2d56:	4293      	cmp	r3, r2
    2d58:	d003      	beq.n	2d62 <__swsetup_r+0xa6>
    2d5a:	0021      	movs	r1, r4
    2d5c:	0030      	movs	r0, r6
    2d5e:	f000 f9d9 	bl	3114 <__smakebuf_r>
    2d62:	2301      	movs	r3, #1
    2d64:	89a2      	ldrh	r2, [r4, #12]
    2d66:	4013      	ands	r3, r2
    2d68:	d011      	beq.n	2d8e <__swsetup_r+0xd2>
    2d6a:	2300      	movs	r3, #0
    2d6c:	60a3      	str	r3, [r4, #8]
    2d6e:	6963      	ldr	r3, [r4, #20]
    2d70:	425b      	negs	r3, r3
    2d72:	61a3      	str	r3, [r4, #24]
    2d74:	2000      	movs	r0, #0
    2d76:	6923      	ldr	r3, [r4, #16]
    2d78:	4283      	cmp	r3, r0
    2d7a:	d1be      	bne.n	2cfa <__swsetup_r+0x3e>
    2d7c:	230c      	movs	r3, #12
    2d7e:	5ee2      	ldrsh	r2, [r4, r3]
    2d80:	0613      	lsls	r3, r2, #24
    2d82:	d5ba      	bpl.n	2cfa <__swsetup_r+0x3e>
    2d84:	2340      	movs	r3, #64	; 0x40
    2d86:	4313      	orrs	r3, r2
    2d88:	81a3      	strh	r3, [r4, #12]
    2d8a:	3801      	subs	r0, #1
    2d8c:	e7b5      	b.n	2cfa <__swsetup_r+0x3e>
    2d8e:	0792      	lsls	r2, r2, #30
    2d90:	d400      	bmi.n	2d94 <__swsetup_r+0xd8>
    2d92:	6963      	ldr	r3, [r4, #20]
    2d94:	60a3      	str	r3, [r4, #8]
    2d96:	e7ed      	b.n	2d74 <__swsetup_r+0xb8>
    2d98:	20000404 	.word	0x20000404
    2d9c:	00003b24 	.word	0x00003b24
    2da0:	00003b44 	.word	0x00003b44
    2da4:	00003b04 	.word	0x00003b04

00002da8 <__sflush_r>:
    2da8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2daa:	898a      	ldrh	r2, [r1, #12]
    2dac:	0005      	movs	r5, r0
    2dae:	000c      	movs	r4, r1
    2db0:	0713      	lsls	r3, r2, #28
    2db2:	d460      	bmi.n	2e76 <__sflush_r+0xce>
    2db4:	684b      	ldr	r3, [r1, #4]
    2db6:	2b00      	cmp	r3, #0
    2db8:	dc04      	bgt.n	2dc4 <__sflush_r+0x1c>
    2dba:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    2dbc:	2b00      	cmp	r3, #0
    2dbe:	dc01      	bgt.n	2dc4 <__sflush_r+0x1c>
    2dc0:	2000      	movs	r0, #0
    2dc2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2dc4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    2dc6:	2f00      	cmp	r7, #0
    2dc8:	d0fa      	beq.n	2dc0 <__sflush_r+0x18>
    2dca:	2300      	movs	r3, #0
    2dcc:	682e      	ldr	r6, [r5, #0]
    2dce:	602b      	str	r3, [r5, #0]
    2dd0:	2380      	movs	r3, #128	; 0x80
    2dd2:	015b      	lsls	r3, r3, #5
    2dd4:	401a      	ands	r2, r3
    2dd6:	d034      	beq.n	2e42 <__sflush_r+0x9a>
    2dd8:	6d60      	ldr	r0, [r4, #84]	; 0x54
    2dda:	89a3      	ldrh	r3, [r4, #12]
    2ddc:	075b      	lsls	r3, r3, #29
    2dde:	d506      	bpl.n	2dee <__sflush_r+0x46>
    2de0:	6863      	ldr	r3, [r4, #4]
    2de2:	1ac0      	subs	r0, r0, r3
    2de4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    2de6:	2b00      	cmp	r3, #0
    2de8:	d001      	beq.n	2dee <__sflush_r+0x46>
    2dea:	6c23      	ldr	r3, [r4, #64]	; 0x40
    2dec:	1ac0      	subs	r0, r0, r3
    2dee:	0002      	movs	r2, r0
    2df0:	6a21      	ldr	r1, [r4, #32]
    2df2:	2300      	movs	r3, #0
    2df4:	0028      	movs	r0, r5
    2df6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    2df8:	47b8      	blx	r7
    2dfa:	89a1      	ldrh	r1, [r4, #12]
    2dfc:	1c43      	adds	r3, r0, #1
    2dfe:	d106      	bne.n	2e0e <__sflush_r+0x66>
    2e00:	682b      	ldr	r3, [r5, #0]
    2e02:	2b1d      	cmp	r3, #29
    2e04:	d831      	bhi.n	2e6a <__sflush_r+0xc2>
    2e06:	4a2c      	ldr	r2, [pc, #176]	; (2eb8 <__sflush_r+0x110>)
    2e08:	40da      	lsrs	r2, r3
    2e0a:	07d3      	lsls	r3, r2, #31
    2e0c:	d52d      	bpl.n	2e6a <__sflush_r+0xc2>
    2e0e:	2300      	movs	r3, #0
    2e10:	6063      	str	r3, [r4, #4]
    2e12:	6923      	ldr	r3, [r4, #16]
    2e14:	6023      	str	r3, [r4, #0]
    2e16:	04cb      	lsls	r3, r1, #19
    2e18:	d505      	bpl.n	2e26 <__sflush_r+0x7e>
    2e1a:	1c43      	adds	r3, r0, #1
    2e1c:	d102      	bne.n	2e24 <__sflush_r+0x7c>
    2e1e:	682b      	ldr	r3, [r5, #0]
    2e20:	2b00      	cmp	r3, #0
    2e22:	d100      	bne.n	2e26 <__sflush_r+0x7e>
    2e24:	6560      	str	r0, [r4, #84]	; 0x54
    2e26:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2e28:	602e      	str	r6, [r5, #0]
    2e2a:	2900      	cmp	r1, #0
    2e2c:	d0c8      	beq.n	2dc0 <__sflush_r+0x18>
    2e2e:	0023      	movs	r3, r4
    2e30:	3344      	adds	r3, #68	; 0x44
    2e32:	4299      	cmp	r1, r3
    2e34:	d002      	beq.n	2e3c <__sflush_r+0x94>
    2e36:	0028      	movs	r0, r5
    2e38:	f000 f9ba 	bl	31b0 <_free_r>
    2e3c:	2000      	movs	r0, #0
    2e3e:	6360      	str	r0, [r4, #52]	; 0x34
    2e40:	e7bf      	b.n	2dc2 <__sflush_r+0x1a>
    2e42:	2301      	movs	r3, #1
    2e44:	6a21      	ldr	r1, [r4, #32]
    2e46:	0028      	movs	r0, r5
    2e48:	47b8      	blx	r7
    2e4a:	1c43      	adds	r3, r0, #1
    2e4c:	d1c5      	bne.n	2dda <__sflush_r+0x32>
    2e4e:	682b      	ldr	r3, [r5, #0]
    2e50:	2b00      	cmp	r3, #0
    2e52:	d0c2      	beq.n	2dda <__sflush_r+0x32>
    2e54:	2b1d      	cmp	r3, #29
    2e56:	d001      	beq.n	2e5c <__sflush_r+0xb4>
    2e58:	2b16      	cmp	r3, #22
    2e5a:	d101      	bne.n	2e60 <__sflush_r+0xb8>
    2e5c:	602e      	str	r6, [r5, #0]
    2e5e:	e7af      	b.n	2dc0 <__sflush_r+0x18>
    2e60:	2340      	movs	r3, #64	; 0x40
    2e62:	89a2      	ldrh	r2, [r4, #12]
    2e64:	4313      	orrs	r3, r2
    2e66:	81a3      	strh	r3, [r4, #12]
    2e68:	e7ab      	b.n	2dc2 <__sflush_r+0x1a>
    2e6a:	2340      	movs	r3, #64	; 0x40
    2e6c:	430b      	orrs	r3, r1
    2e6e:	2001      	movs	r0, #1
    2e70:	81a3      	strh	r3, [r4, #12]
    2e72:	4240      	negs	r0, r0
    2e74:	e7a5      	b.n	2dc2 <__sflush_r+0x1a>
    2e76:	690f      	ldr	r7, [r1, #16]
    2e78:	2f00      	cmp	r7, #0
    2e7a:	d0a1      	beq.n	2dc0 <__sflush_r+0x18>
    2e7c:	680b      	ldr	r3, [r1, #0]
    2e7e:	600f      	str	r7, [r1, #0]
    2e80:	1bdb      	subs	r3, r3, r7
    2e82:	9301      	str	r3, [sp, #4]
    2e84:	2300      	movs	r3, #0
    2e86:	0792      	lsls	r2, r2, #30
    2e88:	d100      	bne.n	2e8c <__sflush_r+0xe4>
    2e8a:	694b      	ldr	r3, [r1, #20]
    2e8c:	60a3      	str	r3, [r4, #8]
    2e8e:	9b01      	ldr	r3, [sp, #4]
    2e90:	2b00      	cmp	r3, #0
    2e92:	dc00      	bgt.n	2e96 <__sflush_r+0xee>
    2e94:	e794      	b.n	2dc0 <__sflush_r+0x18>
    2e96:	9b01      	ldr	r3, [sp, #4]
    2e98:	003a      	movs	r2, r7
    2e9a:	6a21      	ldr	r1, [r4, #32]
    2e9c:	0028      	movs	r0, r5
    2e9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    2ea0:	47b0      	blx	r6
    2ea2:	2800      	cmp	r0, #0
    2ea4:	dc03      	bgt.n	2eae <__sflush_r+0x106>
    2ea6:	2340      	movs	r3, #64	; 0x40
    2ea8:	89a2      	ldrh	r2, [r4, #12]
    2eaa:	4313      	orrs	r3, r2
    2eac:	e7df      	b.n	2e6e <__sflush_r+0xc6>
    2eae:	9b01      	ldr	r3, [sp, #4]
    2eb0:	183f      	adds	r7, r7, r0
    2eb2:	1a1b      	subs	r3, r3, r0
    2eb4:	9301      	str	r3, [sp, #4]
    2eb6:	e7ea      	b.n	2e8e <__sflush_r+0xe6>
    2eb8:	20400001 	.word	0x20400001

00002ebc <_fflush_r>:
    2ebc:	690b      	ldr	r3, [r1, #16]
    2ebe:	b570      	push	{r4, r5, r6, lr}
    2ec0:	0005      	movs	r5, r0
    2ec2:	000c      	movs	r4, r1
    2ec4:	2b00      	cmp	r3, #0
    2ec6:	d101      	bne.n	2ecc <_fflush_r+0x10>
    2ec8:	2000      	movs	r0, #0
    2eca:	bd70      	pop	{r4, r5, r6, pc}
    2ecc:	2800      	cmp	r0, #0
    2ece:	d004      	beq.n	2eda <_fflush_r+0x1e>
    2ed0:	6983      	ldr	r3, [r0, #24]
    2ed2:	2b00      	cmp	r3, #0
    2ed4:	d101      	bne.n	2eda <_fflush_r+0x1e>
    2ed6:	f000 f85f 	bl	2f98 <__sinit>
    2eda:	4b0b      	ldr	r3, [pc, #44]	; (2f08 <_fflush_r+0x4c>)
    2edc:	429c      	cmp	r4, r3
    2ede:	d109      	bne.n	2ef4 <_fflush_r+0x38>
    2ee0:	686c      	ldr	r4, [r5, #4]
    2ee2:	220c      	movs	r2, #12
    2ee4:	5ea3      	ldrsh	r3, [r4, r2]
    2ee6:	2b00      	cmp	r3, #0
    2ee8:	d0ee      	beq.n	2ec8 <_fflush_r+0xc>
    2eea:	0021      	movs	r1, r4
    2eec:	0028      	movs	r0, r5
    2eee:	f7ff ff5b 	bl	2da8 <__sflush_r>
    2ef2:	e7ea      	b.n	2eca <_fflush_r+0xe>
    2ef4:	4b05      	ldr	r3, [pc, #20]	; (2f0c <_fflush_r+0x50>)
    2ef6:	429c      	cmp	r4, r3
    2ef8:	d101      	bne.n	2efe <_fflush_r+0x42>
    2efa:	68ac      	ldr	r4, [r5, #8]
    2efc:	e7f1      	b.n	2ee2 <_fflush_r+0x26>
    2efe:	4b04      	ldr	r3, [pc, #16]	; (2f10 <_fflush_r+0x54>)
    2f00:	429c      	cmp	r4, r3
    2f02:	d1ee      	bne.n	2ee2 <_fflush_r+0x26>
    2f04:	68ec      	ldr	r4, [r5, #12]
    2f06:	e7ec      	b.n	2ee2 <_fflush_r+0x26>
    2f08:	00003b24 	.word	0x00003b24
    2f0c:	00003b44 	.word	0x00003b44
    2f10:	00003b04 	.word	0x00003b04

00002f14 <_cleanup_r>:
    2f14:	b510      	push	{r4, lr}
    2f16:	4902      	ldr	r1, [pc, #8]	; (2f20 <_cleanup_r+0xc>)
    2f18:	f000 f8b2 	bl	3080 <_fwalk_reent>
    2f1c:	bd10      	pop	{r4, pc}
    2f1e:	46c0      	nop			; (mov r8, r8)
    2f20:	00002ebd 	.word	0x00002ebd

00002f24 <std.isra.0>:
    2f24:	2300      	movs	r3, #0
    2f26:	b510      	push	{r4, lr}
    2f28:	0004      	movs	r4, r0
    2f2a:	6003      	str	r3, [r0, #0]
    2f2c:	6043      	str	r3, [r0, #4]
    2f2e:	6083      	str	r3, [r0, #8]
    2f30:	8181      	strh	r1, [r0, #12]
    2f32:	6643      	str	r3, [r0, #100]	; 0x64
    2f34:	81c2      	strh	r2, [r0, #14]
    2f36:	6103      	str	r3, [r0, #16]
    2f38:	6143      	str	r3, [r0, #20]
    2f3a:	6183      	str	r3, [r0, #24]
    2f3c:	0019      	movs	r1, r3
    2f3e:	2208      	movs	r2, #8
    2f40:	305c      	adds	r0, #92	; 0x5c
    2f42:	f7ff fd23 	bl	298c <memset>
    2f46:	4b05      	ldr	r3, [pc, #20]	; (2f5c <std.isra.0+0x38>)
    2f48:	6224      	str	r4, [r4, #32]
    2f4a:	6263      	str	r3, [r4, #36]	; 0x24
    2f4c:	4b04      	ldr	r3, [pc, #16]	; (2f60 <std.isra.0+0x3c>)
    2f4e:	62a3      	str	r3, [r4, #40]	; 0x28
    2f50:	4b04      	ldr	r3, [pc, #16]	; (2f64 <std.isra.0+0x40>)
    2f52:	62e3      	str	r3, [r4, #44]	; 0x2c
    2f54:	4b04      	ldr	r3, [pc, #16]	; (2f68 <std.isra.0+0x44>)
    2f56:	6323      	str	r3, [r4, #48]	; 0x30
    2f58:	bd10      	pop	{r4, pc}
    2f5a:	46c0      	nop			; (mov r8, r8)
    2f5c:	000038bd 	.word	0x000038bd
    2f60:	000038e5 	.word	0x000038e5
    2f64:	0000391d 	.word	0x0000391d
    2f68:	00003949 	.word	0x00003949

00002f6c <__sfmoreglue>:
    2f6c:	b570      	push	{r4, r5, r6, lr}
    2f6e:	2568      	movs	r5, #104	; 0x68
    2f70:	1e4a      	subs	r2, r1, #1
    2f72:	4355      	muls	r5, r2
    2f74:	000e      	movs	r6, r1
    2f76:	0029      	movs	r1, r5
    2f78:	3174      	adds	r1, #116	; 0x74
    2f7a:	f000 f963 	bl	3244 <_malloc_r>
    2f7e:	1e04      	subs	r4, r0, #0
    2f80:	d008      	beq.n	2f94 <__sfmoreglue+0x28>
    2f82:	2100      	movs	r1, #0
    2f84:	002a      	movs	r2, r5
    2f86:	6001      	str	r1, [r0, #0]
    2f88:	6046      	str	r6, [r0, #4]
    2f8a:	300c      	adds	r0, #12
    2f8c:	60a0      	str	r0, [r4, #8]
    2f8e:	3268      	adds	r2, #104	; 0x68
    2f90:	f7ff fcfc 	bl	298c <memset>
    2f94:	0020      	movs	r0, r4
    2f96:	bd70      	pop	{r4, r5, r6, pc}

00002f98 <__sinit>:
    2f98:	6983      	ldr	r3, [r0, #24]
    2f9a:	b513      	push	{r0, r1, r4, lr}
    2f9c:	0004      	movs	r4, r0
    2f9e:	2b00      	cmp	r3, #0
    2fa0:	d128      	bne.n	2ff4 <__sinit+0x5c>
    2fa2:	6483      	str	r3, [r0, #72]	; 0x48
    2fa4:	64c3      	str	r3, [r0, #76]	; 0x4c
    2fa6:	6503      	str	r3, [r0, #80]	; 0x50
    2fa8:	4b13      	ldr	r3, [pc, #76]	; (2ff8 <__sinit+0x60>)
    2faa:	4a14      	ldr	r2, [pc, #80]	; (2ffc <__sinit+0x64>)
    2fac:	681b      	ldr	r3, [r3, #0]
    2fae:	6282      	str	r2, [r0, #40]	; 0x28
    2fb0:	9301      	str	r3, [sp, #4]
    2fb2:	4298      	cmp	r0, r3
    2fb4:	d101      	bne.n	2fba <__sinit+0x22>
    2fb6:	2301      	movs	r3, #1
    2fb8:	6183      	str	r3, [r0, #24]
    2fba:	0020      	movs	r0, r4
    2fbc:	f000 f820 	bl	3000 <__sfp>
    2fc0:	6060      	str	r0, [r4, #4]
    2fc2:	0020      	movs	r0, r4
    2fc4:	f000 f81c 	bl	3000 <__sfp>
    2fc8:	60a0      	str	r0, [r4, #8]
    2fca:	0020      	movs	r0, r4
    2fcc:	f000 f818 	bl	3000 <__sfp>
    2fd0:	2200      	movs	r2, #0
    2fd2:	60e0      	str	r0, [r4, #12]
    2fd4:	2104      	movs	r1, #4
    2fd6:	6860      	ldr	r0, [r4, #4]
    2fd8:	f7ff ffa4 	bl	2f24 <std.isra.0>
    2fdc:	2201      	movs	r2, #1
    2fde:	2109      	movs	r1, #9
    2fe0:	68a0      	ldr	r0, [r4, #8]
    2fe2:	f7ff ff9f 	bl	2f24 <std.isra.0>
    2fe6:	2202      	movs	r2, #2
    2fe8:	2112      	movs	r1, #18
    2fea:	68e0      	ldr	r0, [r4, #12]
    2fec:	f7ff ff9a 	bl	2f24 <std.isra.0>
    2ff0:	2301      	movs	r3, #1
    2ff2:	61a3      	str	r3, [r4, #24]
    2ff4:	bd13      	pop	{r0, r1, r4, pc}
    2ff6:	46c0      	nop			; (mov r8, r8)
    2ff8:	00003b00 	.word	0x00003b00
    2ffc:	00002f15 	.word	0x00002f15

00003000 <__sfp>:
    3000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3002:	4b1e      	ldr	r3, [pc, #120]	; (307c <__sfp+0x7c>)
    3004:	0007      	movs	r7, r0
    3006:	681e      	ldr	r6, [r3, #0]
    3008:	69b3      	ldr	r3, [r6, #24]
    300a:	2b00      	cmp	r3, #0
    300c:	d102      	bne.n	3014 <__sfp+0x14>
    300e:	0030      	movs	r0, r6
    3010:	f7ff ffc2 	bl	2f98 <__sinit>
    3014:	3648      	adds	r6, #72	; 0x48
    3016:	68b4      	ldr	r4, [r6, #8]
    3018:	6873      	ldr	r3, [r6, #4]
    301a:	3b01      	subs	r3, #1
    301c:	d504      	bpl.n	3028 <__sfp+0x28>
    301e:	6833      	ldr	r3, [r6, #0]
    3020:	2b00      	cmp	r3, #0
    3022:	d007      	beq.n	3034 <__sfp+0x34>
    3024:	6836      	ldr	r6, [r6, #0]
    3026:	e7f6      	b.n	3016 <__sfp+0x16>
    3028:	220c      	movs	r2, #12
    302a:	5ea5      	ldrsh	r5, [r4, r2]
    302c:	2d00      	cmp	r5, #0
    302e:	d00d      	beq.n	304c <__sfp+0x4c>
    3030:	3468      	adds	r4, #104	; 0x68
    3032:	e7f2      	b.n	301a <__sfp+0x1a>
    3034:	2104      	movs	r1, #4
    3036:	0038      	movs	r0, r7
    3038:	f7ff ff98 	bl	2f6c <__sfmoreglue>
    303c:	6030      	str	r0, [r6, #0]
    303e:	2800      	cmp	r0, #0
    3040:	d1f0      	bne.n	3024 <__sfp+0x24>
    3042:	230c      	movs	r3, #12
    3044:	0004      	movs	r4, r0
    3046:	603b      	str	r3, [r7, #0]
    3048:	0020      	movs	r0, r4
    304a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    304c:	2301      	movs	r3, #1
    304e:	0020      	movs	r0, r4
    3050:	425b      	negs	r3, r3
    3052:	81e3      	strh	r3, [r4, #14]
    3054:	3302      	adds	r3, #2
    3056:	81a3      	strh	r3, [r4, #12]
    3058:	6665      	str	r5, [r4, #100]	; 0x64
    305a:	6025      	str	r5, [r4, #0]
    305c:	60a5      	str	r5, [r4, #8]
    305e:	6065      	str	r5, [r4, #4]
    3060:	6125      	str	r5, [r4, #16]
    3062:	6165      	str	r5, [r4, #20]
    3064:	61a5      	str	r5, [r4, #24]
    3066:	2208      	movs	r2, #8
    3068:	0029      	movs	r1, r5
    306a:	305c      	adds	r0, #92	; 0x5c
    306c:	f7ff fc8e 	bl	298c <memset>
    3070:	6365      	str	r5, [r4, #52]	; 0x34
    3072:	63a5      	str	r5, [r4, #56]	; 0x38
    3074:	64a5      	str	r5, [r4, #72]	; 0x48
    3076:	64e5      	str	r5, [r4, #76]	; 0x4c
    3078:	e7e6      	b.n	3048 <__sfp+0x48>
    307a:	46c0      	nop			; (mov r8, r8)
    307c:	00003b00 	.word	0x00003b00

00003080 <_fwalk_reent>:
    3080:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3082:	0004      	movs	r4, r0
    3084:	0007      	movs	r7, r0
    3086:	2600      	movs	r6, #0
    3088:	9101      	str	r1, [sp, #4]
    308a:	3448      	adds	r4, #72	; 0x48
    308c:	2c00      	cmp	r4, #0
    308e:	d101      	bne.n	3094 <_fwalk_reent+0x14>
    3090:	0030      	movs	r0, r6
    3092:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3094:	6863      	ldr	r3, [r4, #4]
    3096:	68a5      	ldr	r5, [r4, #8]
    3098:	9300      	str	r3, [sp, #0]
    309a:	9b00      	ldr	r3, [sp, #0]
    309c:	3b01      	subs	r3, #1
    309e:	9300      	str	r3, [sp, #0]
    30a0:	d501      	bpl.n	30a6 <_fwalk_reent+0x26>
    30a2:	6824      	ldr	r4, [r4, #0]
    30a4:	e7f2      	b.n	308c <_fwalk_reent+0xc>
    30a6:	89ab      	ldrh	r3, [r5, #12]
    30a8:	2b01      	cmp	r3, #1
    30aa:	d908      	bls.n	30be <_fwalk_reent+0x3e>
    30ac:	220e      	movs	r2, #14
    30ae:	5eab      	ldrsh	r3, [r5, r2]
    30b0:	3301      	adds	r3, #1
    30b2:	d004      	beq.n	30be <_fwalk_reent+0x3e>
    30b4:	0029      	movs	r1, r5
    30b6:	0038      	movs	r0, r7
    30b8:	9b01      	ldr	r3, [sp, #4]
    30ba:	4798      	blx	r3
    30bc:	4306      	orrs	r6, r0
    30be:	3568      	adds	r5, #104	; 0x68
    30c0:	e7eb      	b.n	309a <_fwalk_reent+0x1a>
	...

000030c4 <__swhatbuf_r>:
    30c4:	b570      	push	{r4, r5, r6, lr}
    30c6:	000e      	movs	r6, r1
    30c8:	001d      	movs	r5, r3
    30ca:	230e      	movs	r3, #14
    30cc:	5ec9      	ldrsh	r1, [r1, r3]
    30ce:	b090      	sub	sp, #64	; 0x40
    30d0:	0014      	movs	r4, r2
    30d2:	2900      	cmp	r1, #0
    30d4:	da07      	bge.n	30e6 <__swhatbuf_r+0x22>
    30d6:	2300      	movs	r3, #0
    30d8:	602b      	str	r3, [r5, #0]
    30da:	89b3      	ldrh	r3, [r6, #12]
    30dc:	061b      	lsls	r3, r3, #24
    30de:	d411      	bmi.n	3104 <__swhatbuf_r+0x40>
    30e0:	2380      	movs	r3, #128	; 0x80
    30e2:	00db      	lsls	r3, r3, #3
    30e4:	e00f      	b.n	3106 <__swhatbuf_r+0x42>
    30e6:	aa01      	add	r2, sp, #4
    30e8:	f000 fc5a 	bl	39a0 <_fstat_r>
    30ec:	2800      	cmp	r0, #0
    30ee:	dbf2      	blt.n	30d6 <__swhatbuf_r+0x12>
    30f0:	22f0      	movs	r2, #240	; 0xf0
    30f2:	9b02      	ldr	r3, [sp, #8]
    30f4:	0212      	lsls	r2, r2, #8
    30f6:	4013      	ands	r3, r2
    30f8:	4a05      	ldr	r2, [pc, #20]	; (3110 <__swhatbuf_r+0x4c>)
    30fa:	189b      	adds	r3, r3, r2
    30fc:	425a      	negs	r2, r3
    30fe:	4153      	adcs	r3, r2
    3100:	602b      	str	r3, [r5, #0]
    3102:	e7ed      	b.n	30e0 <__swhatbuf_r+0x1c>
    3104:	2340      	movs	r3, #64	; 0x40
    3106:	2000      	movs	r0, #0
    3108:	6023      	str	r3, [r4, #0]
    310a:	b010      	add	sp, #64	; 0x40
    310c:	bd70      	pop	{r4, r5, r6, pc}
    310e:	46c0      	nop			; (mov r8, r8)
    3110:	ffffe000 	.word	0xffffe000

00003114 <__smakebuf_r>:
    3114:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3116:	2602      	movs	r6, #2
    3118:	898b      	ldrh	r3, [r1, #12]
    311a:	0005      	movs	r5, r0
    311c:	000c      	movs	r4, r1
    311e:	4233      	tst	r3, r6
    3120:	d006      	beq.n	3130 <__smakebuf_r+0x1c>
    3122:	0023      	movs	r3, r4
    3124:	3347      	adds	r3, #71	; 0x47
    3126:	6023      	str	r3, [r4, #0]
    3128:	6123      	str	r3, [r4, #16]
    312a:	2301      	movs	r3, #1
    312c:	6163      	str	r3, [r4, #20]
    312e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    3130:	ab01      	add	r3, sp, #4
    3132:	466a      	mov	r2, sp
    3134:	f7ff ffc6 	bl	30c4 <__swhatbuf_r>
    3138:	9900      	ldr	r1, [sp, #0]
    313a:	0007      	movs	r7, r0
    313c:	0028      	movs	r0, r5
    313e:	f000 f881 	bl	3244 <_malloc_r>
    3142:	2800      	cmp	r0, #0
    3144:	d108      	bne.n	3158 <__smakebuf_r+0x44>
    3146:	220c      	movs	r2, #12
    3148:	5ea3      	ldrsh	r3, [r4, r2]
    314a:	059a      	lsls	r2, r3, #22
    314c:	d4ef      	bmi.n	312e <__smakebuf_r+0x1a>
    314e:	2203      	movs	r2, #3
    3150:	4393      	bics	r3, r2
    3152:	431e      	orrs	r6, r3
    3154:	81a6      	strh	r6, [r4, #12]
    3156:	e7e4      	b.n	3122 <__smakebuf_r+0xe>
    3158:	4b0f      	ldr	r3, [pc, #60]	; (3198 <__smakebuf_r+0x84>)
    315a:	62ab      	str	r3, [r5, #40]	; 0x28
    315c:	2380      	movs	r3, #128	; 0x80
    315e:	89a2      	ldrh	r2, [r4, #12]
    3160:	6020      	str	r0, [r4, #0]
    3162:	4313      	orrs	r3, r2
    3164:	81a3      	strh	r3, [r4, #12]
    3166:	9b00      	ldr	r3, [sp, #0]
    3168:	6120      	str	r0, [r4, #16]
    316a:	6163      	str	r3, [r4, #20]
    316c:	9b01      	ldr	r3, [sp, #4]
    316e:	2b00      	cmp	r3, #0
    3170:	d00d      	beq.n	318e <__smakebuf_r+0x7a>
    3172:	230e      	movs	r3, #14
    3174:	5ee1      	ldrsh	r1, [r4, r3]
    3176:	0028      	movs	r0, r5
    3178:	f000 fc24 	bl	39c4 <_isatty_r>
    317c:	2800      	cmp	r0, #0
    317e:	d006      	beq.n	318e <__smakebuf_r+0x7a>
    3180:	2203      	movs	r2, #3
    3182:	89a3      	ldrh	r3, [r4, #12]
    3184:	4393      	bics	r3, r2
    3186:	001a      	movs	r2, r3
    3188:	2301      	movs	r3, #1
    318a:	4313      	orrs	r3, r2
    318c:	81a3      	strh	r3, [r4, #12]
    318e:	89a0      	ldrh	r0, [r4, #12]
    3190:	4338      	orrs	r0, r7
    3192:	81a0      	strh	r0, [r4, #12]
    3194:	e7cb      	b.n	312e <__smakebuf_r+0x1a>
    3196:	46c0      	nop			; (mov r8, r8)
    3198:	00002f15 	.word	0x00002f15

0000319c <malloc>:
    319c:	b510      	push	{r4, lr}
    319e:	4b03      	ldr	r3, [pc, #12]	; (31ac <malloc+0x10>)
    31a0:	0001      	movs	r1, r0
    31a2:	6818      	ldr	r0, [r3, #0]
    31a4:	f000 f84e 	bl	3244 <_malloc_r>
    31a8:	bd10      	pop	{r4, pc}
    31aa:	46c0      	nop			; (mov r8, r8)
    31ac:	20000404 	.word	0x20000404

000031b0 <_free_r>:
    31b0:	b570      	push	{r4, r5, r6, lr}
    31b2:	0005      	movs	r5, r0
    31b4:	2900      	cmp	r1, #0
    31b6:	d010      	beq.n	31da <_free_r+0x2a>
    31b8:	1f0c      	subs	r4, r1, #4
    31ba:	6823      	ldr	r3, [r4, #0]
    31bc:	2b00      	cmp	r3, #0
    31be:	da00      	bge.n	31c2 <_free_r+0x12>
    31c0:	18e4      	adds	r4, r4, r3
    31c2:	0028      	movs	r0, r5
    31c4:	f000 fc2f 	bl	3a26 <__malloc_lock>
    31c8:	4a1d      	ldr	r2, [pc, #116]	; (3240 <_free_r+0x90>)
    31ca:	6813      	ldr	r3, [r2, #0]
    31cc:	2b00      	cmp	r3, #0
    31ce:	d105      	bne.n	31dc <_free_r+0x2c>
    31d0:	6063      	str	r3, [r4, #4]
    31d2:	6014      	str	r4, [r2, #0]
    31d4:	0028      	movs	r0, r5
    31d6:	f000 fc27 	bl	3a28 <__malloc_unlock>
    31da:	bd70      	pop	{r4, r5, r6, pc}
    31dc:	42a3      	cmp	r3, r4
    31de:	d909      	bls.n	31f4 <_free_r+0x44>
    31e0:	6821      	ldr	r1, [r4, #0]
    31e2:	1860      	adds	r0, r4, r1
    31e4:	4283      	cmp	r3, r0
    31e6:	d1f3      	bne.n	31d0 <_free_r+0x20>
    31e8:	6818      	ldr	r0, [r3, #0]
    31ea:	685b      	ldr	r3, [r3, #4]
    31ec:	1841      	adds	r1, r0, r1
    31ee:	6021      	str	r1, [r4, #0]
    31f0:	e7ee      	b.n	31d0 <_free_r+0x20>
    31f2:	0013      	movs	r3, r2
    31f4:	685a      	ldr	r2, [r3, #4]
    31f6:	2a00      	cmp	r2, #0
    31f8:	d001      	beq.n	31fe <_free_r+0x4e>
    31fa:	42a2      	cmp	r2, r4
    31fc:	d9f9      	bls.n	31f2 <_free_r+0x42>
    31fe:	6819      	ldr	r1, [r3, #0]
    3200:	1858      	adds	r0, r3, r1
    3202:	42a0      	cmp	r0, r4
    3204:	d10b      	bne.n	321e <_free_r+0x6e>
    3206:	6820      	ldr	r0, [r4, #0]
    3208:	1809      	adds	r1, r1, r0
    320a:	1858      	adds	r0, r3, r1
    320c:	6019      	str	r1, [r3, #0]
    320e:	4282      	cmp	r2, r0
    3210:	d1e0      	bne.n	31d4 <_free_r+0x24>
    3212:	6810      	ldr	r0, [r2, #0]
    3214:	6852      	ldr	r2, [r2, #4]
    3216:	1841      	adds	r1, r0, r1
    3218:	6019      	str	r1, [r3, #0]
    321a:	605a      	str	r2, [r3, #4]
    321c:	e7da      	b.n	31d4 <_free_r+0x24>
    321e:	42a0      	cmp	r0, r4
    3220:	d902      	bls.n	3228 <_free_r+0x78>
    3222:	230c      	movs	r3, #12
    3224:	602b      	str	r3, [r5, #0]
    3226:	e7d5      	b.n	31d4 <_free_r+0x24>
    3228:	6821      	ldr	r1, [r4, #0]
    322a:	1860      	adds	r0, r4, r1
    322c:	4282      	cmp	r2, r0
    322e:	d103      	bne.n	3238 <_free_r+0x88>
    3230:	6810      	ldr	r0, [r2, #0]
    3232:	6852      	ldr	r2, [r2, #4]
    3234:	1841      	adds	r1, r0, r1
    3236:	6021      	str	r1, [r4, #0]
    3238:	6062      	str	r2, [r4, #4]
    323a:	605c      	str	r4, [r3, #4]
    323c:	e7ca      	b.n	31d4 <_free_r+0x24>
    323e:	46c0      	nop			; (mov r8, r8)
    3240:	200004ac 	.word	0x200004ac

00003244 <_malloc_r>:
    3244:	2303      	movs	r3, #3
    3246:	b570      	push	{r4, r5, r6, lr}
    3248:	1ccd      	adds	r5, r1, #3
    324a:	439d      	bics	r5, r3
    324c:	3508      	adds	r5, #8
    324e:	0006      	movs	r6, r0
    3250:	2d0c      	cmp	r5, #12
    3252:	d21e      	bcs.n	3292 <_malloc_r+0x4e>
    3254:	250c      	movs	r5, #12
    3256:	42a9      	cmp	r1, r5
    3258:	d81d      	bhi.n	3296 <_malloc_r+0x52>
    325a:	0030      	movs	r0, r6
    325c:	f000 fbe3 	bl	3a26 <__malloc_lock>
    3260:	4a25      	ldr	r2, [pc, #148]	; (32f8 <_malloc_r+0xb4>)
    3262:	6814      	ldr	r4, [r2, #0]
    3264:	0021      	movs	r1, r4
    3266:	2900      	cmp	r1, #0
    3268:	d119      	bne.n	329e <_malloc_r+0x5a>
    326a:	4c24      	ldr	r4, [pc, #144]	; (32fc <_malloc_r+0xb8>)
    326c:	6823      	ldr	r3, [r4, #0]
    326e:	2b00      	cmp	r3, #0
    3270:	d103      	bne.n	327a <_malloc_r+0x36>
    3272:	0030      	movs	r0, r6
    3274:	f000 fb10 	bl	3898 <_sbrk_r>
    3278:	6020      	str	r0, [r4, #0]
    327a:	0029      	movs	r1, r5
    327c:	0030      	movs	r0, r6
    327e:	f000 fb0b 	bl	3898 <_sbrk_r>
    3282:	1c43      	adds	r3, r0, #1
    3284:	d12c      	bne.n	32e0 <_malloc_r+0x9c>
    3286:	230c      	movs	r3, #12
    3288:	0030      	movs	r0, r6
    328a:	6033      	str	r3, [r6, #0]
    328c:	f000 fbcc 	bl	3a28 <__malloc_unlock>
    3290:	e003      	b.n	329a <_malloc_r+0x56>
    3292:	2d00      	cmp	r5, #0
    3294:	dadf      	bge.n	3256 <_malloc_r+0x12>
    3296:	230c      	movs	r3, #12
    3298:	6033      	str	r3, [r6, #0]
    329a:	2000      	movs	r0, #0
    329c:	bd70      	pop	{r4, r5, r6, pc}
    329e:	680b      	ldr	r3, [r1, #0]
    32a0:	1b5b      	subs	r3, r3, r5
    32a2:	d41a      	bmi.n	32da <_malloc_r+0x96>
    32a4:	2b0b      	cmp	r3, #11
    32a6:	d903      	bls.n	32b0 <_malloc_r+0x6c>
    32a8:	600b      	str	r3, [r1, #0]
    32aa:	18cc      	adds	r4, r1, r3
    32ac:	6025      	str	r5, [r4, #0]
    32ae:	e003      	b.n	32b8 <_malloc_r+0x74>
    32b0:	428c      	cmp	r4, r1
    32b2:	d10e      	bne.n	32d2 <_malloc_r+0x8e>
    32b4:	6863      	ldr	r3, [r4, #4]
    32b6:	6013      	str	r3, [r2, #0]
    32b8:	0030      	movs	r0, r6
    32ba:	f000 fbb5 	bl	3a28 <__malloc_unlock>
    32be:	0020      	movs	r0, r4
    32c0:	2207      	movs	r2, #7
    32c2:	300b      	adds	r0, #11
    32c4:	1d23      	adds	r3, r4, #4
    32c6:	4390      	bics	r0, r2
    32c8:	1ac3      	subs	r3, r0, r3
    32ca:	d0e7      	beq.n	329c <_malloc_r+0x58>
    32cc:	425a      	negs	r2, r3
    32ce:	50e2      	str	r2, [r4, r3]
    32d0:	e7e4      	b.n	329c <_malloc_r+0x58>
    32d2:	684b      	ldr	r3, [r1, #4]
    32d4:	6063      	str	r3, [r4, #4]
    32d6:	000c      	movs	r4, r1
    32d8:	e7ee      	b.n	32b8 <_malloc_r+0x74>
    32da:	000c      	movs	r4, r1
    32dc:	6849      	ldr	r1, [r1, #4]
    32de:	e7c2      	b.n	3266 <_malloc_r+0x22>
    32e0:	2303      	movs	r3, #3
    32e2:	1cc4      	adds	r4, r0, #3
    32e4:	439c      	bics	r4, r3
    32e6:	42a0      	cmp	r0, r4
    32e8:	d0e0      	beq.n	32ac <_malloc_r+0x68>
    32ea:	1a21      	subs	r1, r4, r0
    32ec:	0030      	movs	r0, r6
    32ee:	f000 fad3 	bl	3898 <_sbrk_r>
    32f2:	1c43      	adds	r3, r0, #1
    32f4:	d1da      	bne.n	32ac <_malloc_r+0x68>
    32f6:	e7c6      	b.n	3286 <_malloc_r+0x42>
    32f8:	200004ac 	.word	0x200004ac
    32fc:	200004b0 	.word	0x200004b0

00003300 <__sfputc_r>:
    3300:	6893      	ldr	r3, [r2, #8]
    3302:	b510      	push	{r4, lr}
    3304:	3b01      	subs	r3, #1
    3306:	6093      	str	r3, [r2, #8]
    3308:	2b00      	cmp	r3, #0
    330a:	da05      	bge.n	3318 <__sfputc_r+0x18>
    330c:	6994      	ldr	r4, [r2, #24]
    330e:	42a3      	cmp	r3, r4
    3310:	db08      	blt.n	3324 <__sfputc_r+0x24>
    3312:	b2cb      	uxtb	r3, r1
    3314:	2b0a      	cmp	r3, #10
    3316:	d005      	beq.n	3324 <__sfputc_r+0x24>
    3318:	6813      	ldr	r3, [r2, #0]
    331a:	1c58      	adds	r0, r3, #1
    331c:	6010      	str	r0, [r2, #0]
    331e:	7019      	strb	r1, [r3, #0]
    3320:	b2c8      	uxtb	r0, r1
    3322:	bd10      	pop	{r4, pc}
    3324:	f7ff fc74 	bl	2c10 <__swbuf_r>
    3328:	e7fb      	b.n	3322 <__sfputc_r+0x22>

0000332a <__sfputs_r>:
    332a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    332c:	0006      	movs	r6, r0
    332e:	000f      	movs	r7, r1
    3330:	0014      	movs	r4, r2
    3332:	18d5      	adds	r5, r2, r3
    3334:	42ac      	cmp	r4, r5
    3336:	d101      	bne.n	333c <__sfputs_r+0x12>
    3338:	2000      	movs	r0, #0
    333a:	e007      	b.n	334c <__sfputs_r+0x22>
    333c:	7821      	ldrb	r1, [r4, #0]
    333e:	003a      	movs	r2, r7
    3340:	0030      	movs	r0, r6
    3342:	f7ff ffdd 	bl	3300 <__sfputc_r>
    3346:	3401      	adds	r4, #1
    3348:	1c43      	adds	r3, r0, #1
    334a:	d1f3      	bne.n	3334 <__sfputs_r+0xa>
    334c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00003350 <_vfiprintf_r>:
    3350:	b5f0      	push	{r4, r5, r6, r7, lr}
    3352:	b09f      	sub	sp, #124	; 0x7c
    3354:	0006      	movs	r6, r0
    3356:	000f      	movs	r7, r1
    3358:	0014      	movs	r4, r2
    335a:	9305      	str	r3, [sp, #20]
    335c:	2800      	cmp	r0, #0
    335e:	d004      	beq.n	336a <_vfiprintf_r+0x1a>
    3360:	6983      	ldr	r3, [r0, #24]
    3362:	2b00      	cmp	r3, #0
    3364:	d101      	bne.n	336a <_vfiprintf_r+0x1a>
    3366:	f7ff fe17 	bl	2f98 <__sinit>
    336a:	4b7f      	ldr	r3, [pc, #508]	; (3568 <_vfiprintf_r+0x218>)
    336c:	429f      	cmp	r7, r3
    336e:	d15c      	bne.n	342a <_vfiprintf_r+0xda>
    3370:	6877      	ldr	r7, [r6, #4]
    3372:	89bb      	ldrh	r3, [r7, #12]
    3374:	071b      	lsls	r3, r3, #28
    3376:	d562      	bpl.n	343e <_vfiprintf_r+0xee>
    3378:	693b      	ldr	r3, [r7, #16]
    337a:	2b00      	cmp	r3, #0
    337c:	d05f      	beq.n	343e <_vfiprintf_r+0xee>
    337e:	2300      	movs	r3, #0
    3380:	ad06      	add	r5, sp, #24
    3382:	616b      	str	r3, [r5, #20]
    3384:	3320      	adds	r3, #32
    3386:	766b      	strb	r3, [r5, #25]
    3388:	3310      	adds	r3, #16
    338a:	76ab      	strb	r3, [r5, #26]
    338c:	9402      	str	r4, [sp, #8]
    338e:	9c02      	ldr	r4, [sp, #8]
    3390:	7823      	ldrb	r3, [r4, #0]
    3392:	2b00      	cmp	r3, #0
    3394:	d15d      	bne.n	3452 <_vfiprintf_r+0x102>
    3396:	9b02      	ldr	r3, [sp, #8]
    3398:	1ae3      	subs	r3, r4, r3
    339a:	9304      	str	r3, [sp, #16]
    339c:	d00d      	beq.n	33ba <_vfiprintf_r+0x6a>
    339e:	9b04      	ldr	r3, [sp, #16]
    33a0:	9a02      	ldr	r2, [sp, #8]
    33a2:	0039      	movs	r1, r7
    33a4:	0030      	movs	r0, r6
    33a6:	f7ff ffc0 	bl	332a <__sfputs_r>
    33aa:	1c43      	adds	r3, r0, #1
    33ac:	d100      	bne.n	33b0 <_vfiprintf_r+0x60>
    33ae:	e0cc      	b.n	354a <_vfiprintf_r+0x1fa>
    33b0:	696a      	ldr	r2, [r5, #20]
    33b2:	9b04      	ldr	r3, [sp, #16]
    33b4:	4694      	mov	ip, r2
    33b6:	4463      	add	r3, ip
    33b8:	616b      	str	r3, [r5, #20]
    33ba:	7823      	ldrb	r3, [r4, #0]
    33bc:	2b00      	cmp	r3, #0
    33be:	d100      	bne.n	33c2 <_vfiprintf_r+0x72>
    33c0:	e0c3      	b.n	354a <_vfiprintf_r+0x1fa>
    33c2:	2201      	movs	r2, #1
    33c4:	2300      	movs	r3, #0
    33c6:	4252      	negs	r2, r2
    33c8:	606a      	str	r2, [r5, #4]
    33ca:	a902      	add	r1, sp, #8
    33cc:	3254      	adds	r2, #84	; 0x54
    33ce:	1852      	adds	r2, r2, r1
    33d0:	3401      	adds	r4, #1
    33d2:	602b      	str	r3, [r5, #0]
    33d4:	60eb      	str	r3, [r5, #12]
    33d6:	60ab      	str	r3, [r5, #8]
    33d8:	7013      	strb	r3, [r2, #0]
    33da:	65ab      	str	r3, [r5, #88]	; 0x58
    33dc:	7821      	ldrb	r1, [r4, #0]
    33de:	2205      	movs	r2, #5
    33e0:	4862      	ldr	r0, [pc, #392]	; (356c <_vfiprintf_r+0x21c>)
    33e2:	f000 fb15 	bl	3a10 <memchr>
    33e6:	1c63      	adds	r3, r4, #1
    33e8:	469c      	mov	ip, r3
    33ea:	2800      	cmp	r0, #0
    33ec:	d135      	bne.n	345a <_vfiprintf_r+0x10a>
    33ee:	6829      	ldr	r1, [r5, #0]
    33f0:	06cb      	lsls	r3, r1, #27
    33f2:	d504      	bpl.n	33fe <_vfiprintf_r+0xae>
    33f4:	2353      	movs	r3, #83	; 0x53
    33f6:	aa02      	add	r2, sp, #8
    33f8:	3020      	adds	r0, #32
    33fa:	189b      	adds	r3, r3, r2
    33fc:	7018      	strb	r0, [r3, #0]
    33fe:	070b      	lsls	r3, r1, #28
    3400:	d504      	bpl.n	340c <_vfiprintf_r+0xbc>
    3402:	2353      	movs	r3, #83	; 0x53
    3404:	202b      	movs	r0, #43	; 0x2b
    3406:	aa02      	add	r2, sp, #8
    3408:	189b      	adds	r3, r3, r2
    340a:	7018      	strb	r0, [r3, #0]
    340c:	7823      	ldrb	r3, [r4, #0]
    340e:	2b2a      	cmp	r3, #42	; 0x2a
    3410:	d02c      	beq.n	346c <_vfiprintf_r+0x11c>
    3412:	2000      	movs	r0, #0
    3414:	210a      	movs	r1, #10
    3416:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3418:	7822      	ldrb	r2, [r4, #0]
    341a:	3a30      	subs	r2, #48	; 0x30
    341c:	2a09      	cmp	r2, #9
    341e:	d800      	bhi.n	3422 <_vfiprintf_r+0xd2>
    3420:	e06b      	b.n	34fa <_vfiprintf_r+0x1aa>
    3422:	2800      	cmp	r0, #0
    3424:	d02a      	beq.n	347c <_vfiprintf_r+0x12c>
    3426:	9309      	str	r3, [sp, #36]	; 0x24
    3428:	e028      	b.n	347c <_vfiprintf_r+0x12c>
    342a:	4b51      	ldr	r3, [pc, #324]	; (3570 <_vfiprintf_r+0x220>)
    342c:	429f      	cmp	r7, r3
    342e:	d101      	bne.n	3434 <_vfiprintf_r+0xe4>
    3430:	68b7      	ldr	r7, [r6, #8]
    3432:	e79e      	b.n	3372 <_vfiprintf_r+0x22>
    3434:	4b4f      	ldr	r3, [pc, #316]	; (3574 <_vfiprintf_r+0x224>)
    3436:	429f      	cmp	r7, r3
    3438:	d19b      	bne.n	3372 <_vfiprintf_r+0x22>
    343a:	68f7      	ldr	r7, [r6, #12]
    343c:	e799      	b.n	3372 <_vfiprintf_r+0x22>
    343e:	0039      	movs	r1, r7
    3440:	0030      	movs	r0, r6
    3442:	f7ff fc3b 	bl	2cbc <__swsetup_r>
    3446:	2800      	cmp	r0, #0
    3448:	d099      	beq.n	337e <_vfiprintf_r+0x2e>
    344a:	2001      	movs	r0, #1
    344c:	4240      	negs	r0, r0
    344e:	b01f      	add	sp, #124	; 0x7c
    3450:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3452:	2b25      	cmp	r3, #37	; 0x25
    3454:	d09f      	beq.n	3396 <_vfiprintf_r+0x46>
    3456:	3401      	adds	r4, #1
    3458:	e79a      	b.n	3390 <_vfiprintf_r+0x40>
    345a:	4b44      	ldr	r3, [pc, #272]	; (356c <_vfiprintf_r+0x21c>)
    345c:	6829      	ldr	r1, [r5, #0]
    345e:	1ac0      	subs	r0, r0, r3
    3460:	2301      	movs	r3, #1
    3462:	4083      	lsls	r3, r0
    3464:	430b      	orrs	r3, r1
    3466:	602b      	str	r3, [r5, #0]
    3468:	4664      	mov	r4, ip
    346a:	e7b7      	b.n	33dc <_vfiprintf_r+0x8c>
    346c:	9b05      	ldr	r3, [sp, #20]
    346e:	1d18      	adds	r0, r3, #4
    3470:	681b      	ldr	r3, [r3, #0]
    3472:	9005      	str	r0, [sp, #20]
    3474:	2b00      	cmp	r3, #0
    3476:	db3a      	blt.n	34ee <_vfiprintf_r+0x19e>
    3478:	9309      	str	r3, [sp, #36]	; 0x24
    347a:	4664      	mov	r4, ip
    347c:	7823      	ldrb	r3, [r4, #0]
    347e:	2b2e      	cmp	r3, #46	; 0x2e
    3480:	d10b      	bne.n	349a <_vfiprintf_r+0x14a>
    3482:	7863      	ldrb	r3, [r4, #1]
    3484:	1c62      	adds	r2, r4, #1
    3486:	2b2a      	cmp	r3, #42	; 0x2a
    3488:	d13f      	bne.n	350a <_vfiprintf_r+0x1ba>
    348a:	9b05      	ldr	r3, [sp, #20]
    348c:	3402      	adds	r4, #2
    348e:	1d1a      	adds	r2, r3, #4
    3490:	681b      	ldr	r3, [r3, #0]
    3492:	9205      	str	r2, [sp, #20]
    3494:	2b00      	cmp	r3, #0
    3496:	db35      	blt.n	3504 <_vfiprintf_r+0x1b4>
    3498:	9307      	str	r3, [sp, #28]
    349a:	7821      	ldrb	r1, [r4, #0]
    349c:	2203      	movs	r2, #3
    349e:	4836      	ldr	r0, [pc, #216]	; (3578 <_vfiprintf_r+0x228>)
    34a0:	f000 fab6 	bl	3a10 <memchr>
    34a4:	2800      	cmp	r0, #0
    34a6:	d007      	beq.n	34b8 <_vfiprintf_r+0x168>
    34a8:	4b33      	ldr	r3, [pc, #204]	; (3578 <_vfiprintf_r+0x228>)
    34aa:	682a      	ldr	r2, [r5, #0]
    34ac:	1ac0      	subs	r0, r0, r3
    34ae:	2340      	movs	r3, #64	; 0x40
    34b0:	4083      	lsls	r3, r0
    34b2:	4313      	orrs	r3, r2
    34b4:	602b      	str	r3, [r5, #0]
    34b6:	3401      	adds	r4, #1
    34b8:	7821      	ldrb	r1, [r4, #0]
    34ba:	1c63      	adds	r3, r4, #1
    34bc:	2206      	movs	r2, #6
    34be:	482f      	ldr	r0, [pc, #188]	; (357c <_vfiprintf_r+0x22c>)
    34c0:	9302      	str	r3, [sp, #8]
    34c2:	7629      	strb	r1, [r5, #24]
    34c4:	f000 faa4 	bl	3a10 <memchr>
    34c8:	2800      	cmp	r0, #0
    34ca:	d044      	beq.n	3556 <_vfiprintf_r+0x206>
    34cc:	4b2c      	ldr	r3, [pc, #176]	; (3580 <_vfiprintf_r+0x230>)
    34ce:	2b00      	cmp	r3, #0
    34d0:	d12f      	bne.n	3532 <_vfiprintf_r+0x1e2>
    34d2:	6829      	ldr	r1, [r5, #0]
    34d4:	9b05      	ldr	r3, [sp, #20]
    34d6:	2207      	movs	r2, #7
    34d8:	05c9      	lsls	r1, r1, #23
    34da:	d528      	bpl.n	352e <_vfiprintf_r+0x1de>
    34dc:	189b      	adds	r3, r3, r2
    34de:	4393      	bics	r3, r2
    34e0:	3308      	adds	r3, #8
    34e2:	9305      	str	r3, [sp, #20]
    34e4:	696b      	ldr	r3, [r5, #20]
    34e6:	9a03      	ldr	r2, [sp, #12]
    34e8:	189b      	adds	r3, r3, r2
    34ea:	616b      	str	r3, [r5, #20]
    34ec:	e74f      	b.n	338e <_vfiprintf_r+0x3e>
    34ee:	425b      	negs	r3, r3
    34f0:	60eb      	str	r3, [r5, #12]
    34f2:	2302      	movs	r3, #2
    34f4:	430b      	orrs	r3, r1
    34f6:	602b      	str	r3, [r5, #0]
    34f8:	e7bf      	b.n	347a <_vfiprintf_r+0x12a>
    34fa:	434b      	muls	r3, r1
    34fc:	3401      	adds	r4, #1
    34fe:	189b      	adds	r3, r3, r2
    3500:	2001      	movs	r0, #1
    3502:	e789      	b.n	3418 <_vfiprintf_r+0xc8>
    3504:	2301      	movs	r3, #1
    3506:	425b      	negs	r3, r3
    3508:	e7c6      	b.n	3498 <_vfiprintf_r+0x148>
    350a:	2300      	movs	r3, #0
    350c:	0014      	movs	r4, r2
    350e:	200a      	movs	r0, #10
    3510:	001a      	movs	r2, r3
    3512:	606b      	str	r3, [r5, #4]
    3514:	7821      	ldrb	r1, [r4, #0]
    3516:	3930      	subs	r1, #48	; 0x30
    3518:	2909      	cmp	r1, #9
    351a:	d903      	bls.n	3524 <_vfiprintf_r+0x1d4>
    351c:	2b00      	cmp	r3, #0
    351e:	d0bc      	beq.n	349a <_vfiprintf_r+0x14a>
    3520:	9207      	str	r2, [sp, #28]
    3522:	e7ba      	b.n	349a <_vfiprintf_r+0x14a>
    3524:	4342      	muls	r2, r0
    3526:	3401      	adds	r4, #1
    3528:	1852      	adds	r2, r2, r1
    352a:	2301      	movs	r3, #1
    352c:	e7f2      	b.n	3514 <_vfiprintf_r+0x1c4>
    352e:	3307      	adds	r3, #7
    3530:	e7d5      	b.n	34de <_vfiprintf_r+0x18e>
    3532:	ab05      	add	r3, sp, #20
    3534:	9300      	str	r3, [sp, #0]
    3536:	003a      	movs	r2, r7
    3538:	4b12      	ldr	r3, [pc, #72]	; (3584 <_vfiprintf_r+0x234>)
    353a:	0029      	movs	r1, r5
    353c:	0030      	movs	r0, r6
    353e:	e000      	b.n	3542 <_vfiprintf_r+0x1f2>
    3540:	bf00      	nop
    3542:	9003      	str	r0, [sp, #12]
    3544:	9b03      	ldr	r3, [sp, #12]
    3546:	3301      	adds	r3, #1
    3548:	d1cc      	bne.n	34e4 <_vfiprintf_r+0x194>
    354a:	89bb      	ldrh	r3, [r7, #12]
    354c:	065b      	lsls	r3, r3, #25
    354e:	d500      	bpl.n	3552 <_vfiprintf_r+0x202>
    3550:	e77b      	b.n	344a <_vfiprintf_r+0xfa>
    3552:	980b      	ldr	r0, [sp, #44]	; 0x2c
    3554:	e77b      	b.n	344e <_vfiprintf_r+0xfe>
    3556:	ab05      	add	r3, sp, #20
    3558:	9300      	str	r3, [sp, #0]
    355a:	003a      	movs	r2, r7
    355c:	4b09      	ldr	r3, [pc, #36]	; (3584 <_vfiprintf_r+0x234>)
    355e:	0029      	movs	r1, r5
    3560:	0030      	movs	r0, r6
    3562:	f000 f87f 	bl	3664 <_printf_i>
    3566:	e7ec      	b.n	3542 <_vfiprintf_r+0x1f2>
    3568:	00003b24 	.word	0x00003b24
    356c:	00003b64 	.word	0x00003b64
    3570:	00003b44 	.word	0x00003b44
    3574:	00003b04 	.word	0x00003b04
    3578:	00003b6a 	.word	0x00003b6a
    357c:	00003b6e 	.word	0x00003b6e
    3580:	00000000 	.word	0x00000000
    3584:	0000332b 	.word	0x0000332b

00003588 <_printf_common>:
    3588:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    358a:	0015      	movs	r5, r2
    358c:	9301      	str	r3, [sp, #4]
    358e:	688a      	ldr	r2, [r1, #8]
    3590:	690b      	ldr	r3, [r1, #16]
    3592:	9000      	str	r0, [sp, #0]
    3594:	000c      	movs	r4, r1
    3596:	4293      	cmp	r3, r2
    3598:	da00      	bge.n	359c <_printf_common+0x14>
    359a:	0013      	movs	r3, r2
    359c:	0022      	movs	r2, r4
    359e:	602b      	str	r3, [r5, #0]
    35a0:	3243      	adds	r2, #67	; 0x43
    35a2:	7812      	ldrb	r2, [r2, #0]
    35a4:	2a00      	cmp	r2, #0
    35a6:	d001      	beq.n	35ac <_printf_common+0x24>
    35a8:	3301      	adds	r3, #1
    35aa:	602b      	str	r3, [r5, #0]
    35ac:	6823      	ldr	r3, [r4, #0]
    35ae:	069b      	lsls	r3, r3, #26
    35b0:	d502      	bpl.n	35b8 <_printf_common+0x30>
    35b2:	682b      	ldr	r3, [r5, #0]
    35b4:	3302      	adds	r3, #2
    35b6:	602b      	str	r3, [r5, #0]
    35b8:	2706      	movs	r7, #6
    35ba:	6823      	ldr	r3, [r4, #0]
    35bc:	401f      	ands	r7, r3
    35be:	d027      	beq.n	3610 <_printf_common+0x88>
    35c0:	0023      	movs	r3, r4
    35c2:	3343      	adds	r3, #67	; 0x43
    35c4:	781b      	ldrb	r3, [r3, #0]
    35c6:	1e5a      	subs	r2, r3, #1
    35c8:	4193      	sbcs	r3, r2
    35ca:	6822      	ldr	r2, [r4, #0]
    35cc:	0692      	lsls	r2, r2, #26
    35ce:	d430      	bmi.n	3632 <_printf_common+0xaa>
    35d0:	0022      	movs	r2, r4
    35d2:	9901      	ldr	r1, [sp, #4]
    35d4:	3243      	adds	r2, #67	; 0x43
    35d6:	9800      	ldr	r0, [sp, #0]
    35d8:	9e08      	ldr	r6, [sp, #32]
    35da:	47b0      	blx	r6
    35dc:	1c43      	adds	r3, r0, #1
    35de:	d025      	beq.n	362c <_printf_common+0xa4>
    35e0:	2306      	movs	r3, #6
    35e2:	6820      	ldr	r0, [r4, #0]
    35e4:	682a      	ldr	r2, [r5, #0]
    35e6:	68e1      	ldr	r1, [r4, #12]
    35e8:	4003      	ands	r3, r0
    35ea:	2500      	movs	r5, #0
    35ec:	2b04      	cmp	r3, #4
    35ee:	d103      	bne.n	35f8 <_printf_common+0x70>
    35f0:	1a8d      	subs	r5, r1, r2
    35f2:	43eb      	mvns	r3, r5
    35f4:	17db      	asrs	r3, r3, #31
    35f6:	401d      	ands	r5, r3
    35f8:	68a3      	ldr	r3, [r4, #8]
    35fa:	6922      	ldr	r2, [r4, #16]
    35fc:	4293      	cmp	r3, r2
    35fe:	dd01      	ble.n	3604 <_printf_common+0x7c>
    3600:	1a9b      	subs	r3, r3, r2
    3602:	18ed      	adds	r5, r5, r3
    3604:	2700      	movs	r7, #0
    3606:	42bd      	cmp	r5, r7
    3608:	d120      	bne.n	364c <_printf_common+0xc4>
    360a:	2000      	movs	r0, #0
    360c:	e010      	b.n	3630 <_printf_common+0xa8>
    360e:	3701      	adds	r7, #1
    3610:	68e3      	ldr	r3, [r4, #12]
    3612:	682a      	ldr	r2, [r5, #0]
    3614:	1a9b      	subs	r3, r3, r2
    3616:	429f      	cmp	r7, r3
    3618:	dad2      	bge.n	35c0 <_printf_common+0x38>
    361a:	0022      	movs	r2, r4
    361c:	2301      	movs	r3, #1
    361e:	3219      	adds	r2, #25
    3620:	9901      	ldr	r1, [sp, #4]
    3622:	9800      	ldr	r0, [sp, #0]
    3624:	9e08      	ldr	r6, [sp, #32]
    3626:	47b0      	blx	r6
    3628:	1c43      	adds	r3, r0, #1
    362a:	d1f0      	bne.n	360e <_printf_common+0x86>
    362c:	2001      	movs	r0, #1
    362e:	4240      	negs	r0, r0
    3630:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3632:	2030      	movs	r0, #48	; 0x30
    3634:	18e1      	adds	r1, r4, r3
    3636:	3143      	adds	r1, #67	; 0x43
    3638:	7008      	strb	r0, [r1, #0]
    363a:	0021      	movs	r1, r4
    363c:	1c5a      	adds	r2, r3, #1
    363e:	3145      	adds	r1, #69	; 0x45
    3640:	7809      	ldrb	r1, [r1, #0]
    3642:	18a2      	adds	r2, r4, r2
    3644:	3243      	adds	r2, #67	; 0x43
    3646:	3302      	adds	r3, #2
    3648:	7011      	strb	r1, [r2, #0]
    364a:	e7c1      	b.n	35d0 <_printf_common+0x48>
    364c:	0022      	movs	r2, r4
    364e:	2301      	movs	r3, #1
    3650:	321a      	adds	r2, #26
    3652:	9901      	ldr	r1, [sp, #4]
    3654:	9800      	ldr	r0, [sp, #0]
    3656:	9e08      	ldr	r6, [sp, #32]
    3658:	47b0      	blx	r6
    365a:	1c43      	adds	r3, r0, #1
    365c:	d0e6      	beq.n	362c <_printf_common+0xa4>
    365e:	3701      	adds	r7, #1
    3660:	e7d1      	b.n	3606 <_printf_common+0x7e>
	...

00003664 <_printf_i>:
    3664:	b5f0      	push	{r4, r5, r6, r7, lr}
    3666:	b08b      	sub	sp, #44	; 0x2c
    3668:	9206      	str	r2, [sp, #24]
    366a:	000a      	movs	r2, r1
    366c:	3243      	adds	r2, #67	; 0x43
    366e:	9307      	str	r3, [sp, #28]
    3670:	9005      	str	r0, [sp, #20]
    3672:	9204      	str	r2, [sp, #16]
    3674:	7e0a      	ldrb	r2, [r1, #24]
    3676:	000c      	movs	r4, r1
    3678:	9b10      	ldr	r3, [sp, #64]	; 0x40
    367a:	2a6e      	cmp	r2, #110	; 0x6e
    367c:	d100      	bne.n	3680 <_printf_i+0x1c>
    367e:	e08f      	b.n	37a0 <_printf_i+0x13c>
    3680:	d817      	bhi.n	36b2 <_printf_i+0x4e>
    3682:	2a63      	cmp	r2, #99	; 0x63
    3684:	d02c      	beq.n	36e0 <_printf_i+0x7c>
    3686:	d808      	bhi.n	369a <_printf_i+0x36>
    3688:	2a00      	cmp	r2, #0
    368a:	d100      	bne.n	368e <_printf_i+0x2a>
    368c:	e099      	b.n	37c2 <_printf_i+0x15e>
    368e:	2a58      	cmp	r2, #88	; 0x58
    3690:	d054      	beq.n	373c <_printf_i+0xd8>
    3692:	0026      	movs	r6, r4
    3694:	3642      	adds	r6, #66	; 0x42
    3696:	7032      	strb	r2, [r6, #0]
    3698:	e029      	b.n	36ee <_printf_i+0x8a>
    369a:	2a64      	cmp	r2, #100	; 0x64
    369c:	d001      	beq.n	36a2 <_printf_i+0x3e>
    369e:	2a69      	cmp	r2, #105	; 0x69
    36a0:	d1f7      	bne.n	3692 <_printf_i+0x2e>
    36a2:	6821      	ldr	r1, [r4, #0]
    36a4:	681a      	ldr	r2, [r3, #0]
    36a6:	0608      	lsls	r0, r1, #24
    36a8:	d523      	bpl.n	36f2 <_printf_i+0x8e>
    36aa:	1d11      	adds	r1, r2, #4
    36ac:	6019      	str	r1, [r3, #0]
    36ae:	6815      	ldr	r5, [r2, #0]
    36b0:	e025      	b.n	36fe <_printf_i+0x9a>
    36b2:	2a73      	cmp	r2, #115	; 0x73
    36b4:	d100      	bne.n	36b8 <_printf_i+0x54>
    36b6:	e088      	b.n	37ca <_printf_i+0x166>
    36b8:	d808      	bhi.n	36cc <_printf_i+0x68>
    36ba:	2a6f      	cmp	r2, #111	; 0x6f
    36bc:	d029      	beq.n	3712 <_printf_i+0xae>
    36be:	2a70      	cmp	r2, #112	; 0x70
    36c0:	d1e7      	bne.n	3692 <_printf_i+0x2e>
    36c2:	2220      	movs	r2, #32
    36c4:	6809      	ldr	r1, [r1, #0]
    36c6:	430a      	orrs	r2, r1
    36c8:	6022      	str	r2, [r4, #0]
    36ca:	e003      	b.n	36d4 <_printf_i+0x70>
    36cc:	2a75      	cmp	r2, #117	; 0x75
    36ce:	d020      	beq.n	3712 <_printf_i+0xae>
    36d0:	2a78      	cmp	r2, #120	; 0x78
    36d2:	d1de      	bne.n	3692 <_printf_i+0x2e>
    36d4:	0022      	movs	r2, r4
    36d6:	2178      	movs	r1, #120	; 0x78
    36d8:	3245      	adds	r2, #69	; 0x45
    36da:	7011      	strb	r1, [r2, #0]
    36dc:	4a6c      	ldr	r2, [pc, #432]	; (3890 <_printf_i+0x22c>)
    36de:	e030      	b.n	3742 <_printf_i+0xde>
    36e0:	000e      	movs	r6, r1
    36e2:	681a      	ldr	r2, [r3, #0]
    36e4:	3642      	adds	r6, #66	; 0x42
    36e6:	1d11      	adds	r1, r2, #4
    36e8:	6019      	str	r1, [r3, #0]
    36ea:	6813      	ldr	r3, [r2, #0]
    36ec:	7033      	strb	r3, [r6, #0]
    36ee:	2301      	movs	r3, #1
    36f0:	e079      	b.n	37e6 <_printf_i+0x182>
    36f2:	0649      	lsls	r1, r1, #25
    36f4:	d5d9      	bpl.n	36aa <_printf_i+0x46>
    36f6:	1d11      	adds	r1, r2, #4
    36f8:	6019      	str	r1, [r3, #0]
    36fa:	2300      	movs	r3, #0
    36fc:	5ed5      	ldrsh	r5, [r2, r3]
    36fe:	2d00      	cmp	r5, #0
    3700:	da03      	bge.n	370a <_printf_i+0xa6>
    3702:	232d      	movs	r3, #45	; 0x2d
    3704:	9a04      	ldr	r2, [sp, #16]
    3706:	426d      	negs	r5, r5
    3708:	7013      	strb	r3, [r2, #0]
    370a:	4b62      	ldr	r3, [pc, #392]	; (3894 <_printf_i+0x230>)
    370c:	270a      	movs	r7, #10
    370e:	9303      	str	r3, [sp, #12]
    3710:	e02f      	b.n	3772 <_printf_i+0x10e>
    3712:	6820      	ldr	r0, [r4, #0]
    3714:	6819      	ldr	r1, [r3, #0]
    3716:	0605      	lsls	r5, r0, #24
    3718:	d503      	bpl.n	3722 <_printf_i+0xbe>
    371a:	1d08      	adds	r0, r1, #4
    371c:	6018      	str	r0, [r3, #0]
    371e:	680d      	ldr	r5, [r1, #0]
    3720:	e005      	b.n	372e <_printf_i+0xca>
    3722:	0640      	lsls	r0, r0, #25
    3724:	d5f9      	bpl.n	371a <_printf_i+0xb6>
    3726:	680d      	ldr	r5, [r1, #0]
    3728:	1d08      	adds	r0, r1, #4
    372a:	6018      	str	r0, [r3, #0]
    372c:	b2ad      	uxth	r5, r5
    372e:	4b59      	ldr	r3, [pc, #356]	; (3894 <_printf_i+0x230>)
    3730:	2708      	movs	r7, #8
    3732:	9303      	str	r3, [sp, #12]
    3734:	2a6f      	cmp	r2, #111	; 0x6f
    3736:	d018      	beq.n	376a <_printf_i+0x106>
    3738:	270a      	movs	r7, #10
    373a:	e016      	b.n	376a <_printf_i+0x106>
    373c:	3145      	adds	r1, #69	; 0x45
    373e:	700a      	strb	r2, [r1, #0]
    3740:	4a54      	ldr	r2, [pc, #336]	; (3894 <_printf_i+0x230>)
    3742:	9203      	str	r2, [sp, #12]
    3744:	681a      	ldr	r2, [r3, #0]
    3746:	6821      	ldr	r1, [r4, #0]
    3748:	1d10      	adds	r0, r2, #4
    374a:	6018      	str	r0, [r3, #0]
    374c:	6815      	ldr	r5, [r2, #0]
    374e:	0608      	lsls	r0, r1, #24
    3750:	d522      	bpl.n	3798 <_printf_i+0x134>
    3752:	07cb      	lsls	r3, r1, #31
    3754:	d502      	bpl.n	375c <_printf_i+0xf8>
    3756:	2320      	movs	r3, #32
    3758:	4319      	orrs	r1, r3
    375a:	6021      	str	r1, [r4, #0]
    375c:	2710      	movs	r7, #16
    375e:	2d00      	cmp	r5, #0
    3760:	d103      	bne.n	376a <_printf_i+0x106>
    3762:	2320      	movs	r3, #32
    3764:	6822      	ldr	r2, [r4, #0]
    3766:	439a      	bics	r2, r3
    3768:	6022      	str	r2, [r4, #0]
    376a:	0023      	movs	r3, r4
    376c:	2200      	movs	r2, #0
    376e:	3343      	adds	r3, #67	; 0x43
    3770:	701a      	strb	r2, [r3, #0]
    3772:	6863      	ldr	r3, [r4, #4]
    3774:	60a3      	str	r3, [r4, #8]
    3776:	2b00      	cmp	r3, #0
    3778:	db5c      	blt.n	3834 <_printf_i+0x1d0>
    377a:	2204      	movs	r2, #4
    377c:	6821      	ldr	r1, [r4, #0]
    377e:	4391      	bics	r1, r2
    3780:	6021      	str	r1, [r4, #0]
    3782:	2d00      	cmp	r5, #0
    3784:	d158      	bne.n	3838 <_printf_i+0x1d4>
    3786:	9e04      	ldr	r6, [sp, #16]
    3788:	2b00      	cmp	r3, #0
    378a:	d064      	beq.n	3856 <_printf_i+0x1f2>
    378c:	0026      	movs	r6, r4
    378e:	9b03      	ldr	r3, [sp, #12]
    3790:	3642      	adds	r6, #66	; 0x42
    3792:	781b      	ldrb	r3, [r3, #0]
    3794:	7033      	strb	r3, [r6, #0]
    3796:	e05e      	b.n	3856 <_printf_i+0x1f2>
    3798:	0648      	lsls	r0, r1, #25
    379a:	d5da      	bpl.n	3752 <_printf_i+0xee>
    379c:	b2ad      	uxth	r5, r5
    379e:	e7d8      	b.n	3752 <_printf_i+0xee>
    37a0:	6809      	ldr	r1, [r1, #0]
    37a2:	681a      	ldr	r2, [r3, #0]
    37a4:	0608      	lsls	r0, r1, #24
    37a6:	d505      	bpl.n	37b4 <_printf_i+0x150>
    37a8:	1d11      	adds	r1, r2, #4
    37aa:	6019      	str	r1, [r3, #0]
    37ac:	6813      	ldr	r3, [r2, #0]
    37ae:	6962      	ldr	r2, [r4, #20]
    37b0:	601a      	str	r2, [r3, #0]
    37b2:	e006      	b.n	37c2 <_printf_i+0x15e>
    37b4:	0649      	lsls	r1, r1, #25
    37b6:	d5f7      	bpl.n	37a8 <_printf_i+0x144>
    37b8:	1d11      	adds	r1, r2, #4
    37ba:	6019      	str	r1, [r3, #0]
    37bc:	6813      	ldr	r3, [r2, #0]
    37be:	8aa2      	ldrh	r2, [r4, #20]
    37c0:	801a      	strh	r2, [r3, #0]
    37c2:	2300      	movs	r3, #0
    37c4:	9e04      	ldr	r6, [sp, #16]
    37c6:	6123      	str	r3, [r4, #16]
    37c8:	e054      	b.n	3874 <_printf_i+0x210>
    37ca:	681a      	ldr	r2, [r3, #0]
    37cc:	1d11      	adds	r1, r2, #4
    37ce:	6019      	str	r1, [r3, #0]
    37d0:	6816      	ldr	r6, [r2, #0]
    37d2:	2100      	movs	r1, #0
    37d4:	6862      	ldr	r2, [r4, #4]
    37d6:	0030      	movs	r0, r6
    37d8:	f000 f91a 	bl	3a10 <memchr>
    37dc:	2800      	cmp	r0, #0
    37de:	d001      	beq.n	37e4 <_printf_i+0x180>
    37e0:	1b80      	subs	r0, r0, r6
    37e2:	6060      	str	r0, [r4, #4]
    37e4:	6863      	ldr	r3, [r4, #4]
    37e6:	6123      	str	r3, [r4, #16]
    37e8:	2300      	movs	r3, #0
    37ea:	9a04      	ldr	r2, [sp, #16]
    37ec:	7013      	strb	r3, [r2, #0]
    37ee:	e041      	b.n	3874 <_printf_i+0x210>
    37f0:	6923      	ldr	r3, [r4, #16]
    37f2:	0032      	movs	r2, r6
    37f4:	9906      	ldr	r1, [sp, #24]
    37f6:	9805      	ldr	r0, [sp, #20]
    37f8:	9d07      	ldr	r5, [sp, #28]
    37fa:	47a8      	blx	r5
    37fc:	1c43      	adds	r3, r0, #1
    37fe:	d043      	beq.n	3888 <_printf_i+0x224>
    3800:	6823      	ldr	r3, [r4, #0]
    3802:	2500      	movs	r5, #0
    3804:	079b      	lsls	r3, r3, #30
    3806:	d40f      	bmi.n	3828 <_printf_i+0x1c4>
    3808:	9b09      	ldr	r3, [sp, #36]	; 0x24
    380a:	68e0      	ldr	r0, [r4, #12]
    380c:	4298      	cmp	r0, r3
    380e:	da3d      	bge.n	388c <_printf_i+0x228>
    3810:	0018      	movs	r0, r3
    3812:	e03b      	b.n	388c <_printf_i+0x228>
    3814:	0022      	movs	r2, r4
    3816:	2301      	movs	r3, #1
    3818:	3219      	adds	r2, #25
    381a:	9906      	ldr	r1, [sp, #24]
    381c:	9805      	ldr	r0, [sp, #20]
    381e:	9e07      	ldr	r6, [sp, #28]
    3820:	47b0      	blx	r6
    3822:	1c43      	adds	r3, r0, #1
    3824:	d030      	beq.n	3888 <_printf_i+0x224>
    3826:	3501      	adds	r5, #1
    3828:	68e3      	ldr	r3, [r4, #12]
    382a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    382c:	1a9b      	subs	r3, r3, r2
    382e:	429d      	cmp	r5, r3
    3830:	dbf0      	blt.n	3814 <_printf_i+0x1b0>
    3832:	e7e9      	b.n	3808 <_printf_i+0x1a4>
    3834:	2d00      	cmp	r5, #0
    3836:	d0a9      	beq.n	378c <_printf_i+0x128>
    3838:	9e04      	ldr	r6, [sp, #16]
    383a:	0028      	movs	r0, r5
    383c:	0039      	movs	r1, r7
    383e:	f7ff f851 	bl	28e4 <__aeabi_uidivmod>
    3842:	9b03      	ldr	r3, [sp, #12]
    3844:	3e01      	subs	r6, #1
    3846:	5c5b      	ldrb	r3, [r3, r1]
    3848:	0028      	movs	r0, r5
    384a:	7033      	strb	r3, [r6, #0]
    384c:	0039      	movs	r1, r7
    384e:	f7fe ffc3 	bl	27d8 <__udivsi3>
    3852:	1e05      	subs	r5, r0, #0
    3854:	d1f1      	bne.n	383a <_printf_i+0x1d6>
    3856:	2f08      	cmp	r7, #8
    3858:	d109      	bne.n	386e <_printf_i+0x20a>
    385a:	6823      	ldr	r3, [r4, #0]
    385c:	07db      	lsls	r3, r3, #31
    385e:	d506      	bpl.n	386e <_printf_i+0x20a>
    3860:	6863      	ldr	r3, [r4, #4]
    3862:	6922      	ldr	r2, [r4, #16]
    3864:	4293      	cmp	r3, r2
    3866:	dc02      	bgt.n	386e <_printf_i+0x20a>
    3868:	2330      	movs	r3, #48	; 0x30
    386a:	3e01      	subs	r6, #1
    386c:	7033      	strb	r3, [r6, #0]
    386e:	9b04      	ldr	r3, [sp, #16]
    3870:	1b9b      	subs	r3, r3, r6
    3872:	6123      	str	r3, [r4, #16]
    3874:	9b07      	ldr	r3, [sp, #28]
    3876:	aa09      	add	r2, sp, #36	; 0x24
    3878:	9300      	str	r3, [sp, #0]
    387a:	0021      	movs	r1, r4
    387c:	9b06      	ldr	r3, [sp, #24]
    387e:	9805      	ldr	r0, [sp, #20]
    3880:	f7ff fe82 	bl	3588 <_printf_common>
    3884:	1c43      	adds	r3, r0, #1
    3886:	d1b3      	bne.n	37f0 <_printf_i+0x18c>
    3888:	2001      	movs	r0, #1
    388a:	4240      	negs	r0, r0
    388c:	b00b      	add	sp, #44	; 0x2c
    388e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3890:	00003b86 	.word	0x00003b86
    3894:	00003b75 	.word	0x00003b75

00003898 <_sbrk_r>:
    3898:	2300      	movs	r3, #0
    389a:	b570      	push	{r4, r5, r6, lr}
    389c:	4c06      	ldr	r4, [pc, #24]	; (38b8 <_sbrk_r+0x20>)
    389e:	0005      	movs	r5, r0
    38a0:	0008      	movs	r0, r1
    38a2:	6023      	str	r3, [r4, #0]
    38a4:	f7fe fd8c 	bl	23c0 <_sbrk>
    38a8:	1c43      	adds	r3, r0, #1
    38aa:	d103      	bne.n	38b4 <_sbrk_r+0x1c>
    38ac:	6823      	ldr	r3, [r4, #0]
    38ae:	2b00      	cmp	r3, #0
    38b0:	d000      	beq.n	38b4 <_sbrk_r+0x1c>
    38b2:	602b      	str	r3, [r5, #0]
    38b4:	bd70      	pop	{r4, r5, r6, pc}
    38b6:	46c0      	nop			; (mov r8, r8)
    38b8:	200004cc 	.word	0x200004cc

000038bc <__sread>:
    38bc:	b570      	push	{r4, r5, r6, lr}
    38be:	000c      	movs	r4, r1
    38c0:	250e      	movs	r5, #14
    38c2:	5f49      	ldrsh	r1, [r1, r5]
    38c4:	f000 f8b2 	bl	3a2c <_read_r>
    38c8:	2800      	cmp	r0, #0
    38ca:	db03      	blt.n	38d4 <__sread+0x18>
    38cc:	6d63      	ldr	r3, [r4, #84]	; 0x54
    38ce:	181b      	adds	r3, r3, r0
    38d0:	6563      	str	r3, [r4, #84]	; 0x54
    38d2:	bd70      	pop	{r4, r5, r6, pc}
    38d4:	89a3      	ldrh	r3, [r4, #12]
    38d6:	4a02      	ldr	r2, [pc, #8]	; (38e0 <__sread+0x24>)
    38d8:	4013      	ands	r3, r2
    38da:	81a3      	strh	r3, [r4, #12]
    38dc:	e7f9      	b.n	38d2 <__sread+0x16>
    38de:	46c0      	nop			; (mov r8, r8)
    38e0:	ffffefff 	.word	0xffffefff

000038e4 <__swrite>:
    38e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    38e6:	001f      	movs	r7, r3
    38e8:	898b      	ldrh	r3, [r1, #12]
    38ea:	0005      	movs	r5, r0
    38ec:	000c      	movs	r4, r1
    38ee:	0016      	movs	r6, r2
    38f0:	05db      	lsls	r3, r3, #23
    38f2:	d505      	bpl.n	3900 <__swrite+0x1c>
    38f4:	230e      	movs	r3, #14
    38f6:	5ec9      	ldrsh	r1, [r1, r3]
    38f8:	2200      	movs	r2, #0
    38fa:	2302      	movs	r3, #2
    38fc:	f000 f874 	bl	39e8 <_lseek_r>
    3900:	89a3      	ldrh	r3, [r4, #12]
    3902:	4a05      	ldr	r2, [pc, #20]	; (3918 <__swrite+0x34>)
    3904:	0028      	movs	r0, r5
    3906:	4013      	ands	r3, r2
    3908:	81a3      	strh	r3, [r4, #12]
    390a:	0032      	movs	r2, r6
    390c:	230e      	movs	r3, #14
    390e:	5ee1      	ldrsh	r1, [r4, r3]
    3910:	003b      	movs	r3, r7
    3912:	f000 f81f 	bl	3954 <_write_r>
    3916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3918:	ffffefff 	.word	0xffffefff

0000391c <__sseek>:
    391c:	b570      	push	{r4, r5, r6, lr}
    391e:	000c      	movs	r4, r1
    3920:	250e      	movs	r5, #14
    3922:	5f49      	ldrsh	r1, [r1, r5]
    3924:	f000 f860 	bl	39e8 <_lseek_r>
    3928:	89a3      	ldrh	r3, [r4, #12]
    392a:	1c42      	adds	r2, r0, #1
    392c:	d103      	bne.n	3936 <__sseek+0x1a>
    392e:	4a05      	ldr	r2, [pc, #20]	; (3944 <__sseek+0x28>)
    3930:	4013      	ands	r3, r2
    3932:	81a3      	strh	r3, [r4, #12]
    3934:	bd70      	pop	{r4, r5, r6, pc}
    3936:	2280      	movs	r2, #128	; 0x80
    3938:	0152      	lsls	r2, r2, #5
    393a:	4313      	orrs	r3, r2
    393c:	81a3      	strh	r3, [r4, #12]
    393e:	6560      	str	r0, [r4, #84]	; 0x54
    3940:	e7f8      	b.n	3934 <__sseek+0x18>
    3942:	46c0      	nop			; (mov r8, r8)
    3944:	ffffefff 	.word	0xffffefff

00003948 <__sclose>:
    3948:	b510      	push	{r4, lr}
    394a:	230e      	movs	r3, #14
    394c:	5ec9      	ldrsh	r1, [r1, r3]
    394e:	f000 f815 	bl	397c <_close_r>
    3952:	bd10      	pop	{r4, pc}

00003954 <_write_r>:
    3954:	b570      	push	{r4, r5, r6, lr}
    3956:	0005      	movs	r5, r0
    3958:	0008      	movs	r0, r1
    395a:	0011      	movs	r1, r2
    395c:	2200      	movs	r2, #0
    395e:	4c06      	ldr	r4, [pc, #24]	; (3978 <_write_r+0x24>)
    3960:	6022      	str	r2, [r4, #0]
    3962:	001a      	movs	r2, r3
    3964:	f7fe fcf6 	bl	2354 <_write>
    3968:	1c43      	adds	r3, r0, #1
    396a:	d103      	bne.n	3974 <_write_r+0x20>
    396c:	6823      	ldr	r3, [r4, #0]
    396e:	2b00      	cmp	r3, #0
    3970:	d000      	beq.n	3974 <_write_r+0x20>
    3972:	602b      	str	r3, [r5, #0]
    3974:	bd70      	pop	{r4, r5, r6, pc}
    3976:	46c0      	nop			; (mov r8, r8)
    3978:	200004cc 	.word	0x200004cc

0000397c <_close_r>:
    397c:	2300      	movs	r3, #0
    397e:	b570      	push	{r4, r5, r6, lr}
    3980:	4c06      	ldr	r4, [pc, #24]	; (399c <_close_r+0x20>)
    3982:	0005      	movs	r5, r0
    3984:	0008      	movs	r0, r1
    3986:	6023      	str	r3, [r4, #0]
    3988:	f7fe fd38 	bl	23fc <_close>
    398c:	1c43      	adds	r3, r0, #1
    398e:	d103      	bne.n	3998 <_close_r+0x1c>
    3990:	6823      	ldr	r3, [r4, #0]
    3992:	2b00      	cmp	r3, #0
    3994:	d000      	beq.n	3998 <_close_r+0x1c>
    3996:	602b      	str	r3, [r5, #0]
    3998:	bd70      	pop	{r4, r5, r6, pc}
    399a:	46c0      	nop			; (mov r8, r8)
    399c:	200004cc 	.word	0x200004cc

000039a0 <_fstat_r>:
    39a0:	2300      	movs	r3, #0
    39a2:	b570      	push	{r4, r5, r6, lr}
    39a4:	4c06      	ldr	r4, [pc, #24]	; (39c0 <_fstat_r+0x20>)
    39a6:	0005      	movs	r5, r0
    39a8:	0008      	movs	r0, r1
    39aa:	0011      	movs	r1, r2
    39ac:	6023      	str	r3, [r4, #0]
    39ae:	f7fe fd2f 	bl	2410 <_fstat>
    39b2:	1c43      	adds	r3, r0, #1
    39b4:	d103      	bne.n	39be <_fstat_r+0x1e>
    39b6:	6823      	ldr	r3, [r4, #0]
    39b8:	2b00      	cmp	r3, #0
    39ba:	d000      	beq.n	39be <_fstat_r+0x1e>
    39bc:	602b      	str	r3, [r5, #0]
    39be:	bd70      	pop	{r4, r5, r6, pc}
    39c0:	200004cc 	.word	0x200004cc

000039c4 <_isatty_r>:
    39c4:	2300      	movs	r3, #0
    39c6:	b570      	push	{r4, r5, r6, lr}
    39c8:	4c06      	ldr	r4, [pc, #24]	; (39e4 <_isatty_r+0x20>)
    39ca:	0005      	movs	r5, r0
    39cc:	0008      	movs	r0, r1
    39ce:	6023      	str	r3, [r4, #0]
    39d0:	f7fe fd2c 	bl	242c <_isatty>
    39d4:	1c43      	adds	r3, r0, #1
    39d6:	d103      	bne.n	39e0 <_isatty_r+0x1c>
    39d8:	6823      	ldr	r3, [r4, #0]
    39da:	2b00      	cmp	r3, #0
    39dc:	d000      	beq.n	39e0 <_isatty_r+0x1c>
    39de:	602b      	str	r3, [r5, #0]
    39e0:	bd70      	pop	{r4, r5, r6, pc}
    39e2:	46c0      	nop			; (mov r8, r8)
    39e4:	200004cc 	.word	0x200004cc

000039e8 <_lseek_r>:
    39e8:	b570      	push	{r4, r5, r6, lr}
    39ea:	0005      	movs	r5, r0
    39ec:	0008      	movs	r0, r1
    39ee:	0011      	movs	r1, r2
    39f0:	2200      	movs	r2, #0
    39f2:	4c06      	ldr	r4, [pc, #24]	; (3a0c <_lseek_r+0x24>)
    39f4:	6022      	str	r2, [r4, #0]
    39f6:	001a      	movs	r2, r3
    39f8:	f7fe fd21 	bl	243e <_lseek>
    39fc:	1c43      	adds	r3, r0, #1
    39fe:	d103      	bne.n	3a08 <_lseek_r+0x20>
    3a00:	6823      	ldr	r3, [r4, #0]
    3a02:	2b00      	cmp	r3, #0
    3a04:	d000      	beq.n	3a08 <_lseek_r+0x20>
    3a06:	602b      	str	r3, [r5, #0]
    3a08:	bd70      	pop	{r4, r5, r6, pc}
    3a0a:	46c0      	nop			; (mov r8, r8)
    3a0c:	200004cc 	.word	0x200004cc

00003a10 <memchr>:
    3a10:	b2c9      	uxtb	r1, r1
    3a12:	1882      	adds	r2, r0, r2
    3a14:	4290      	cmp	r0, r2
    3a16:	d101      	bne.n	3a1c <memchr+0xc>
    3a18:	2000      	movs	r0, #0
    3a1a:	4770      	bx	lr
    3a1c:	7803      	ldrb	r3, [r0, #0]
    3a1e:	428b      	cmp	r3, r1
    3a20:	d0fb      	beq.n	3a1a <memchr+0xa>
    3a22:	3001      	adds	r0, #1
    3a24:	e7f6      	b.n	3a14 <memchr+0x4>

00003a26 <__malloc_lock>:
    3a26:	4770      	bx	lr

00003a28 <__malloc_unlock>:
    3a28:	4770      	bx	lr
	...

00003a2c <_read_r>:
    3a2c:	b570      	push	{r4, r5, r6, lr}
    3a2e:	0005      	movs	r5, r0
    3a30:	0008      	movs	r0, r1
    3a32:	0011      	movs	r1, r2
    3a34:	2200      	movs	r2, #0
    3a36:	4c06      	ldr	r4, [pc, #24]	; (3a50 <_read_r+0x24>)
    3a38:	6022      	str	r2, [r4, #0]
    3a3a:	001a      	movs	r2, r3
    3a3c:	f7fe fc60 	bl	2300 <_read>
    3a40:	1c43      	adds	r3, r0, #1
    3a42:	d103      	bne.n	3a4c <_read_r+0x20>
    3a44:	6823      	ldr	r3, [r4, #0]
    3a46:	2b00      	cmp	r3, #0
    3a48:	d000      	beq.n	3a4c <_read_r+0x20>
    3a4a:	602b      	str	r3, [r5, #0]
    3a4c:	bd70      	pop	{r4, r5, r6, pc}
    3a4e:	46c0      	nop			; (mov r8, r8)
    3a50:	200004cc 	.word	0x200004cc
    3a54:	42000000 	.word	0x42000000
    3a58:	42000400 	.word	0x42000400
    3a5c:	42000800 	.word	0x42000800
    3a60:	42000c00 	.word	0x42000c00
    3a64:	42001000 	.word	0x42001000
    3a68:	43000400 	.word	0x43000400
    3a6c:	0000118c 	.word	0x0000118c
    3a70:	0000119a 	.word	0x0000119a
    3a74:	000011a8 	.word	0x000011a8
    3a78:	000011b6 	.word	0x000011b6
    3a7c:	000011c4 	.word	0x000011c4
    3a80:	00001a72 	.word	0x00001a72
    3a84:	00001aec 	.word	0x00001aec
    3a88:	00001aec 	.word	0x00001aec
    3a8c:	00001a92 	.word	0x00001a92
    3a90:	00001a8c 	.word	0x00001a8c
    3a94:	00001a98 	.word	0x00001a98
    3a98:	00001a78 	.word	0x00001a78
    3a9c:	00001a9e 	.word	0x00001a9e
    3aa0:	00001ad2 	.word	0x00001ad2
    3aa4:	00001c0c 	.word	0x00001c0c
    3aa8:	00001c1a 	.word	0x00001c1a
    3aac:	00001c28 	.word	0x00001c28
    3ab0:	00001c36 	.word	0x00001c36
    3ab4:	00001c44 	.word	0x00001c44
    3ab8:	20534541 	.word	0x20534541
    3abc:	2062694c 	.word	0x2062694c
    3ac0:	74736574 	.word	0x74736574
    3ac4:	0d0a0d20 	.word	0x0d0a0d20
    3ac8:	00000000 	.word	0x00000000
    3acc:	7373654d 	.word	0x7373654d
    3ad0:	20656761 	.word	0x20656761
    3ad4:	0d207369 	.word	0x0d207369
    3ad8:	00000000 	.word	0x00000000
    3adc:	78323025 	.word	0x78323025
    3ae0:	000a0d20 	.word	0x000a0d20
    3ae4:	68706943 	.word	0x68706943
    3ae8:	69207265 	.word	0x69207265
    3aec:	000d2073 	.word	0x000d2073
    3af0:	03020100 	.word	0x03020100
    3af4:	07060504 	.word	0x07060504
    3af8:	0b0a0908 	.word	0x0b0a0908
    3afc:	0f0e0d0c 	.word	0x0f0e0d0c

00003b00 <_global_impure_ptr>:
    3b00:	20000408                                ... 

00003b04 <__sf_fake_stderr>:
	...

00003b24 <__sf_fake_stdin>:
	...

00003b44 <__sf_fake_stdout>:
	...
    3b64:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    3b74:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    3b84:	31300046 35343332 39383736 64636261     F.0123456789abcd
    3b94:	00006665                                ef..

00003b98 <_init>:
    3b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3b9a:	46c0      	nop			; (mov r8, r8)
    3b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3b9e:	bc08      	pop	{r3}
    3ba0:	469e      	mov	lr, r3
    3ba2:	4770      	bx	lr

00003ba4 <__init_array_start>:
    3ba4:	000000dd 	.word	0x000000dd

00003ba8 <_fini>:
    3ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3baa:	46c0      	nop			; (mov r8, r8)
    3bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3bae:	bc08      	pop	{r3}
    3bb0:	469e      	mov	lr, r3
    3bb2:	4770      	bx	lr

00003bb4 <__fini_array_start>:
    3bb4:	000000b5 	.word	0x000000b5
